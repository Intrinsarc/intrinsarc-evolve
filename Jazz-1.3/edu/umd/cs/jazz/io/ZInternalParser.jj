
options {
    JAVA_UNICODE_ESCAPE = true;
    //STATIC = false;
}
 
PARSER_BEGIN(ZInternalParser)
package edu.umd.cs.jazz.io;

import java.lang.*;
import java.security.SecureClassLoader;
import java.util.*;
import java.io.*;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

public class ZInternalParser {
    static protected final Class[] NULL_ARGS = {};

    protected Hashtable objectTable;
    protected ZExtendedInputStream data;
    public FileInputStream realStream;
    public Hashtable stringTranslations = null;
    
    public void createObjectTable() {
	objectTable = new Hashtable();
    }
    public Hashtable getObjectTable() {
	return objectTable;
    }
    
    public void setDataStream(ZExtendedInputStream data) {
	this.data = data;
    }
    public ZExtendedInputStream getDataStream() {
	return data;
    }
    

    public void putObject(String key, Object val) {
	//System.out.println(key + " : " + val);
	
	objectTable.put(key, val);
    }
    
    public Object getObject(String key) {
	return objectTable.get(key);
    }

    
    public static void writeTesterFile(String filename) {
	try {
	    FileOutputStream fos =  new FileOutputStream(filename); 
	    ZObjectOutputStream out = new ZObjectOutputStream(fos);
	    edu.umd.cs.jazz.ZNode node = new edu.umd.cs.jazz.ZNode();
	    out.writeObject(node);
	    out.flush();
	    out.close();
	}
	catch (IOException e) {
	    System.out.println("Exception caught in writeTesterFile : " + e);
	    
	}
    }
    
    public static FileInputStream getInputStream(String args[]) {
	FileInputStream result = null;
	if (args.length == 1) {
	    System.out.println("Jazz File Parser:  Reading from file " + args[0] + " . . .");

	    try {
		result = new FileInputStream(args[0]);
	    }
	    catch (java.io.FileNotFoundException e) {
		System.out.println("Java Parser Version 1.1:  File " + args[0] + " not found.");
	    }
	} else {
	    System.out.println("Jazz File Parser:  Usage is :");
	    System.out.println("         java ZInternalParser inputfile");

	}
	return result;
    }

    public static void main(String args[]) {
	//writeTesterFile("ZNode.jazz");
	
	ZInternalParser parser;
	FileInputStream inStream = getInputStream(args);
	
	    
	if (inStream != null) {
	    parser = new ZInternalParser(inStream);
	    parser.createObjectTable();
	    
	    try {
		Object result = parser.Scene(parser);
		System.out.println("Jazz File Parser:  Jazz file parsed successfully.");
		System.out.println(result);
		
	    } catch (ParseException e) {
		System.out.println(e.getMessage());
		System.out.println("Jazz File Parser:  Encountered errors during parse.");
	    }
	}
    }
    
}

PARSER_END(ZInternalParser)


/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "#"  : IN_SINGLE_LINE_COMMENT 
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < OBJECT: "OBJECT" >
| < RETURN: "RETURN" >
| < APPDATA: "PROLOG" >
| < BOOLEAN: "boolean" >
| < BINARY: "BINARYDATAFOLLOWS" >
| < BYTE: "byte" >
| < CHAR: "char" >
| < DOUBLE: "double" >
| < FALSE: "false" >
| < FLOAT: "float" >
| < INT: "int" >
| < LONG: "long" >
| < NULL: "null" >
| < SHORT: "short" >
| < TRUE: "true" >		
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL: (["+" , "-"])? (["0"-"9"])+>
|
  < DOUBLE_FLOATING_POINT_LITERAL:
      (["+" , "-"])?  (  (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["d","D"])
  >
|
  < FLOATING_POINT_LITERAL:
      (["+" , "-"])?  ((["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F"])
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
			 //(   (~["\"","\\","\n","\r"])
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

TOKEN :
{
  < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
}

TOKEN :
{
    < BUILT_IN_OBJECT_TYPE : ("java.awt.Color" | "java.awt.Font" | "java.awt.geom.Rectangle2D" | "java.awt.geom.AffineTransform" ) >
}
TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0040",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/*
 * Program structuring syntax follows.
 */

Object Scene(ZInternalParser p) :
{
    Object result = null;
}
{
  
    Prolog(p)
	{
	    
//  	    for (Enumeration e = p.getObjectTable().keys() ; e.hasMoreElements() ;) {
//  		String key = (String)e.nextElement();
//  		System.out.println(key + " : " + p.getObject(key));
//  	    }
	}
    //"[" ( Declaration(p) | ReturnClause(p) )* "]"
    ( LOOKAHEAD(2) Declaration(p) ) *
    result = ReturnClause(p)
     //| ReturnClause(p) )* "]"	
    <EOF>

    {
	return result;
    }
}
Object ReturnClause(ZInternalParser p) :
{
    Object result = null;
}
{
    "["
    <RETURN>
    <IDENTIFIER> { 
	result = p.getObject(token.toString().substring(1));
	//System.out.println("Parser will return " + result);
    }
    "]"
    {
	return result;
    }
}

void Declaration(ZInternalParser p) :
{
    String objectKey;
}
{
    "["
    <OBJECT>
    <IDENTIFIER> {
	objectKey = token.toString().substring(1);
	//System.out.println("parsing state for : " + objectKey);
    }
    [ ObjectState(p, objectKey) ]
    "]"
}

void ObjectState(ZInternalParser p, String forObject) :
{}
{
  "{"  ( ObjectStateItem(p, forObject) )*  "}"
}
void ObjectStateItem(ZInternalParser p, String forObject) :
{
}
{
    ( ObjectStateBuiltInItem(p, forObject) | ObjectStateSimpleItem(p, forObject) | ObjectStateBinaryItem(p, forObject) )
}

void ObjectStateBuiltInItem(ZInternalParser p, String forObject) :
{
    String itemType = "";
    String itemName = "";
    String itemVal = "";
    Object iv;
}
{
    <BUILT_IN_OBJECT_TYPE>
	{
	    itemType = token.toString();
	}
    
    itemName = FieldName()
    
    iv = ValueObject(p)
    {
	Object valueObject;
	Object o = p.getObject(forObject);
	if ((o != null) && (iv != null)) {
	    if (itemType.equals("java.awt.Color")) {
	        Object[] colorAttributes = ((Vector)iv).toArray();
	    
	        valueObject = new java.awt.Color(((Number)colorAttributes[0]).floatValue(), ((Number)colorAttributes[1]).floatValue(),
					         ((Number)colorAttributes[2]).floatValue(), ((Number)colorAttributes[3]).floatValue());
	   
	    } else if (itemType.equals("java.awt.Font")) {
	        Object[] fontAttributes = ((Vector)iv).toArray();
	    
	        valueObject = new java.awt.Font((String)fontAttributes[0], ((Number)fontAttributes[1]).intValue(),
					        ((Number)fontAttributes[2]).intValue());
	   
	    } else if (itemType.equals("java.awt.geom.Rectangle2D")) {
	        Object[] rectAttributes = ((Vector)iv).toArray();
	    
	        valueObject = new java.awt.geom.Rectangle2D.Double (((Number)rectAttributes[0]).doubleValue(),
							            ((Number)rectAttributes[1]).doubleValue(),
							            ((Number)rectAttributes[2]).doubleValue(),
							            ((Number)rectAttributes[3]).doubleValue());
	   
	    } else if (itemType.equals("java.awt.geom.AffineTransform")) {
	        Object[] atAttributes = ((Vector)iv).toArray();
	    
	        valueObject = new java.awt.geom.AffineTransform	(((Number)atAttributes[0]).doubleValue(),
							         ((Number)atAttributes[1]).doubleValue(),
							         ((Number)atAttributes[2]).doubleValue(),
							         ((Number)atAttributes[3]).doubleValue(),
							         ((Number)atAttributes[4]).doubleValue(),
							         ((Number)atAttributes[5]).doubleValue());
	   
	    } else {
	        valueObject = null;
	    }
	
	    if (o instanceof ZSerializable) {
	        ZSerializable tmp = (ZSerializable) o;
	        tmp.setState(itemType, itemName, valueObject);
            }
	}
    }
}

void ObjectStateSimpleItem(ZInternalParser p, String forObject) :
{
    String itemType = "";
    String itemName = "";
    String itemVal = "";
    Object iv;
}
{
    itemType = FieldType()
    
    itemName = FieldName()
    
    iv = ValueObject(p)
    {
        if (iv != null) {
	    itemVal = iv.toString();
	    Object o = p.getObject(forObject);

	    if (o != null) {	
	        if (o instanceof ZSerializable) {
	            ZSerializable tmp = (ZSerializable) o;
	            tmp.setState(itemType, itemName, iv);
                }
	    }
        }
    }
}

String FieldType() :
{
    
}
{
    ( ObjectType() | <BOOLEAN> | <BYTE> | <CHAR> | <DOUBLE> | <FALSE> | <FLOAT> | <INT> | <LONG> )
    {
	return token.toString();
    }
}

String FieldName() :
{
    
}
{
    <IDENTIFIER>
    {
	return token.toString();
    }
}

Object ValueObject(ZInternalParser p) :
{
    Object array;
}
{
    <INTEGER_LITERAL>
	{
	    return new Integer(token.toString());
	}
    | <FLOATING_POINT_LITERAL>
	{
	    return new Float(token.toString());
	}
    | <DOUBLE_FLOATING_POINT_LITERAL >
	{
	    return new Double(token.toString());
	}
    | <STRING_LITERAL>
	{
	    String str = ZParser.translateJazzToJava(token.toString());
	    
	    return str.substring(1, str.length()-1);
	}
    | array = Array(p)
	{
	    return array;
	}
    | <IDENTIFIER>
	{
	    return p.getObject(token.toString().substring(1));
	}
    | <TRUE> {
	return new Boolean(true);
    }
    | <FALSE> {
	return new Boolean(false);
    }

}

Object Array(ZInternalParser p) :
{
    Vector result = new Vector();
    Object tmp;
    
}
{
  "["
      (
       <IDENTIFIER>
	{
	    result.add(p.getObject(token.toString().substring(1)));
	}
    | <INTEGER_LITERAL>
	{
	    result.add(new Integer(token.toString()));
	}
    | <FLOATING_POINT_LITERAL>
	{
	    result.add(new Float(token.toString()));
	}
    | <DOUBLE_FLOATING_POINT_LITERAL >
	{
	    result.add(new Double(token.toString()));
	}
    | <STRING_LITERAL>
	{
	    String str = token.toString();
	    result.add(str.substring(1, str.length()-1));
	    //result.add(new String(token.toString()));
	}
    | tmp = Array(p)
	{
	    result.add(tmp);
	}
    )*
	    //tmp = Value() {v.add(tmp);}  )*
   
  "]"

  {
      //System.out.println("array = " + result);
      
      return result;
  }
}

void ObjectStateBinaryItem(ZInternalParser p, String forObject) :
{
   String itemType = "";
   String itemName = "";
   byte[] itemVal;
   int    byteCount;
   int    offset;
}
{
    <BINARY>
	{
	    itemType = token.toString();
	}
    <IDENTIFIER>   
	{
	    itemName = token.toString();
	}
    <INTEGER_LITERAL>  // byte count
	{
	    byteCount = Integer.parseInt(token.toString()); 
	}
    <INTEGER_LITERAL>  // position in original stream
	{
	    offset = Integer.parseInt(token.toString());
	}
       {
	Object o = p.getObject(forObject);
	ZExtendedInputStream data = p.getDataStream();
	itemVal = new byte[byteCount];

	synchronized(data) {
	    try {
		data.setFilePosition(offset-1);
		data.read(itemVal, 0, byteCount);
	    }
	    catch (IOException e) {
		System.out.println("ZInternalParser.ObjectStateBinaryItem: caught exception while accesing data stream");
	    }
	}
	//System.out.println("      - Set [" + itemName + "] whose type is [" + itemType + "] whose value is [" + itemVal + "]");

	if (o != null) {	
	    if (o instanceof ZSerializable) {
	        ZSerializable tmp = (ZSerializable) o;
	        tmp.setState(itemType, itemName, itemVal);
	    }
        }
    }
		
}
       

void Prolog(ZInternalParser p) :
{}
{
  "[" ( PrologItem(p) )* "]"
}

void PrologItem(ZInternalParser p) :
{
    String s;
    String key;
} 
{
    <IDENTIFIER>
	{
	    key = token.toString(); 
	}
    
    s = ObjectType()
    {
	Class c = null;
	Object o = null;
	
	try {
	    c = Class.forName(s);
	    o = c.newInstance();

                                // Check to see if this object has a readResolve method.
                                // If so, call it to get a replacement object, and use that intead of this one.
	    try {
		Method readResolveMethod = o.getClass().getDeclaredMethod("readResolve", NULL_ARGS);
		int mods = readResolveMethod.getModifiers();
		if ((mods & Modifier.STATIC) == 0) {
				// Determine replacement object
		    Object replacementObj = null;
		    try {
			o = readResolveMethod.invoke(o, NULL_ARGS);
                        if (o != null) {
			    if (!(o instanceof ZSerializable)) {
			        throw new IOException("ZParser: Error: readResolve returned object that isn't ZSerializable: " + o);
                            }
			}
		    } catch (IllegalAccessException e) {
			throw new IOException("ZParser: Error reading: " + o + 
					      ", Can't access readResolve method: " + e);
		    } catch (InvocationTargetException e) {
			throw new IOException("ZParser: Error reading: " + o + ", " + e);
		    }
		}
	    } catch (NoSuchMethodException e) {
				// If no replacement method - then just continue along without replacing object
	    }
	    
            if (o != null) {
	        p.putObject(key, o);
            }
	}
	catch (Exception e) {
	    System.out.print("Exception caught while trying to : ");
	    if (e instanceof InstantiationException) {
		System.out.println("instantiate class" + c);
		p.putObject(key, "Error instantiating " + c);
	    } else if (e instanceof ClassNotFoundException) {
		System.out.println("load class " + s);
		p.putObject(key, "");
	    } else {
		System.out.println(e);
		p.putObject(key, "");
	    }
	    
	}
	
	
    }
    
}

String ObjectType() :
{
    String result = "";
}
{
    <IDENTIFIER>
	{
	    result = token.toString();
	}
    ( LOOKAHEAD(2) "." <IDENTIFIER>
      {
	  result = result + "." + token;
      })*

	{
	    return result;
	}
}
