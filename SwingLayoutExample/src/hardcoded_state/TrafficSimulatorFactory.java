package hardcoded_state;

import com.intrinsarc.backbone.runtime.api.*;

/** generated by Evolve */
public class TrafficSimulatorFactory
{
  private Attribute<String> text = new Attribute<String>("Go");
  private Attribute<String> text1 = new Attribute<String>("Stop");
  private Attribute<String> text2 = new Attribute<String>("Pause");
  private Attribute<String> text3 = new Attribute<String>("Turn off");
  private Attribute<String> name = new Attribute<String>("hello");

  private statetest.Row x = new statetest.Row();
  private statetest.Grid x1 = new statetest.Grid();
  private javax.swing.JButton x2 = new javax.swing.JButton();
  private javax.swing.JButton x3 = new javax.swing.JButton();
  private javax.swing.JButton x4 = new javax.swing.JButton();
  private javax.swing.JButton x5 = new javax.swing.JButton();
  private statetest.TrafficRunner x6 = new statetest.TrafficRunner();
  private statetest.Logger x7 = new statetest.Logger();
  private statetest.Row x8 = new statetest.Row();
  private statetest.Grid x9 = new statetest.Grid();
  private statetest.GoLogic x10 = new statetest.GoLogic();
  private statetest.PauseLogic x11 = new statetest.PauseLogic();
  private statetest.StopLogic x12 = new statetest.StopLogic();
  private statetest.TurnOffLogic x13 = new statetest.TurnOffLogic();
  private javax.swing.JPanel x14 = new javax.swing.JPanel();
  private statetest.DesignGridLayoutHandler x15 = new statetest.DesignGridLayoutHandler();
  private javax.swing.JPanel x16 = new javax.swing.JPanel();
  private statetest.SignalController x17 = new statetest.SignalController();
  private com.intrinsarc.backbone.runtime.implementation.Terminal x18 = new com.intrinsarc.backbone.runtime.implementation.Terminal();
  private com.intrinsarc.backbone.runtime.implementation.Terminal x19 = new com.intrinsarc.backbone.runtime.implementation.Terminal();
  private statetest.Red x20 = new statetest.Red();
  private statetest.OrangeStart x21 = new statetest.OrangeStart();
  private statetest.Green x22 = new statetest.Green();
  private statetest.OrangeStop x23 = new statetest.OrangeStop();
  private com.intrinsarc.backbone.runtime.implementation.StateDispatcher dispatcher = new com.intrinsarc.backbone.runtime.implementation.StateDispatcher();
  public com.intrinsarc.backbone.runtime.api.IRun getRun() { return x6.getRun_IRun(null); }

  public TrafficSimulatorFactory() {}

  public TrafficSimulatorFactory initialize(java.util.Map<String, Object> values)
  {
    x2.setText(text.get());
    x3.setText(text1.get());
    x4.setText(text2.get());
    x5.setText(text3.get());
    x17.setName(name);
    statetest.ILogger c = x7.getLog_ILogger(statetest.ILogger.class);
    statetest.ITrafficEvent c1 = x23.getEvents_ITrafficEvent(statetest.ITrafficEvent.class);
    statetest.ITrafficEvent c2 = x22.getEvents_ITrafficEvent(statetest.ITrafficEvent.class);
    statetest.ITrafficEvent c3 = x21.getEvents_ITrafficEvent(statetest.ITrafficEvent.class);
    statetest.ITrafficEvent c4 = x20.getEvents_ITrafficEvent(statetest.ITrafficEvent.class);
    com.intrinsarc.backbone.runtime.api.ITerminal c5 = x19.getTerminal_ITerminal(com.intrinsarc.backbone.runtime.api.ITerminal.class);
    com.intrinsarc.backbone.runtime.api.ITerminal c6 = x18.getTerminal_ITerminal(com.intrinsarc.backbone.runtime.api.ITerminal.class);
    com.intrinsarc.backbone.runtime.api.ITransition c7 = x19.getIn_ITransition(com.intrinsarc.backbone.runtime.api.ITransition.class);
    com.intrinsarc.backbone.runtime.api.ITransition c8 = x23.getIn_ITransition(com.intrinsarc.backbone.runtime.api.ITransition.class);
    com.intrinsarc.backbone.runtime.api.ITransition c9 = x20.getIn_ITransition(com.intrinsarc.backbone.runtime.api.ITransition.class);
    com.intrinsarc.backbone.runtime.api.ITransition c10 = x22.getIn_ITransition(com.intrinsarc.backbone.runtime.api.ITransition.class);
    com.intrinsarc.backbone.runtime.api.ITransition c11 = x21.getIn_ITransition(com.intrinsarc.backbone.runtime.api.ITransition.class);
    com.intrinsarc.backbone.runtime.api.ITransition c12 = x20.getIn_ITransition(com.intrinsarc.backbone.runtime.api.ITransition.class);
    statetest.ITrafficEvent c13 = (statetest.ITrafficEvent) dispatcher.getDEvents_IEvent(statetest.ITrafficEvent.class);
    statetest.ITrafficEvent c14 = (statetest.ITrafficEvent) dispatcher.getDEvents_IEvent(statetest.ITrafficEvent.class);
    statetest.ITrafficEvent c15 = (statetest.ITrafficEvent) dispatcher.getDEvents_IEvent(statetest.ITrafficEvent.class);
    statetest.ITrafficEvent c16 = (statetest.ITrafficEvent) dispatcher.getDEvents_IEvent(statetest.ITrafficEvent.class);
    statetest.ITrafficSignal c17 = x17.getSignal_ITrafficSignal(statetest.ITrafficSignal.class);
    statetest.ITrafficSignal c18 = x17.getSignal_ITrafficSignal(statetest.ITrafficSignal.class);
    statetest.ITrafficSignal c19 = x17.getSignal_ITrafficSignal(statetest.ITrafficSignal.class);
    statetest.ITrafficSignal c20 = x17.getSignal_ITrafficSignal(statetest.ITrafficSignal.class);
    com.intrinsarc.backbone.runtime.api.ITransition c21 = x18.getIn_ITransition(com.intrinsarc.backbone.runtime.api.ITransition.class);
    javax.swing.JPanel c22 = x16;
    javax.swing.JPanel c23 = x16;
    javax.swing.JPanel c24 = x14;
    javax.swing.JPanel c25 = x14;
    statetest.IRow c26 = x.getRow_IRow(statetest.IRow.class);
    statetest.IRow c27 = x8.getRow_IRow(statetest.IRow.class);
    java.awt.event.ActionListener c28 = x13.getListener_ActionListener(java.awt.event.ActionListener.class);
    java.awt.event.ActionListener c29 = x12.getListener_ActionListener(java.awt.event.ActionListener.class);
    java.awt.event.ActionListener c30 = x11.getListener_ActionListener(java.awt.event.ActionListener.class);
    java.awt.event.ActionListener c31 = x10.getListener_ActionListener(java.awt.event.ActionListener.class);
    javax.swing.JButton c32 = x2;
    javax.swing.JButton c33 = x4;
    javax.swing.JButton c34 = x3;
    javax.swing.JButton c35 = x5;
    statetest.IGrid c36 = x9.getGrid_IGrid(statetest.IGrid.class);
    statetest.IGrid c37 = x1.getGrid_IGrid(statetest.IGrid.class);
    x9.setContents_JComponent(c23, -1);
    x1.setContents_JComponent(c32, -1);
    x8.setGrids_IGrid(c36, -1);
    x.setGrids_IGrid(c37, -1);
    x1.setContents_JComponent(c33, -1);
    x1.setContents_JComponent(c34, -1);
    x1.setContents_JComponent(c35, -1);
    x15.setLogger_ILogger(c);
    dispatcher.setDDispatch_IEvent(c1, -1);
    dispatcher.setDDispatch_IEvent(c2, -1);
    dispatcher.setDDispatch_IEvent(c3, -1);
    dispatcher.setDDispatch_IEvent(c4, -1);
    dispatcher.setDEnd_ITerminal(c5, -1);
    dispatcher.setDStart_ITerminal(c6);
    x22.setTurnOff_ITransition(c7);
    x22.setOut_ITransition(c8);
    x23.setOut_ITransition(c9);
    x21.setOut_ITransition(c10);
    x20.setOut_ITransition(c11);
    x18.setOut_ITransition(c12);
    x13.setEvents_ITrafficEvent(c13);
    x12.setEvents_ITrafficEvent(c14);
    x11.setEvents_ITrafficEvent(c15);
    x10.setEvents_ITrafficEvent(c16);
    x23.setSignals_ITrafficSignal(c17);
    x22.setSignals_ITrafficSignal(c18);
    x21.setSignals_ITrafficSignal(c19);
    x20.setSignals_ITrafficSignal(c20);
    x17.setIn_ITransition(c21);
    x17.setPanel_JPanel(c22);
    x15.setLayout_Container(c24);
    x6.setPanel_JPanel(c25);
    x15.setRows_IRow(c26, -1);
    x15.setRows_IRow(c27, -1);
    x5.addActionListener(c28);
    x3.addActionListener(c29);
    x4.addActionListener(c30);
    x2.addActionListener(c31);
    x15.afterInit();
    x17.afterInit();
    return this;
  }
}
