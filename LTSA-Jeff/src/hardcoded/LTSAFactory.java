package hardcoded;

import com.hopstepjump.backbone.runtime.api.*;

/** generated by Evolve */
public class LTSAFactory
{
  private Attribute<String> currentDirectory = new Attribute<String>("");
  public void setCurrentDirectory(String currentDirectory) { this.currentDirectory.set(currentDirectory); }
  public String getCurrentDirectory() { return currentDirectory.get(); }
  private Attribute<lts.CompositeState> top = new Attribute<lts.CompositeState>(new lts.CompositeState(null));
  public void setTop(lts.CompositeState top) { this.top.set(top); }
  public lts.CompositeState getTop() { return top.get(); }
  private Attribute<String> name = new Attribute<String>("Parse!");
  private Attribute<String> icon = new Attribute<String>("icon/parse.gif");
  private Attribute<String> name1 = new Attribute<String>("Compile!");
  private Attribute<String> icon1 = new Attribute<String>("icon/compile.gif");








  private Attribute<String> title = new Attribute<String>("LTSA (using Backbone)");
  private Attribute<String> name2 = new Attribute<String>("Set big font!");
  private Attribute<Boolean> selected = new Attribute<Boolean>(false);
  private Attribute<String> name3 = new Attribute<String>("Minimise");
  private Attribute<String> icon2 = new Attribute<String>("icon/minimize.gif");
  private Attribute<String> name4 = new Attribute<String>("Compose!");
  private Attribute<String> icon3 = new Attribute<String>("icon/compose.gif");
  private Attribute<String> name5 = new Attribute<String>("Safety!");
  private Attribute<String> icon4 = new Attribute<String>("icon/safety.gif");
  private Attribute<String> icon5 = new Attribute<String>("icon/progress.gif");
  private Attribute<String> name6 = new Attribute<String>("Progress!");
  private Attribute<String> name7 = new Attribute<String>("Fair choice for LTL check!");
  private Attribute<Boolean> selected1 = new Attribute<Boolean>(true);
  private Attribute<String> icon6 = new Attribute<String>(null);
  private Attribute<String> name8 = new Attribute<String>("Supertrace!");
  private Attribute<String> icon7 = new Attribute<String>(null);
  private Attribute<String> name9 = new Attribute<String>("LTL property!");
  private Attribute<String> icon8 = new Attribute<String>(null);
  private Attribute<String> name10 = new Attribute<String>("Run DEFAULT!");
  private Attribute<String> name11 = new Attribute<String>("Autorun actions in animator!!");
  private Attribute<Boolean> selected2 = new Attribute<Boolean>(false);
  private Attribute<String> name12 = new Attribute<String>("Draw!");
  private Attribute<String> name13 = new Attribute<String>("Use V2.0 label format when drawing LTS!");
  private Attribute<Boolean> selected3 = new Attribute<Boolean>(true);
  private Attribute<String> name14 = new Attribute<String>("Display name when drawing LTS!");
  private Attribute<Boolean> selected4 = new Attribute<Boolean>(true);
  private Attribute<String> name15 = new Attribute<String>("Multiple LTS in Draw window!");
  private Attribute<Boolean> selected5 = new Attribute<Boolean>(false);
  private Attribute<String> name16 = new Attribute<String>("Alphabet!");
  private Attribute<String> name17 = new Attribute<String>("Transitions!");

  private ui.HPWindow x = new ui.HPWindow();
  private lts.EventManager x1 = new lts.EventManager();
  private extend.BooleanOption x2 = new extend.BooleanOption();
  private actions.NameList t = new actions.NameList();
  private actions.NameList check = new actions.NameList();
  private actions.NameList l = new actions.NameList();
  private actions.MinimiseAction x3 = new actions.MinimiseAction();
  private actions.ComposeAction x4 = new actions.ComposeAction();
  private checks.SafetyCheck x5 = new checks.SafetyCheck();
  private checks.ProgressCheck x6 = new checks.ProgressCheck();
  private extend.BooleanOption x7 = new extend.BooleanOption();
  private checks.SupertraceCheck x8 = new checks.SupertraceCheck();
  private checks.LivenessCheck x9 = new checks.LivenessCheck();
  private checks.ExecuteCheck x10 = new checks.ExecuteCheck();
  private extend.BooleanOption x11 = new extend.BooleanOption();
  private extend.WindowManager x12 = new extend.WindowManager();
  private extend.BooleanOption x13 = new extend.BooleanOption();
  private extend.BooleanOption x14 = new extend.BooleanOption();
  private extend.BooleanOption x15 = new extend.BooleanOption();
  private extend.WindowManager x16 = new extend.WindowManager();
  private extend.WindowManager x17 = new extend.WindowManager();
  private actions.ParseManager x18 = new actions.ParseManager();
  private actions.CompileManager x19 = new actions.CompileManager();
  private ICreate factory = new ICreate() {
    public Object create(java.util.Map<String, Object> values) {
      AnalyserFactoryFactory f = new AnalyserFactoryFactory();
      f.initialize(values);
      return f;
    }
    public void destroy(Object memento) {}
  };
  private ICreate factory1 = new ICreate() {
    public Object create(java.util.Map<String, Object> values) {
      AnimatorFactoryFactory f = new AnimatorFactoryFactory();
      f.initialize(values);
      return f;
    }
    public void destroy(Object memento) {}
  };
  private ICreate factory2 = new ICreate() {
    public Object create(java.util.Map<String, Object> values) {
      AnalyserFactoryFactory1 f = new AnalyserFactoryFactory1();
      f.initialize(values);
      return f;
    }
    public void destroy(Object memento) {}
  };
  private ICreate factory3 = new ICreate() {
    public Object create(java.util.Map<String, Object> values) {
      DrawWindowFactoryFactory f = new DrawWindowFactoryFactory();
      f.initialize(values);
      return f;
    }
    public void destroy(Object memento) {}
  };
  private ICreate factory4 = new ICreate() {
    public Object create(java.util.Map<String, Object> values) {
      AlphabetWindowFactoryFactory f = new AlphabetWindowFactoryFactory();
      f.initialize(values);
      return f;
    }
    public void destroy(Object memento) {}
  };
  private ICreate factory5 = new ICreate() {
    public Object create(java.util.Map<String, Object> values) {
      TransitionsWindowFactoryFactory f = new TransitionsWindowFactoryFactory();
      f.initialize(values);
      return f;
    }
    public void destroy(Object memento) {}
  };
  private ICreate factory6 = new ICreate() {
    public Object create(java.util.Map<String, Object> values) {
      CompilerFactoryFactory f = new CompilerFactoryFactory();
      f.initialize(values);
      return f;
    }
    public void destroy(Object memento) {}
  };
  private ICreate factory7 = new ICreate() {
    public Object create(java.util.Map<String, Object> values) {
      CompilerFactoryFactory1 f = new CompilerFactoryFactory1();
      f.initialize(values);
      return f;
    }
    public void destroy(Object memento) {}
  };
  public com.hopstepjump.backbone.runtime.api.IRun getRun() { return x.getRun_IRun(null); }

  public LTSAFactory() {}

  public LTSAFactory initialize(java.util.Map<String, Object> values)
  {
    if (values != null && values.containsKey("currentDirectory")) currentDirectory = new Attribute<String>((String) values.get("currentDirectory"));
    if (values != null && values.containsKey("top")) top = new Attribute<lts.CompositeState>((lts.CompositeState) values.get("top"));
    x.setTop(top);
    x.setCurrentDirectory(currentDirectory);
    x.setTitle(title);
    x2.setName(name2);
    x2.setSelected(selected);
    x3.setName(name3);
    x3.setIcon(icon2);
    x3.setTop(top);
    x4.setTop(top);
    x4.setName(name4);
    x4.setIcon(icon3);
    x5.setName(name5);
    x5.setTop(top);
    x5.setIcon(icon4);
    x6.setTop(top);
    x6.setIcon(icon5);
    x6.setName(name6);
    x7.setName(name7);
    x7.setSelected(selected1);
    x8.setIcon(icon6);
    x8.setTop(top);
    x8.setName(name8);
    x9.setIcon(icon7);
    x9.setTop(top);
    x9.setName(name9);
    x10.setTop(top);
    x10.setCurrentDirectory(currentDirectory);
    x10.setIcon(icon8);
    x10.setName(name10);
    x11.setName(name11);
    x11.setSelected(selected2);
    x12.setName(name12);
    x13.setName(name13);
    x13.setSelected(selected3);
    x14.setName(name14);
    x14.setSelected(selected4);
    x15.setName(name15);
    x15.setSelected(selected5);
    x16.setName(name16);
    x17.setName(name17);
    x18.setName(name);
    x18.setTop(top);
    x18.setIcon(icon);
    x19.setTop(top);
    x19.setName(name1);
    x19.setIcon(icon1);
    lts.IEventManager c = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.EventClient c1 = x10.getEventListener_EventClient(lts.EventClient.class);
    lts.IEventManager c2 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IEventManager c3 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IEventManager c4 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IEventManager c5 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IEventManager c6 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IEventManager c7 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IEventManager c8 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IEventManager c9 = x1.getEvents_IEventManager(lts.IEventManager.class);
    com.hopstepjump.backbone.runtime.api.ICreate c10 = factory7;
    com.hopstepjump.backbone.runtime.api.ICreate c11 = factory6;
    com.hopstepjump.backbone.runtime.api.ICreate c12 = factory5;
    com.hopstepjump.backbone.runtime.api.ICreate c13 = factory4;
    com.hopstepjump.backbone.runtime.api.ICreate c14 = factory3;
    com.hopstepjump.backbone.runtime.api.ICreate c15 = factory2;
    com.hopstepjump.backbone.runtime.api.ICreate c16 = factory1;
    com.hopstepjump.backbone.runtime.api.ICreate c17 = factory;
    actions.INameList c18 = t.getNames_INameList(actions.INameList.class);
    actions.IAction c19 = x18.getAction_IAction(actions.IAction.class);
    actions.ICoordinator c20 = x.getCoordinator_ICoordinator(actions.ICoordinator.class);
    actions.IAction c21 = x19.getAction_IAction(actions.IAction.class);
    actions.IAction c22 = x19.getAction_IAction(actions.IAction.class);
    actions.IAction c23 = x19.getAction_IAction(actions.IAction.class);
    actions.IAction c24 = x19.getAction_IAction(actions.IAction.class);
    actions.IAction c25 = x19.getAction_IAction(actions.IAction.class);
    actions.IAction c26 = x19.getAction_IAction(actions.IAction.class);
    actions.IAction c27 = x19.getAction_IAction(actions.IAction.class);
    actions.IAction c28 = x19.getAction_IAction(actions.IAction.class);
    actions.INameList c29 = l.getNames_INameList(actions.INameList.class);
    actions.INameList c30 = check.getNames_INameList(actions.INameList.class);
    actions.INameList c31 = t.getNames_INameList(actions.INameList.class);
    actions.ICoordinator c32 = x.getCoordinator_ICoordinator(actions.ICoordinator.class);
    actions.IAction c33 = x18.getAction_IAction(actions.IAction.class);
    actions.IAction c34 = x18.getAction_IAction(actions.IAction.class);
    ui.IWindow c35 = x17.getProxy_IWindow(ui.IWindow.class);
    ui.IWindow c36 = x16.getProxy_IWindow(ui.IWindow.class);
    javax.swing.JCheckBoxMenuItem c37 = x15.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c38 = x.getBigFont_ActionListener(java.awt.event.ActionListener.class);
    javax.swing.JCheckBoxMenuItem c39 = x14.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c40 = x.getBigFont_ActionListener(java.awt.event.ActionListener.class);
    javax.swing.JCheckBoxMenuItem c41 = x13.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c42 = x.getBigFont_ActionListener(java.awt.event.ActionListener.class);
    ui.IWindow c43 = x12.getProxy_IWindow(ui.IWindow.class);
    actions.ICoordinator c44 = x.getCoordinator_ICoordinator(actions.ICoordinator.class);
    java.awt.event.ActionListener c45 = x.getOptions_ActionListener(java.awt.event.ActionListener.class, -1);
    javax.swing.JCheckBoxMenuItem c46 = x11.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c47 = x10.getAutorunOption_ActionListener(java.awt.event.ActionListener.class);
    javax.swing.JCheckBoxMenuItem c48 = x11.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    actions.IAction c49 = x10.getAction_IAction(actions.IAction.class);
    lts.LTSOutput c50 = x.getInout_LTSOutput(lts.LTSOutput.class);
    lts.LTSInput c51 = x.getInout_LTSInput(lts.LTSInput.class);
    actions.INameList c52 = l.getNames_INameList(actions.INameList.class);
    actions.ICoordinator c53 = x.getCoordinator_ICoordinator(actions.ICoordinator.class);
    lts.LTSOutput c54 = x.getInout_LTSOutput(lts.LTSOutput.class);
    lts.LTSInput c55 = x.getInout_LTSInput(lts.LTSInput.class);
    actions.IAction c56 = x9.getAction_IAction(actions.IAction.class);
    actions.ICoordinator c57 = x.getCoordinator_ICoordinator(actions.ICoordinator.class);
    lts.LTSOutput c58 = x.getInout_LTSOutput(lts.LTSOutput.class);
    lts.LTSInput c59 = x.getInout_LTSInput(lts.LTSInput.class);
    actions.IAction c60 = x8.getAction_IAction(actions.IAction.class);
    java.awt.event.ActionListener c61 = x.getOptions_ActionListener(java.awt.event.ActionListener.class, -1);
    javax.swing.JCheckBoxMenuItem c62 = x7.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c63 = x6.getFairOption_ActionListener(java.awt.event.ActionListener.class);
    javax.swing.JCheckBoxMenuItem c64 = x7.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    lts.LTSOutput c65 = x.getInout_LTSOutput(lts.LTSOutput.class);
    lts.LTSInput c66 = x.getInout_LTSInput(lts.LTSInput.class);
    actions.ICoordinator c67 = x.getCoordinator_ICoordinator(actions.ICoordinator.class);
    actions.IAction c68 = x6.getAction_IAction(actions.IAction.class);
    actions.ICoordinator c69 = x.getCoordinator_ICoordinator(actions.ICoordinator.class);
    lts.LTSOutput c70 = x.getInout_LTSOutput(lts.LTSOutput.class);
    lts.LTSInput c71 = x.getInout_LTSInput(lts.LTSInput.class);
    actions.IAction c72 = x5.getAction_IAction(actions.IAction.class);
    actions.ICoordinator c73 = x.getCoordinator_ICoordinator(actions.ICoordinator.class);
    lts.LTSOutput c74 = x.getInout_LTSOutput(lts.LTSOutput.class);
    lts.LTSInput c75 = x.getInout_LTSInput(lts.LTSInput.class);
    actions.IAction c76 = x4.getAction_IAction(actions.IAction.class);
    actions.ICoordinator c77 = x.getCoordinator_ICoordinator(actions.ICoordinator.class);
    lts.LTSOutput c78 = x.getInout_LTSOutput(lts.LTSOutput.class);
    lts.LTSInput c79 = x.getInout_LTSInput(lts.LTSInput.class);
    actions.IAction c80 = x3.getAction_IAction(actions.IAction.class);
    actions.INameListener c81 = x.getTarget_INameListener(actions.INameListener.class);
    actions.INameList c82 = t.getListeners_INameList(actions.INameList.class, -1);
    javax.swing.JCheckBoxMenuItem c83 = x2.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c84 = x.getBigFont_ActionListener(java.awt.event.ActionListener.class);
    x.setActions_IAction(c34, -1);
    x.setWindow_IWindow(c36, -1);
    x.setChecks_IAction(c72, -1);
    x.setActions_IAction(c28, -1);
    x.setWindow_IWindow(c43, -1);
    x.setChecks_IAction(c68, -1);
    x.setWindow_IWindow(c35, -1);
    x.setChecks_IAction(c60, -1);
    x.setActions_IAction(c80, -1);
    x.setChecks_IAction(c56, -1);
    x.setActions_IAction(c76, -1);
    x.setChecks_IAction(c49, -1);
    x19.setEvents_IEventManager(c);
    x1.setClients_EventClient(c1, -1);
    x10.setEvents_IEventManager(c2);
    x9.setEvents_IEventManager(c3);
    x8.setEvents_IEventManager(c4);
    x6.setEvents_IEventManager(c5);
    x5.setEvents_IEventManager(c6);
    x4.setEvents_IEventManager(c7);
    x3.setEvents_IEventManager(c8);
    x.setEvents_IEventManager(c9);
    x19.setCreateCompiler_ICreate(c10);
    x18.setCompilerCreator_ICreate(c11);
    x17.setCreate_ICreate(c12);
    x16.setCreate_ICreate(c13);
    x12.setCreate_ICreate(c14);
    x5.setAnalyserCreator_ICreate(c15);
    x10.setAnimatorCreator_ICreate(c16);
    x8.setAnalyserCreator_ICreate(c17);
    x19.setTarget_INameList(c18);
    x19.setParser_IAction(c19);
    x19.setCoordinator_ICoordinator(c20);
    x10.setCompiler_IAction(c21);
    x9.setCompiler_IAction(c22);
    x8.setCompiler_IAction(c23);
    x6.setCompiler_IAction(c24);
    x5.setCompiler_IAction(c25);
    x4.setCompiler_IAction(c26);
    x3.setCompiler_IAction(c27);
    x18.setLiveness_INameList(c29);
    x18.setCheck_INameList(c30);
    x18.setTarget_INameList(c31);
    x18.setCoordinator_ICoordinator(c32);
    x.setParser_IAction(c33);
    x15.setOptions_ActionListener(c38, -1);
    x.setBigFont_JCheckBoxMenuItem(c37);
    x14.setOptions_ActionListener(c40, -1);
    x.setBigFont_JCheckBoxMenuItem(c39);
    x13.setOptions_ActionListener(c42, -1);
    x.setBigFont_JCheckBoxMenuItem(c41);
    x10.setCoordinator_ICoordinator(c44);
    x.setOptions_JCheckBoxMenuItem(c46, -1);
    x11.setOptions_ActionListener(c45, -1);
    x10.setAutorunOption_JCheckBoxMenuItem(c48);
    x11.setOptions_ActionListener(c47, -1);
    x10.setInout_LTSInput(c51);
    x10.setInout_LTSOutput(c50);
    x9.setAssert__INameList(c52);
    x9.setCoordinator_ICoordinator(c53);
    x9.setInout_LTSInput(c55);
    x9.setInout_LTSOutput(c54);
    x8.setCoordinator_ICoordinator(c57);
    x8.setInout_LTSInput(c59);
    x8.setInout_LTSOutput(c58);
    x.setOptions_JCheckBoxMenuItem(c62, -1);
    x7.setOptions_ActionListener(c61, -1);
    x6.setFairOption_JCheckBoxMenuItem(c64);
    x7.setOptions_ActionListener(c63, -1);
    x6.setInout_LTSInput(c66);
    x6.setInout_LTSOutput(c65);
    x6.setCoordinator_ICoordinator(c67);
    x5.setCoordinator_ICoordinator(c69);
    x5.setInout_LTSInput(c71);
    x5.setInout_LTSOutput(c70);
    x4.setCoordinator_ICoordinator(c73);
    x4.setInout_LTSInput(c75);
    x4.setInout_LTSOutput(c74);
    x3.setCoordinator_ICoordinator(c77);
    x3.setInout_LTSInput(c79);
    x3.setInout_LTSOutput(c78);
    x.setTarget_INameList(c82);
    t.setListeners_INameListener(c81, -1);
    x2.setOptions_ActionListener(c84, -1);
    x.setBigFont_JCheckBoxMenuItem(c83);
    x2.afterInit();
    x7.afterInit();
    x11.afterInit();
    x13.afterInit();
    x14.afterInit();
    x15.afterInit();
    return this;
  }
class AnalyserFactoryFactory
{

  private lts.Analyser x89 = new lts.Analyser();

  public AnalyserFactoryFactory() {}

  public AnalyserFactoryFactory initialize(java.util.Map<String, Object> values)
  {
    lts.IEventManager c85 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IAnalyser c86 = x89.getAnalyser_IAnalyser(lts.IAnalyser.class);
    x89.setEvents_IEventManager(c85);
    x8.setAnalyser_IAnalyser(c86);
    return this;
  }
}
class AnimatorFactoryFactory
{

  private ui.AnimWindow x92 = new ui.AnimWindow();
  private lts.Analyser x93 = new lts.Analyser();

  public AnimatorFactoryFactory() {}

  public AnimatorFactoryFactory initialize(java.util.Map<String, Object> values)
  {
    lts.IEventManager c87 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IAnalyser c88 = x93.getAnalyser_IAnalyser(lts.IAnalyser.class);
    lts.IAnalyser c89 = x93.getAnalyser_IAnalyser(lts.IAnalyser.class);
    ui.IAnimWindow c90 = x92.getMain_IAnimWindow(ui.IAnimWindow.class);
    x93.setEvents_IEventManager(c87);
    x92.setAnimator_IAnalyser(c88);
    x10.setAnalyser_IAnalyser(c89);
    x10.setAnimator_IAnimWindow(c90);
    x92.afterInit();
    return this;
  }
}
class AnalyserFactoryFactory1
{

  private lts.Analyser x98 = new lts.Analyser();

  public AnalyserFactoryFactory1() {}

  public AnalyserFactoryFactory1 initialize(java.util.Map<String, Object> values)
  {
    lts.IEventManager c91 = x1.getEvents_IEventManager(lts.IEventManager.class);
    lts.IAnalyser c92 = x98.getAnalyser_IAnalyser(lts.IAnalyser.class);
    x98.setEvents_IEventManager(c91);
    x5.setAnalyser_IAnalyser(c92);
    return this;
  }
}
class DrawWindowFactoryFactory
{

  private draw.LTSDrawWindow x101 = new draw.LTSDrawWindow();

  public DrawWindowFactoryFactory() {}

  public DrawWindowFactoryFactory initialize(java.util.Map<String, Object> values)
  {
    lts.EventClient c93 = x101.getEvents_EventClient(lts.EventClient.class);
    java.awt.event.ActionListener c94 = x101.getDisplayName_ActionListener(java.awt.event.ActionListener.class);
    javax.swing.JCheckBoxMenuItem c95 = x14.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c96 = x101.getMultipleLTS_ActionListener(java.awt.event.ActionListener.class);
    javax.swing.JCheckBoxMenuItem c97 = x15.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c98 = x101.getV2Labels_ActionListener(java.awt.event.ActionListener.class);
    javax.swing.JCheckBoxMenuItem c99 = x13.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c100 = x101.getBigFont_ActionListener(java.awt.event.ActionListener.class);
    javax.swing.JCheckBoxMenuItem c101 = x2.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    ui.IWindow c102 = x101.getWindow_IWindow(ui.IWindow.class);
    x1.setClients_EventClient(c93, -1);
    x101.setDisplayName_JCheckBoxMenuItem(c95);
    x14.setOptions_ActionListener(c94, -1);
    x101.setMultipleLTS_JCheckBoxMenuItem(c97);
    x15.setOptions_ActionListener(c96, -1);
    x101.setV2Labels_JCheckBoxMenuItem(c99);
    x13.setOptions_ActionListener(c98, -1);
    x101.setBigFont_JCheckBoxMenuItem(c101);
    x2.setOptions_ActionListener(c100, -1);
    x12.setWindow_IWindow(c102);
    return this;
  }
}
class AlphabetWindowFactoryFactory
{

  private alpha.AlphabetWindow x108 = new alpha.AlphabetWindow();

  public AlphabetWindowFactoryFactory() {}

  public AlphabetWindowFactoryFactory initialize(java.util.Map<String, Object> values)
  {
    lts.EventClient c103 = x108.getEvents_EventClient(lts.EventClient.class);
    javax.swing.JCheckBoxMenuItem c104 = x2.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c105 = x108.getBigFont_ActionListener(java.awt.event.ActionListener.class);
    ui.IWindow c106 = x108.getWindow_IWindow(ui.IWindow.class);
    x1.setClients_EventClient(c103, -1);
    x2.setOptions_ActionListener(c105, -1);
    x108.setBigFont_JCheckBoxMenuItem(c104);
    x16.setWindow_IWindow(c106);
    return this;
  }
}
class TransitionsWindowFactoryFactory
{
  private Attribute<String> extension = new Attribute<String>(".aut");
  public void setExtension(String extension) { this.extension.set(extension); }
  public String getExtension() { return extension.get(); }

  private transitions.TransitionsWindow x112 = new transitions.TransitionsWindow();

  public TransitionsWindowFactoryFactory() {}

  public TransitionsWindowFactoryFactory initialize(java.util.Map<String, Object> values)
  {
    if (values != null && values.containsKey("extension")) extension = new Attribute<String>((String) values.get("extension"));
    x112.setExtension(extension);
    lts.EventClient c107 = x112.getEvents_EventClient(lts.EventClient.class);
    javax.swing.JCheckBoxMenuItem c108 = x2.getOptions_JCheckBoxMenuItem(javax.swing.JCheckBoxMenuItem.class, -1);
    java.awt.event.ActionListener c109 = x112.getBigFont_ActionListener(java.awt.event.ActionListener.class);
    ui.IWindow c110 = x112.getWindow_IWindow(ui.IWindow.class);
    x1.setClients_EventClient(c107, -1);
    x2.setOptions_ActionListener(c109, -1);
    x112.setBigFont_JCheckBoxMenuItem(c108);
    x17.setWindow_IWindow(c110);
    return this;
  }
}
class CompilerFactoryFactory
{
  private Attribute<String> currentDirectory1;

  private lts.LTSCompiler x116 = new lts.LTSCompiler();

  public CompilerFactoryFactory() {}

  public CompilerFactoryFactory initialize(java.util.Map<String, Object> values)
  {
    if (values != null && values.containsKey("currentDirectory")) currentDirectory1 = new Attribute<String>((String) values.get("currentDirectory"));
    x116.setCurrentDirectory(currentDirectory1);
    lts.LTSCompiler c111 = x116.getMain_LTSCompiler(lts.LTSCompiler.class);
    lts.LTSOutput c112 = x.getInout_LTSOutput(lts.LTSOutput.class);
    lts.LTSInput c113 = x.getInout_LTSInput(lts.LTSInput.class);
    x18.setCompiler_LTSCompiler(c111);
    x116.setInout_LTSInput(c113);
    x116.setInout_LTSOutput(c112);
    x116.afterInit();
    return this;
  }
}
class CompilerFactoryFactory1
{
  private Attribute<String> currentDirectory2;

  private lts.LTSCompiler x119 = new lts.LTSCompiler();

  public CompilerFactoryFactory1() {}

  public CompilerFactoryFactory1 initialize(java.util.Map<String, Object> values)
  {
    if (values != null && values.containsKey("currentDirectory")) currentDirectory2 = new Attribute<String>((String) values.get("currentDirectory"));
    x119.setCurrentDirectory(currentDirectory2);
    lts.LTSCompiler c114 = x119.getMain_LTSCompiler(lts.LTSCompiler.class);
    lts.LTSOutput c115 = x.getInout_LTSOutput(lts.LTSOutput.class);
    lts.LTSInput c116 = x.getInout_LTSInput(lts.LTSInput.class);
    x19.setCompiler_LTSCompiler(c114);
    x119.setInout_LTSInput(c116);
    x119.setInout_LTSOutput(c115);
    x119.afterInit();
    return this;
  }
}
}
