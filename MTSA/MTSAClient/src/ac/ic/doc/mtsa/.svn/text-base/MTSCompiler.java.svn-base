package ac.ic.doc.mtsa;

import java.io.File;
import java.io.IOException;

import lts.CompositeState;
import lts.LTSCompiler;
import lts.LTSInput;
import lts.LTSInputString;
import lts.LTSOutput;
import ui.FileInput;
import ui.StandardOutput;
import ac.ic.doc.mtstools.model.MTS;
import ac.ic.doc.mtstools.util.fsp.AutomataToMTSConverter;
import dispatcher.TransitionSystemDispatcher;

public class MTSCompiler {
	
	private static MTSCompiler instance = new MTSCompiler();
	public static MTSCompiler getInstance() { return instance; }
	private MTSCompiler() {}


	public MTS<Long, String> compileMTS(String inputString, String modelName) throws Exception {
		CompositeState compositeState = compileCompositeState(inputString, modelName);
		return AutomataToMTSConverter.getInstance().convert(compositeState.getComposition());
	}
	
	public CompositeState compileCompositeState(String modelName, File inputFile) throws IOException {
		LTSInput input = new FileInput(inputFile);
		
		return compileComposite(modelName, input);
	}
	
	public CompositeState compileCompositeState(String inputString, String modelName) throws IOException {
		return compileComposite(modelName, new LTSInputString(inputString));
	}

	private CompositeState compileComposite(String modelName, LTSInput input)
			throws IOException {
		LTSOutput output = new StandardOutput(); 
		String currentDirectory = (new File(".")).getCanonicalPath();
		LTSCompiler compiler = new LTSCompiler( input , output , currentDirectory );
		lts.SymbolTable.init();
		CompositeState c = compiler.compile(modelName);
		TransitionSystemDispatcher.applyComposition(c, output);
		return c;
	}
}
