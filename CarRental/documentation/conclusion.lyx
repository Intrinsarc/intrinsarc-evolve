#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{wrapfig}
\usepackage{graphicx}
\usepackage{color}

\definecolor{side}{rgb}{0.9,0.9,0.99}
\definecolor{outside}{rgb}{0.6,0.6,0.6}

\newcommand{\sidebar}[3]
{
  \begin{wrapfigure}{O}{#1\textwidth}
  \fcolorbox{outside}{side}{
    \begin{minipage}[t]{#1\columnwidth}
    \includegraphics[scale=0.07]{#2}
    #3
    \end{minipage}}
  \end{wrapfigure}
}
\newcommand{\idea}[2][0.5]
{
  \sidebar{#1}{./icons/tip}{#2}
}

\newcommand{\warning}[2][0.5]
{
  \sidebar{#1}{./icons/warn}{#2}
}

\newcommand{\highlight}[2][0.5]
{
  \sidebar{#1}{./icons/highlight}{#2}
}

\newcommand{\fsidebar}[3]
{
  \fcolorbox{outside}{side}{
    \begin{minipage}[t]{#1\columnwidth}
    \includegraphics[scale=0.07]{#2}
    #3
    \end{minipage}}
}
\newcommand{\fidea}[2][1.0]
{
  \fsidebar{#1}{./icons/tip}{#2}
}

\newcommand{\fwarning}[2][1.0]
{
  \fsidebar{#1}{./icons/warn}{#2}
}

\newcommand{\fhighlight}[2][1.0]
{
  \fsidebar{#1}{./icons/highlight}{#2}
}

\newcommand{\menu}[1]
{
  \fcolorbox{outside}{side}{#1}
}

\usepackage{chngcntr}
\counterwithout{figure}{section}
\renewcommand{\thefigure}{\thechapter.\arabic{figure}}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language english
\inputencoding auto
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family sfdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement h
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Product Roadmap and Further Reading
\end_layout

\begin_layout Standard
In this brief chapter, we outline the Evolve roadmap we are planning for
 the next year or so.
 We also present further reading for curious developers who want to know
 more about the background of hierarchical components and how they relate
 to dependency injection and other approaches.
\end_layout

\begin_layout Section
The Evolve Roadmap
\end_layout

\begin_layout Subsection
Team System
\end_layout

\begin_layout Standard
The team version of Evolve is currently under development.
 This allows multiple developers to collaborate on a single model, avoiding
 the overhead of exporting and importing stratum.
\end_layout

\begin_layout Subsection
Support for Other Implementation Languages
\end_layout

\begin_layout Standard
We plan to support C# fully.
 We are also looking into the feasibility of providing C++ support.
\end_layout

\begin_layout Subsection
Concurrency Constructs
\end_layout

\begin_layout Standard
Concurrency in hierarchical component models has a long and distinguished
 academic research history.
\end_layout

\begin_layout Standard
A set of constructs will be added to Evolve and Backbone, allowing concurrency
 to be described and controlled by properties in the component design.
 Orthogonal/concurrent states will also be supported.
 
\end_layout

\begin_layout Subsection
Web Publishing System
\end_layout

\begin_layout Standard
A full web publishing system is being developed for Evolve to allow a model
 to be dynamically available via a HTTP server.
 This will be available sometime early 2011, and will build on the team
 system.
\end_layout

\begin_layout Subsection
Protocol Analysis
\end_layout

\begin_layout Standard
Work has started on adding protocol and behavioral analysis to Evolve.
 A method-level sequence diagram (with UML2 operators) can be constructed
 for each port of a leaf, and high level goals can be defined.
 The analyzer can then determine if the goals can be achieved using the
 existing protocols.
 The protocols of any composite component port are determined automatically.
\end_layout

\begin_layout Standard
This is useful because it allows you to see how your system will respond
 to certain situations.
 You can verify its behaviour by constructing inputs and looking at the
 output sequence diagrams.
\end_layout

\begin_layout Subsection
Internet Distribution System and Licensing Manager
\end_layout

\begin_layout Standard
Although Evolve has many features which allow it to operate as an effective
 plugin system, it currently provides no convenient way to distribute strata
 and associated jars to end users.
 An internet-based distribution system will be added, along with a license
 manager to control enabling of various features.
 This will tie into the feature modeling facility already in Evolve.
\end_layout

\begin_layout Section
Further Reading
\end_layout

\begin_layout Standard
For the interested reader, I would like to recommend the following books
 and articles.
\end_layout

\begin_layout Quote

\emph on
Software Architectures for Product Families
\emph default

\begin_inset Newline newline
\end_inset

Mehdi Jazayeri, Alexander Ran, Frank van der Linden
\end_layout

\begin_layout Standard
This book was published in 2000 and was how I first found out about Darwin
 and Koala.
 The Darwin article by Jeff Magee and Jeff Kramer is excellent and very
 clear.
\end_layout

\begin_layout Quote

\emph on
The Rich Engineering Heritage Behind Dependency Injection
\emph default

\begin_inset Newline newline
\end_inset

Andrew McVeigh
\begin_inset Newline newline
\end_inset

http://www.javalobby.org/articles/di-heritage/
\end_layout

\begin_layout Standard
In this online article, I look at how component systems offer a richer form
 of dependency injection.
\end_layout

\begin_layout Quote

\emph on
Real-Time Object-Oriented Modeling
\emph default

\begin_inset Newline newline
\end_inset

Bran Selic, Garth Gullekson, Paul T.
 Ward
\end_layout

\begin_layout Standard
This book describes the approach behind the amazing ObjecTime system, which
 eventually became RationalRose Realtime.
 It was literally 15 years ahead of its time.
 This was the first system to offer structural inheritance, and the effects
 of the concepts introduced are still being felt today.
 Concurrency via actors was fully supported.
 Bran was one of the leads on the UML2 specification and many of the component
 and state machine concepts introduced into UML came from here.
\end_layout

\begin_layout Quote

\emph on
Aspect-Oriented Programming with the e Verification Language
\emph default

\begin_inset Newline newline
\end_inset

David Robinson
\end_layout

\begin_layout Standard
This book looks at the e language, which has a similar evolution construct
 to Evolve, but working at a method rather than structural level.
 It looks at how this construct makes AOP-like crosscutting possible.
\end_layout

\begin_layout Quote

\emph on
Aspect-Oriented Programming is Quantification and Obliviousness
\emph default

\begin_inset Newline newline
\end_inset

Robert E.
 Filman , Daniel P.
 Friedman
\begin_inset Newline newline
\end_inset

http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.28.287
\end_layout

\begin_layout Standard
This paper describes what makes up AOP, and gives insight into why it seems
 inordinately focused on simple and non-domain-based cross-cutting concerns
 such as logging and tracing.
\end_layout

\begin_layout Quote

\emph on
Design Principles and Design Patterns
\emph default

\begin_inset Newline newline
\end_inset

Robert 
\begin_inset Quotes eld
\end_inset

Uncle Bob
\begin_inset Quotes erd
\end_inset

 Martin
\begin_inset Newline newline
\end_inset

http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf
\end_layout

\begin_layout Standard
Where would we be without Uncle Bob to tell us how to structure our object-orien
ted systems all those years ago? Timeless principles that still apply.
\end_layout

\end_body
\end_document
