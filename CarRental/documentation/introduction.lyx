#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{wrapfig}
\usepackage{graphicx}
\usepackage{color}

\definecolor{side}{rgb}{0.9,0.9,0.99}
\definecolor{outside}{rgb}{0.6,0.6,0.6}

\newcommand{\sidebar}[3]
{
  \begin{wrapfigure}{O}{#1\textwidth}
  \fcolorbox{outside}{side}{
    \begin{minipage}[t]{#1\columnwidth}
    \includegraphics[scale=0.07]{#2}
    #3
    \end{minipage}}
  \end{wrapfigure}
}
\newcommand{\idea}[2][0.5]
{
  \sidebar{#1}{./icons/tip}{#2}
}

\newcommand{\warning}[2][0.5]
{
  \sidebar{#1}{./icons/warn}{#2}
}

\newcommand{\highlight}[2][0.5]
{
  \sidebar{#1}{./icons/highlight}{#2}
}

\newcommand{\fsidebar}[3]
{
  \fcolorbox{outside}{side}{
    \begin{minipage}[t]{#1\columnwidth}
    \includegraphics[scale=0.07]{#2}
    #3
    \end{minipage}}
}
\newcommand{\fidea}[2][1.0]
{
  \fsidebar{#1}{./icons/tip}{#2}
}

\newcommand{\fwarning}[2][1.0]
{
  \fsidebar{#1}{./icons/warn}{#2}
}

\newcommand{\fhighlight}[2][1.0]
{
  \fsidebar{#1}{./icons/highlight}{#2}
}

\newcommand{\menu}[1]
{
  \fcolorbox{outside}{side}{#1}
}

\usepackage{chngcntr}
\counterwithout{figure}{section}
\renewcommand{\thefigure}{\thechapter.\arabic{figure}}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language english
\inputencoding auto
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family sfdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement h
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
What is Evolve?
\end_layout

\begin_layout Quote

\emph on
In essence, Evolve is a convenient and powerful way to connect together
 classes to create a program.
 It also features innovative reuse and evolution facilities, allowing you
 to quickly customize an application for new requirements, without destroying
 the old version.
\end_layout

\begin_layout Standard
Several years ago as the technical lead for a large Java enterprise application,
 I started wondering about components.
 The system we constructed had a number of natural abstractions which could
 have been loosely termed components but we struggled to separate these
 out from each other or find their true essence.
 After thinking deeply about this, I 
\begin_inset Quotes eld
\end_inset

invented
\begin_inset Quotes erd
\end_inset

 a theory of hierarchical components which would allow me to break a system
 down neatly into connected components.
 Or at least I thought I invented this approach...
\end_layout

\begin_layout Standard
Of course I didn't really invent it at all - I rediscovered it.
 It turned out that hierarchical components had been discovered over 10
 years before
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
By Professors Jeff Magee and Jeff Kramer from Imperial College, London.
 That system was called Darwin.
\end_layout

\end_inset

.
 That work was a large part of the inspiration for Microsoft's COM and Philips
 also used an embedded version for the software in some of their television
 sets.
\end_layout

\begin_layout Standard
Evolve is a fusion of a UML2 CASE tool with this powerful, hierarchical
 component technology.
 It allows you to connect up classes like an electronics designer wires
 up chips.
 Components are created in Evolve, using UML2 composite structure diagrams,
 which can then executed.
 At all times, the link between the graphical view and the code is kept
 intact.
 Components at the lowest level are simply plain classes, in keeping with
 JavaBeans
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Although JavaBeans is often used to refer to Swing/AWT widgets, we use the
 term to represent a simple class with getters and setters.
\end_layout

\end_inset

 conventions, allowing you to take advantage of your existing libraries
 and create new ones easily.
\end_layout

\begin_layout Standard
The takeaway from the above is that Evolve allows you to define systems
 where the architecture and implementation are always kept synchronized.
 This provides all of the advantages of dependency injection approaches,
 with far more power and none of the disadvantages.
 The applications created are naturally extensible, and can be adapted quickly
 for new features.
 Reassuringly, this is all backed by a formal specification and sits on
 the bedrock of over 20 years of advanced research into components.
\end_layout

\begin_layout Subsection
Highlights of Evolve
\end_layout

\begin_layout Standard
Some of Evolve's key features are listed below.
\end_layout

\begin_layout Itemize
Components are defined using standard UML2 diagrams.
\end_layout

\begin_layout Itemize
JavaBeans can be treated as full components.
\end_layout

\begin_layout Itemize
Java code can be generated for new JavaBeans, and existing JavaBeans can
 be quickly imported.
\end_layout

\begin_layout Itemize
Extensive facilities are provided for the reuse and evolution of components,
 giving the benefits of dependency injection, aspects and much more.
\end_layout

\begin_layout Itemize
State machines are fully supported, along with their reuse and evolution.
\end_layout

\begin_layout Itemize
A single model can hold and execute many variants of a system.
\end_layout

\begin_layout Itemize
Full error checking guarantees all components will connect correctly at
 runtime.
\end_layout

\begin_layout Itemize
Full support for renaming and restructuring parts of the model.
\end_layout

\begin_layout Itemize
Sections of a model can be exported and imported for collaborative development.
\end_layout

\begin_layout Itemize
Component programs can be executed.
 Two runtime options are available:
\end_layout

\begin_deeper
\begin_layout Enumerate
The Backbone runtime engine can be used.
 This is <350kb, including a full parser.
 It is fully open-source and has very little performance overhead.
\end_layout

\begin_layout Enumerate
A simple Java program can be created directly from the model, removing any
 runtime overhead.
 In this mode, a library of 15kb is used, consisting mainly of interfaces.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
A Quick Peek Inside Evolve
\end_layout

\begin_layout Standard
The diagram below shows the internal makeup of Evolve.
 The aim of showing this is to give you some insight into the inner workings
 of the approach.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/anatomy.png
	width 45col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
The anatomy of Evolve
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
These parts are explained below, starting from the lower layers and working
 up.
\end_layout

\begin_layout Subsubsection
A hierarchical component model with full connectors
\end_layout

\begin_layout Standard
At the heart of Evolve is a hierarchical component model with full connectors.
 Connectors act like wires between components, making it simple and intuitive
 to express detailed structures that are difficult or impossible in other
 approaches such as dependency injection.
\end_layout

\begin_layout Subsubsection
Resemblance and evolution
\end_layout

\begin_layout Standard
These two constructs provide unprecedented levels of support for component
 reuse.
 Resemblance is a form of component inheritance.
 Evolution builds on this to allow the structure of an existing system to
 be remodeled, without destroying the original definition.
 These facilities can be used to create variants of a system, or to switch
 in test components.
\end_layout

\begin_layout Subsubsection
The Backbone interpreter
\end_layout

\begin_layout Standard
This executes the programs created in Evolve.
\end_layout

\begin_layout Standard
Backbone is a simple textual domain-specific language that allows plain-vanilla
 JavaBeans to act as full components, and to be wired up according to the
 component model.
 The interpreter reads in the text files, and uses the instructions to instantia
te and connect up the beans.
\end_layout

\begin_layout Standard
JavaBeans have a representation in Backbone and also in Java code.
 Composite components, formed by wiring together JavaBean instances, only
 have a Backbone representation however.
\end_layout

\begin_layout Standard
This level is analogous to the Spring XML bean configuration, but more powerful.
 Backbone is fully open source.
\end_layout

\begin_layout Subsubsection
UML2 wiring editor
\end_layout

\begin_layout Standard
On top of this, Evolve provides a graphical editor for connecting up and
 evolving components.
 Industry standard UML2 component diagrams and state charts are used.
\end_layout

\begin_layout Subsubsection
JavaBean code generator
\end_layout

\begin_layout Standard
Optionally, Evolve can help you define and generate setter / getter code
 for JavaBeans.
 Evolve also makes it easy to import and wire together existing beans.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
What is a Component?
\end_layout

\begin_layout Quote

\emph on
A component is a unit of software that can be instantiated, and uses interfaces
 to describe which services it provides and requires.
\end_layout

\begin_layout Standard
In other words, a component is separated from its environment by interfaces.
 A component instance can then be connected up to other instances which
 offer compatible interfaces.
 It really is that simple!
\end_layout

\begin_layout Subsection
A Leaf Component
\end_layout

\begin_layout Standard
With a bit of effort, we can make a Java class fit into this definition.
 A class can certainly be instantiated, and we can use conventions for provided
 and required interfaces.
 We call this a leaf component - it cannot be further broken down into smaller
 parts.
\end_layout

\begin_layout Standard
Look at the component in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-spellchecker-component"

\end_inset

, which uses UML2 component notation, and consider how we might map this
 onto Java code.
 It is a component for performing a spellcheck of a document.
 It provides the 
\family typewriter
ISpellCheck
\family default
 interface through the 
\family typewriter
check
\family default
 port, and requires the 
\family typewriter
IDocument
\family default
 interface through the 
\family typewriter
document
\family default
 port.
 It also provides the 
\family typewriter
ISuggest
\family default
 interface via the same port.
\end_layout

\begin_layout Standard
In other words, if you call the 
\family typewriter
check()
\family default
 method on the 
\family typewriter
ISpellCheck
\family default
 interface, it will extract the document by calling the 
\family typewriter
retrieveText()
\family default
 method on 
\family typewriter
IDocument
\family default
.
 A client can call 
\family typewriter
suggestCorrection()
\family default
 on the 
\family typewriter
ISuggest
\family default
 interface, and the checker will look for a suitable correction.
 Finally, the component has an attribute 
\family typewriter
dictionaryName
\family default
, which is the dictionary it uses.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/spellchecker.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-spellchecker-component"

\end_inset

A spellchecker leaf component
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
To map this onto a Java class following bean conventions, we would do something
 like the following.
\end_layout

\begin_layout LyX-Code
public class SpellChecker implements ISpellCheck
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
  // the attribute
\end_layout

\begin_layout LyX-Code
  private String dictionaryName;
\end_layout

\begin_layout LyX-Code
  public String getDictionaryName() { return dictionaryName; }
\end_layout

\begin_layout LyX-Code
  public void setDictionaryName(String name) { dictionaryName = name; }
\begin_inset Newline newline
\end_inset

  
\end_layout

\begin_layout LyX-Code
  // the required port
\end_layout

\begin_layout LyX-Code
  private IDocument document;
\end_layout

\begin_layout LyX-Code
  public void setDocument(IDocument doc) { document = doc; }
\begin_inset Newline newline
\end_inset

  
\end_layout

\begin_layout LyX-Code
  // the provided port for document
\end_layout

\begin_layout LyX-Code
  private ISuggest document_Provided = new ISuggest {
\end_layout

\begin_layout LyX-Code
    //  methods for ISuggest implementation...
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
  public ISuggest getDocument_Provided()
\end_layout

\begin_layout LyX-Code
    { return document_Provided; }
\begin_inset Newline newline
\end_inset

  
\end_layout

\begin_layout LyX-Code
  // methods for ISpellCheck...
\end_layout

\begin_layout LyX-Code
  ...
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
The attribute is mapped neatly enough onto a setter and getter.
 The provided 
\family typewriter
check
\family default
 port is also mapped easily onto the 
\family typewriter
implements
\family default
 of the class.
 The required interface 
\family typewriter
IDocument
\family default
 of the port document can be mapped onto the 
\family typewriter
document
\family default
 field, with a setter only.
 This is an interface that the component requires, so it can call methods
 on it.
\end_layout

\begin_layout Standard
The only really troublesome part is mapping the provided interface of 
\family typewriter
document
\family default
.
 For this, we use an anonymous inner class, and provide a getter for it.
 We use the
\family typewriter
 _Provided
\family default
 suffix as a convention for these situations.
\end_layout

\begin_layout Standard
As long as we follow these conventions, we can regard each JavaBean as a
 leaf component.
 We have introduced the following terms.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features islongtable="true" firstHeadTopDL="true" firstHeadBottomDL="true">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="70text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Leaf
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A component which cannot be further decomposed into others.
 An atomic unit, implemented by a class.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A service provided by a component.
 Mapped onto the implemented interfaces of the class or onto an instance
 of an anonymous inner class.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A service required by a component.
 Mapped onto a field of the class, with a setter only.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A named 
\begin_inset Quotes eld
\end_inset

gate
\begin_inset Quotes erd
\end_inset

 insulating the component from its environment.
 All provided and required interfaces must be via ports.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attribute
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A configurable field of the component.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:A-Composite-Component"

\end_inset

A Composite Component
\end_layout

\begin_layout Standard
A composite component connects up instances of other components to make
 a new component.
\end_layout

\begin_layout Standard
Suppose that we had a 
\family typewriter
Document
\family default
 leaf as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-document-component"

\end_inset

.
 Note how the interfaces of the 
\family typewriter
spell
\family default
 port of 
\family typewriter
Document
\family default
 are the opposites of the interfaces provided and required by the 
\family typewriter
document
\family default
 port of 
\family typewriter
SpellChecker
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/document.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-document-component"

\end_inset

A 
\family typewriter
Document
\family default
 leaf component
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
SpellChecker
\family default
 provides an 
\family typewriter
ISuggest
\family default
 implementation, and requires an 
\family typewriter
IDocument
\family default
 implementation.
 
\family typewriter
Document
\family default
 requires an 
\family typewriter
ISuggest
\family default
 implementation and provides an 
\family typewriter
IDocument
\family default
 one.
 As these are complementary, we can connect an instance of each of these
 together, joining them via a connector 
\family typewriter
conn
\family default
 as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-wordprocessor-composite"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/wordprocessor.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-wordprocessor-composite"

\end_inset

A 
\family typewriter
WordProcessor
\family default
 composite component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The concept of instances is critical here - we call these 
\begin_inset Quotes eld
\end_inset

parts
\begin_inset Quotes erd
\end_inset

.
 We have literally defined a new component by connecting together two instances
 of other components.
 Note that we did not need to specify the interfaces on the external ports
 
\family typewriter
checker
\family default
 and 
\family typewriter
doc
\family default
.
 Evolve inferred them from the definitions of the internal parts and their
 connections.
\end_layout

\begin_layout Standard
This has effortlessly accomplished something that is often very difficult
 in Dependency Injection approaches: we have connected two instances (
\family typewriter
SpellChecker
\family default
 and 
\family typewriter
Document
\family default
) to both refer to each other
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Without having to pollute the leaf definitions with notions of singleton
 or prototype.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fidea{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that a composite component exists only in Evolve, and it does not need
 a Java class associated with it.
 To execute this as a program, the Backbone runtime engine 
\begin_inset Quotes eld
\end_inset

flattens
\begin_inset Quotes erd
\end_inset

 all of the composites, removing them completely, and directly connects
 instances of leaves together to create a running system.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The terms we have introduced are below.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features islongtable="true" firstHeadTopDL="true" firstHeadBottomDL="true">
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="70text%">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Composite
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A component created by wiring together instances of other components (parts)
 using connectors, and selectively exposing ports of internal parts.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Part
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Another name for a component instance.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connector
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A wire joining together two ports of component instances.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constituent
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A general name for a port, part, connector or attribute.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Compositional Hierarchy
\end_layout

\begin_layout Standard
Note that the form of the 
\family typewriter
WordProcessor
\family default
 composite, if we ignore the internal parts and connectors, is the same
 form as that of leaves.
 It has ports with provided and required interfaces, and can have attributes.
 In other words, we can now treat the composite like any other component
 and use instances of it to define new components.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:An-office-suite,"

\end_inset

 shows how we might define an office suite composite, as being made up of
 a 
\family typewriter
WordProcessor
\family default
 instance and a 
\family typewriter
SpreadSheet
\family default
 instance.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/office-suite.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:An-office-suite,"

\end_inset

An 
\family typewriter
OfficeSuite
\family default
 composite, made up of a wordprocessor and spreadsheet instance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We are building up a hierarchy of component instances, as shown in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-compositional-hierarchy"

\end_inset

.
 In this case, the top level is 
\family typewriter
OfficeSuite
\family default
, and under that are instances of 
\family typewriter
WordProcessor
\family default
 and 
\family typewriter
Spreadsheet
\family default
.
 
\family typewriter
WordProcessor
\family default
 further decomposes into two other instances which are instances of leaf
 components.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/hierarchy.png
	scale 150

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-compositional-hierarchy"

\end_inset

The compositional hierarchy of 
\family typewriter
OfficeSuite
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The ability to form a hierarchy in this way is very similar to how electronics
 design is done.
 If we consider that a composite is wiring together chips (parts) using
 connectors, then the analogy is very close.
 The key difference though is that once we've created a composite (populated
 circuit board), we can then instantly reuse it as a part in another composite.
 It is like being able to shrink an electronic circuit board into a chip
 on the spot.
 It's a big advantage, on top of the advantages already proven by the approach
 in controlling and managing the complexity of digital electronics.
\end_layout

\begin_layout Standard
The reuse and evolution constructs of Evolve work directly on the compositional
 hierarchy.
\end_layout

\begin_layout Section
The Backbone Component Language
\end_layout

\begin_layout Standard
So what is Backbone and where does it fit into this? Backbone is a component
 language and a runtime engine.
 An Evolve model is turned directly into a compact Backbone textual definition,
 which can then be executed.
\end_layout

\begin_layout Standard
The Backbone definition for 
\family typewriter
WordProcessor
\family default
 is as follows.
\end_layout

\begin_layout LyX-Code
    component WordProcessor
\end_layout

\begin_layout LyX-Code
    {
\end_layout

\begin_layout LyX-Code
        ports:
\end_layout

\begin_layout LyX-Code
            checker,
\end_layout

\begin_layout LyX-Code
            doc;
\end_layout

\begin_layout LyX-Code
        parts:
\end_layout

\begin_layout LyX-Code
            s: SpellChecker
\end_layout

\begin_layout LyX-Code
                slots:
\end_layout

\begin_layout LyX-Code
                    dictionaryName = "US",
\end_layout

\begin_layout LyX-Code
            d: Document;
\end_layout

\begin_layout LyX-Code
        connectors:
\end_layout

\begin_layout LyX-Code
            conn joins document@s to port@d,
\end_layout

\begin_layout LyX-Code
            a joins check@s to checker,
\end_layout

\begin_layout LyX-Code
            b joins document@d to doc;
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout Standard
At runtime, the Backbone engine reads in the definitions, and flattens them
 into connections between leaf components.
 It then instantiates the classes corresponding to the leaves, connects
 them up and passes control over to one of the instances.
\end_layout

\begin_layout Standard
A Backbone program can also be executed outside of Evolve.
 It can also be translated into a simple Java class, allowing any program
 to be run independently from Evolve or Backbone.
\end_layout

\begin_layout Section
A Quick Review
\end_layout

\begin_layout Standard
That is really all there is to the underlying component approach.
 We create leaf components in Backbone, and Evolve can help us generate
 the code for these as simple Java classes.
 We can import existing JavaBeans into a model as leaf components.
 We then connect up parts into bigger, composite components which can then
 be further used as parts in other designs.
 Composite components do not require any Java code; they exist only within
 Evolve and Backbone.
 A model can be executed by the Backbone runtime engine which connects up
 instances of the leaves directly.
\end_layout

\begin_layout Standard
Component hierarchy provides a powerful (and scalable) design approach that
 has served digital electronics very well for decades - ever since the introduct
ion of the integrated circuit.
 Evolve allows the same approach for software.
 All the advanced techniques that we will introduce subsequently in this
 document are based on these fundamentals.
\end_layout

\begin_layout Standard
Unlike in electronics, however, we are not working with physical components.
 There are advantages to this - the first is that we can immediately 
\begin_inset Quotes eld
\end_inset

shrink
\begin_inset Quotes erd
\end_inset

 down a composite and treat it like any other component.
 Second, we can introduce constructs to manipulate the structure and connectors
 of a system which evolve and remake it in powerful and convenient ways.
 Evolve started as a way to produce highly extensible software, and this
 ability to remake a hierarchy is what ensures that Evolve components can
 always be extended and customized.
\end_layout

\begin_layout Standard
The following chapter will show you how to install and startup the Evolve
 environment, and how to navigate quickly around a model.
 We will then walk through an example model, showing how to create and execute
 component programs.
\end_layout

\end_body
\end_document
