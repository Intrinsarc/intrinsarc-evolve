%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 179 295 416 496
%%Creator: FreeHEP Graphics2D Driver
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, 20 September 2010 00:43:24 o'clock BST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
237 200 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
237.000 0.00000 l
237.000 200.000 l
0.00000 200.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] concat
0 0 261 224 rc
q
q
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
-1.00000 -1.00000 263.000 226.000 rc
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
0.00000 0.00000 100000 100000 rc
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
-2.00000 -2.00000 265.000 228.000 rc
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
1.00000 .400000 1.00000 RG
newpath
32.0000 32.0000 m
148.000 32.0000 l
148.000 91.0000 l
32.0000 91.0000 l
32.0000 32.0000 l
h
f
0.00000 0.00000 0.00000 RG
0 J
[ 1.00000 0.00000 0.00000 1.00000 63.0000 47.0000 ] concat
2 J
0.00000 0.00000 0.00000 RG
q
q
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
newpath
.765625 13.0000 m
.765625 4.40625 l
1.82812 4.40625 l
1.82812 13.0000 l
.765625 13.0000 l
h
7.52539 12.2344 m
7.12956 12.5677 6.75195 12.8021 6.39258 12.9375  c
6.03320 13.0729 5.64518 13.1406 5.22852 13.1406  c
4.54102 13.1406 4.01497 12.9740 3.65039 12.6406  c
3.28581 12.3073 3.10352 11.8802 3.10352 11.3594  c
3.10352 11.0573 3.17122 10.7786 3.30664 10.5234  c
3.44206 10.2682 3.62435 10.0651 3.85352 9.91406  c
4.08268 9.76302 4.33789 9.65104 4.61914 9.57812  c
4.81706 9.51562 5.12956 9.45833 5.55664 9.40625  c
6.40039 9.31250 7.02539 9.19271 7.43164 9.04688  c
7.43164 8.90104 7.43164 8.81250 7.43164 8.78125  c
7.43164 8.34375 7.33268 8.03646 7.13477 7.85938  c
6.86393 7.63021 6.46289 7.51562 5.93164 7.51562  c
5.44206 7.51562 5.07747 7.60156 4.83789 7.77344  c
4.59831 7.94531 4.42122 8.25000 4.30664 8.68750  c
3.27539 8.54688 l
3.36914 8.10938 3.52539 7.75521 3.74414 7.48438  c
3.96289 7.21354 4.27539 7.00521 4.68164 6.85938  c
5.08789 6.71354 5.55664 6.64062 6.08789 6.64062  c
6.61914 6.64062 7.05143 6.70312 7.38477 6.82812  c
7.71810 6.95312 7.96289 7.10938 8.11914 7.29688  c
8.27539 7.48438 8.38477 7.72396 8.44727 8.01562  c
8.47852 8.19271 8.49414 8.51562 8.49414 8.98438  c
8.49414 10.3906 l
8.49414 11.3698 8.51758 11.9896 8.56445 12.2500  c
8.61133 12.5104 8.70247 12.7604 8.83789 13.0000  c
7.72852 13.0000 l
7.62435 12.7812 7.55664 12.5260 7.52539 12.2344  c
h
7.43164 9.87500 m
7.04622 10.0312 6.47331 10.1667 5.71289 10.2812  c
5.27539 10.3438 4.96810 10.4141 4.79102 10.4922  c
4.61393 10.5703 4.47591 10.6823 4.37695 10.8281  c
4.27799 10.9740 4.22852 11.1406 4.22852 11.3281  c
4.22852 11.6094 4.33529 11.8438 4.54883 12.0312  c
4.76237 12.2188 5.07227 12.3125 5.47852 12.3125  c
5.88477 12.3125 6.24674 12.2240 6.56445 12.0469  c
6.88216 11.8698 7.11393 11.6250 7.25977 11.3125  c
7.37435 11.0729 7.43164 10.7240 7.43164 10.2656  c
7.43164 9.87500 l
h
10.0898 15.3906 m
9.96484 14.4062 l
10.1940 14.4688 10.3971 14.5000 10.5742 14.5000  c
10.8034 14.5000 10.9883 14.4609 11.1289 14.3828  c
11.2695 14.3047 11.3867 14.1979 11.4805 14.0625  c
11.5430 13.9479 11.6523 13.6823 11.8086 13.2656  c
11.8190 13.2135 11.8503 13.1302 11.9023 13.0156  c
9.52734 6.78125 l
10.6680 6.78125 l
11.9648 10.3750 l
12.1315 10.8333 12.2826 11.3177 12.4180 11.8281  c
12.5430 11.3385 12.6888 10.8646 12.8555 10.4062  c
14.1836 6.78125 l
15.2305 6.78125 l
12.8711 13.1094 l
12.6107 13.7865 12.4128 14.2552 12.2773 14.5156  c
12.0898 14.8698 11.8737 15.1276 11.6289 15.2891  c
11.3841 15.4505 11.0951 15.5312 10.7617 15.5312  c
10.5638 15.5312 10.3398 15.4844 10.0898 15.3906  c
h
20.3867 11.0000 m
21.4805 11.1250 l
21.3138 11.7604 20.9961 12.2552 20.5273 12.6094  c
20.0586 12.9635 19.4648 13.1406 18.7461 13.1406  c
17.8398 13.1406 17.1185 12.8594 16.5820 12.2969  c
16.0456 11.7344 15.7773 10.9479 15.7773 9.93750  c
15.7773 8.89583 16.0482 8.08594 16.5898 7.50781  c
17.1315 6.92969 17.8294 6.64062 18.6836 6.64062  c
19.5169 6.64062 20.1966 6.92188 20.7227 7.48438  c
21.2487 8.04688 21.5117 8.84375 21.5117 9.87500  c
21.5117 9.93750 21.5117 10.0312 21.5117 10.1562  c
16.8711 10.1562 l
16.9128 10.8438 17.1055 11.3672 17.4492 11.7266  c
17.7930 12.0859 18.2253 12.2656 18.7461 12.2656  c
19.1315 12.2656 19.4622 12.1641 19.7383 11.9609  c
20.0143 11.7578 20.2305 11.4375 20.3867 11.0000  c
h
16.9336 9.29688 m
20.4023 9.29688 l
20.3607 8.76562 20.2305 8.36979 20.0117 8.10938  c
19.6680 7.70312 19.2305 7.50000 18.6992 7.50000  c
18.2096 7.50000 17.8008 7.66146 17.4727 7.98438  c
17.1445 8.30729 16.9648 8.74479 16.9336 9.29688  c
h
22.7949 13.0000 m
22.7949 6.78125 l
23.7480 6.78125 l
23.7480 7.71875 l
23.9876 7.28125 24.2090 6.99219 24.4121 6.85156  c
24.6152 6.71094 24.8418 6.64062 25.0918 6.64062  c
25.4460 6.64062 25.8053 6.75000 26.1699 6.96875  c
25.8105 7.95312 l
25.5501 7.79688 25.2949 7.71875 25.0449 7.71875  c
24.8053 7.71875 24.5944 7.78906 24.4121 7.92969  c
24.2298 8.07031 24.1022 8.26562 24.0293 8.51562  c
23.9043 8.89062 23.8418 9.29688 23.8418 9.73438  c
23.8418 13.0000 l
22.7949 13.0000 l
h
29.3281 13.0000 m
32.6250 4.40625 l
33.8438 4.40625 l
37.3594 13.0000 l
36.0781 13.0000 l
35.0625 10.3906 l
31.4844 10.3906 l
30.5312 13.0000 l
29.3281 13.0000 l
h
31.8125 9.46875 m
34.7188 9.46875 l
33.8281 7.09375 l
33.5469 6.37500 33.3438 5.78125 33.2188 5.31250  c
33.1042 5.86458 32.9479 6.41146 32.7500 6.95312  c
31.8125 9.46875 l
h
f
Q
Q
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
0.00000 0.00000 0.00000 RG
0 J
.600000 .600000 1.00000 RG
newpath
32.0000 164.000 m
260.000 164.000 l
260.000 223.000 l
32.0000 223.000 l
32.0000 164.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 123.000 179.000 ] concat
2 J
0.00000 0.00000 0.00000 RG
q
q
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
newpath
.765625 13.0000 m
.765625 4.40625 l
1.82812 4.40625 l
1.82812 13.0000 l
.765625 13.0000 l
h
7.52539 12.2344 m
7.12956 12.5677 6.75195 12.8021 6.39258 12.9375  c
6.03320 13.0729 5.64518 13.1406 5.22852 13.1406  c
4.54102 13.1406 4.01497 12.9740 3.65039 12.6406  c
3.28581 12.3073 3.10352 11.8802 3.10352 11.3594  c
3.10352 11.0573 3.17122 10.7786 3.30664 10.5234  c
3.44206 10.2682 3.62435 10.0651 3.85352 9.91406  c
4.08268 9.76302 4.33789 9.65104 4.61914 9.57812  c
4.81706 9.51562 5.12956 9.45833 5.55664 9.40625  c
6.40039 9.31250 7.02539 9.19271 7.43164 9.04688  c
7.43164 8.90104 7.43164 8.81250 7.43164 8.78125  c
7.43164 8.34375 7.33268 8.03646 7.13477 7.85938  c
6.86393 7.63021 6.46289 7.51562 5.93164 7.51562  c
5.44206 7.51562 5.07747 7.60156 4.83789 7.77344  c
4.59831 7.94531 4.42122 8.25000 4.30664 8.68750  c
3.27539 8.54688 l
3.36914 8.10938 3.52539 7.75521 3.74414 7.48438  c
3.96289 7.21354 4.27539 7.00521 4.68164 6.85938  c
5.08789 6.71354 5.55664 6.64062 6.08789 6.64062  c
6.61914 6.64062 7.05143 6.70312 7.38477 6.82812  c
7.71810 6.95312 7.96289 7.10938 8.11914 7.29688  c
8.27539 7.48438 8.38477 7.72396 8.44727 8.01562  c
8.47852 8.19271 8.49414 8.51562 8.49414 8.98438  c
8.49414 10.3906 l
8.49414 11.3698 8.51758 11.9896 8.56445 12.2500  c
8.61133 12.5104 8.70247 12.7604 8.83789 13.0000  c
7.72852 13.0000 l
7.62435 12.7812 7.55664 12.5260 7.52539 12.2344  c
h
7.43164 9.87500 m
7.04622 10.0312 6.47331 10.1667 5.71289 10.2812  c
5.27539 10.3438 4.96810 10.4141 4.79102 10.4922  c
4.61393 10.5703 4.47591 10.6823 4.37695 10.8281  c
4.27799 10.9740 4.22852 11.1406 4.22852 11.3281  c
4.22852 11.6094 4.33529 11.8438 4.54883 12.0312  c
4.76237 12.2188 5.07227 12.3125 5.47852 12.3125  c
5.88477 12.3125 6.24674 12.2240 6.56445 12.0469  c
6.88216 11.8698 7.11393 11.6250 7.25977 11.3125  c
7.37435 11.0729 7.43164 10.7240 7.43164 10.2656  c
7.43164 9.87500 l
h
10.0898 15.3906 m
9.96484 14.4062 l
10.1940 14.4688 10.3971 14.5000 10.5742 14.5000  c
10.8034 14.5000 10.9883 14.4609 11.1289 14.3828  c
11.2695 14.3047 11.3867 14.1979 11.4805 14.0625  c
11.5430 13.9479 11.6523 13.6823 11.8086 13.2656  c
11.8190 13.2135 11.8503 13.1302 11.9023 13.0156  c
9.52734 6.78125 l
10.6680 6.78125 l
11.9648 10.3750 l
12.1315 10.8333 12.2826 11.3177 12.4180 11.8281  c
12.5430 11.3385 12.6888 10.8646 12.8555 10.4062  c
14.1836 6.78125 l
15.2305 6.78125 l
12.8711 13.1094 l
12.6107 13.7865 12.4128 14.2552 12.2773 14.5156  c
12.0898 14.8698 11.8737 15.1276 11.6289 15.2891  c
11.3841 15.4505 11.0951 15.5312 10.7617 15.5312  c
10.5638 15.5312 10.3398 15.4844 10.0898 15.3906  c
h
20.3867 11.0000 m
21.4805 11.1250 l
21.3138 11.7604 20.9961 12.2552 20.5273 12.6094  c
20.0586 12.9635 19.4648 13.1406 18.7461 13.1406  c
17.8398 13.1406 17.1185 12.8594 16.5820 12.2969  c
16.0456 11.7344 15.7773 10.9479 15.7773 9.93750  c
15.7773 8.89583 16.0482 8.08594 16.5898 7.50781  c
17.1315 6.92969 17.8294 6.64062 18.6836 6.64062  c
19.5169 6.64062 20.1966 6.92188 20.7227 7.48438  c
21.2487 8.04688 21.5117 8.84375 21.5117 9.87500  c
21.5117 9.93750 21.5117 10.0312 21.5117 10.1562  c
16.8711 10.1562 l
16.9128 10.8438 17.1055 11.3672 17.4492 11.7266  c
17.7930 12.0859 18.2253 12.2656 18.7461 12.2656  c
19.1315 12.2656 19.4622 12.1641 19.7383 11.9609  c
20.0143 11.7578 20.2305 11.4375 20.3867 11.0000  c
h
16.9336 9.29688 m
20.4023 9.29688 l
20.3607 8.76562 20.2305 8.36979 20.0117 8.10938  c
19.6680 7.70312 19.2305 7.50000 18.6992 7.50000  c
18.2096 7.50000 17.8008 7.66146 17.4727 7.98438  c
17.1445 8.30729 16.9648 8.74479 16.9336 9.29688  c
h
22.7949 13.0000 m
22.7949 6.78125 l
23.7480 6.78125 l
23.7480 7.71875 l
23.9876 7.28125 24.2090 6.99219 24.4121 6.85156  c
24.6152 6.71094 24.8418 6.64062 25.0918 6.64062  c
25.4460 6.64062 25.8053 6.75000 26.1699 6.96875  c
25.8105 7.95312 l
25.5501 7.79688 25.2949 7.71875 25.0449 7.71875  c
24.8053 7.71875 24.5944 7.78906 24.4121 7.92969  c
24.2298 8.07031 24.1022 8.26562 24.0293 8.51562  c
23.9043 8.89062 23.8418 9.29688 23.8418 9.73438  c
23.8418 13.0000 l
22.7949 13.0000 l
h
29.5781 13.0000 m
29.5781 11.9375 l
33.9844 6.43750 l
34.2969 6.05208 34.5938 5.71354 34.8750 5.42188  c
30.0781 5.42188 l
30.0781 4.40625 l
36.2344 4.40625 l
36.2344 5.42188 l
31.4062 11.3750 l
30.8906 11.9844 l
36.3750 11.9844 l
36.3750 13.0000 l
29.5781 13.0000 l
h
f
Q
Q
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
0.00000 0.00000 0.00000 RG
0 J
1.00000 1.00000 .400000 RG
newpath
32.0000 96.0000 m
148.000 96.0000 l
148.000 159.000 l
32.0000 159.000 l
32.0000 96.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 63.0000 111.000 ] concat
2 J
0.00000 0.00000 0.00000 RG
q
q
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
newpath
.765625 13.0000 m
.765625 4.40625 l
1.82812 4.40625 l
1.82812 13.0000 l
.765625 13.0000 l
h
7.52539 12.2344 m
7.12956 12.5677 6.75195 12.8021 6.39258 12.9375  c
6.03320 13.0729 5.64518 13.1406 5.22852 13.1406  c
4.54102 13.1406 4.01497 12.9740 3.65039 12.6406  c
3.28581 12.3073 3.10352 11.8802 3.10352 11.3594  c
3.10352 11.0573 3.17122 10.7786 3.30664 10.5234  c
3.44206 10.2682 3.62435 10.0651 3.85352 9.91406  c
4.08268 9.76302 4.33789 9.65104 4.61914 9.57812  c
4.81706 9.51562 5.12956 9.45833 5.55664 9.40625  c
6.40039 9.31250 7.02539 9.19271 7.43164 9.04688  c
7.43164 8.90104 7.43164 8.81250 7.43164 8.78125  c
7.43164 8.34375 7.33268 8.03646 7.13477 7.85938  c
6.86393 7.63021 6.46289 7.51562 5.93164 7.51562  c
5.44206 7.51562 5.07747 7.60156 4.83789 7.77344  c
4.59831 7.94531 4.42122 8.25000 4.30664 8.68750  c
3.27539 8.54688 l
3.36914 8.10938 3.52539 7.75521 3.74414 7.48438  c
3.96289 7.21354 4.27539 7.00521 4.68164 6.85938  c
5.08789 6.71354 5.55664 6.64062 6.08789 6.64062  c
6.61914 6.64062 7.05143 6.70312 7.38477 6.82812  c
7.71810 6.95312 7.96289 7.10938 8.11914 7.29688  c
8.27539 7.48438 8.38477 7.72396 8.44727 8.01562  c
8.47852 8.19271 8.49414 8.51562 8.49414 8.98438  c
8.49414 10.3906 l
8.49414 11.3698 8.51758 11.9896 8.56445 12.2500  c
8.61133 12.5104 8.70247 12.7604 8.83789 13.0000  c
7.72852 13.0000 l
7.62435 12.7812 7.55664 12.5260 7.52539 12.2344  c
h
7.43164 9.87500 m
7.04622 10.0312 6.47331 10.1667 5.71289 10.2812  c
5.27539 10.3438 4.96810 10.4141 4.79102 10.4922  c
4.61393 10.5703 4.47591 10.6823 4.37695 10.8281  c
4.27799 10.9740 4.22852 11.1406 4.22852 11.3281  c
4.22852 11.6094 4.33529 11.8438 4.54883 12.0312  c
4.76237 12.2188 5.07227 12.3125 5.47852 12.3125  c
5.88477 12.3125 6.24674 12.2240 6.56445 12.0469  c
6.88216 11.8698 7.11393 11.6250 7.25977 11.3125  c
7.37435 11.0729 7.43164 10.7240 7.43164 10.2656  c
7.43164 9.87500 l
h
10.0898 15.3906 m
9.96484 14.4062 l
10.1940 14.4688 10.3971 14.5000 10.5742 14.5000  c
10.8034 14.5000 10.9883 14.4609 11.1289 14.3828  c
11.2695 14.3047 11.3867 14.1979 11.4805 14.0625  c
11.5430 13.9479 11.6523 13.6823 11.8086 13.2656  c
11.8190 13.2135 11.8503 13.1302 11.9023 13.0156  c
9.52734 6.78125 l
10.6680 6.78125 l
11.9648 10.3750 l
12.1315 10.8333 12.2826 11.3177 12.4180 11.8281  c
12.5430 11.3385 12.6888 10.8646 12.8555 10.4062  c
14.1836 6.78125 l
15.2305 6.78125 l
12.8711 13.1094 l
12.6107 13.7865 12.4128 14.2552 12.2773 14.5156  c
12.0898 14.8698 11.8737 15.1276 11.6289 15.2891  c
11.3841 15.4505 11.0951 15.5312 10.7617 15.5312  c
10.5638 15.5312 10.3398 15.4844 10.0898 15.3906  c
h
20.3867 11.0000 m
21.4805 11.1250 l
21.3138 11.7604 20.9961 12.2552 20.5273 12.6094  c
20.0586 12.9635 19.4648 13.1406 18.7461 13.1406  c
17.8398 13.1406 17.1185 12.8594 16.5820 12.2969  c
16.0456 11.7344 15.7773 10.9479 15.7773 9.93750  c
15.7773 8.89583 16.0482 8.08594 16.5898 7.50781  c
17.1315 6.92969 17.8294 6.64062 18.6836 6.64062  c
19.5169 6.64062 20.1966 6.92188 20.7227 7.48438  c
21.2487 8.04688 21.5117 8.84375 21.5117 9.87500  c
21.5117 9.93750 21.5117 10.0312 21.5117 10.1562  c
16.8711 10.1562 l
16.9128 10.8438 17.1055 11.3672 17.4492 11.7266  c
17.7930 12.0859 18.2253 12.2656 18.7461 12.2656  c
19.1315 12.2656 19.4622 12.1641 19.7383 11.9609  c
20.0143 11.7578 20.2305 11.4375 20.3867 11.0000  c
h
16.9336 9.29688 m
20.4023 9.29688 l
20.3607 8.76562 20.2305 8.36979 20.0117 8.10938  c
19.6680 7.70312 19.2305 7.50000 18.6992 7.50000  c
18.2096 7.50000 17.8008 7.66146 17.4727 7.98438  c
17.1445 8.30729 16.9648 8.74479 16.9336 9.29688  c
h
22.7949 13.0000 m
22.7949 6.78125 l
23.7480 6.78125 l
23.7480 7.71875 l
23.9876 7.28125 24.2090 6.99219 24.4121 6.85156  c
24.6152 6.71094 24.8418 6.64062 25.0918 6.64062  c
25.4460 6.64062 25.8053 6.75000 26.1699 6.96875  c
25.8105 7.95312 l
25.5501 7.79688 25.2949 7.71875 25.0449 7.71875  c
24.8053 7.71875 24.5944 7.78906 24.4121 7.92969  c
24.2298 8.07031 24.1022 8.26562 24.0293 8.51562  c
23.9043 8.89062 23.8418 9.29688 23.8418 9.73438  c
23.8418 13.0000 l
22.7949 13.0000 l
h
29.3906 13.0000 m
32.7188 8.51562 l
29.7969 4.40625 l
31.1406 4.40625 l
32.7031 6.60938 l
33.0260 7.06771 33.2552 7.42188 33.3906 7.67188  c
33.5885 7.35938 33.8177 7.03125 34.0781 6.68750  c
35.7969 4.40625 l
37.0312 4.40625 l
34.0156 8.45312 l
37.2656 13.0000 l
35.8594 13.0000 l
33.7031 9.93750 l
33.5781 9.76042 33.4531 9.56771 33.3281 9.35938  c
33.1406 9.67188 33.0052 9.88542 32.9219 10.0000  c
30.7656 13.0000 l
29.3906 13.0000 l
h
f
Q
Q
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
0.00000 0.00000 0.00000 RG
0 J
1.00000 .850980 .400000 RG
newpath
148.000 32.0000 m
260.000 32.0000 l
260.000 91.0000 l
148.000 91.0000 l
148.000 32.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 175.000 47.0000 ] concat
2 J
0.00000 0.00000 0.00000 RG
q
q
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
newpath
.765625 13.0000 m
.765625 4.40625 l
1.82812 4.40625 l
1.82812 13.0000 l
.765625 13.0000 l
h
7.52539 12.2344 m
7.12956 12.5677 6.75195 12.8021 6.39258 12.9375  c
6.03320 13.0729 5.64518 13.1406 5.22852 13.1406  c
4.54102 13.1406 4.01497 12.9740 3.65039 12.6406  c
3.28581 12.3073 3.10352 11.8802 3.10352 11.3594  c
3.10352 11.0573 3.17122 10.7786 3.30664 10.5234  c
3.44206 10.2682 3.62435 10.0651 3.85352 9.91406  c
4.08268 9.76302 4.33789 9.65104 4.61914 9.57812  c
4.81706 9.51562 5.12956 9.45833 5.55664 9.40625  c
6.40039 9.31250 7.02539 9.19271 7.43164 9.04688  c
7.43164 8.90104 7.43164 8.81250 7.43164 8.78125  c
7.43164 8.34375 7.33268 8.03646 7.13477 7.85938  c
6.86393 7.63021 6.46289 7.51562 5.93164 7.51562  c
5.44206 7.51562 5.07747 7.60156 4.83789 7.77344  c
4.59831 7.94531 4.42122 8.25000 4.30664 8.68750  c
3.27539 8.54688 l
3.36914 8.10938 3.52539 7.75521 3.74414 7.48438  c
3.96289 7.21354 4.27539 7.00521 4.68164 6.85938  c
5.08789 6.71354 5.55664 6.64062 6.08789 6.64062  c
6.61914 6.64062 7.05143 6.70312 7.38477 6.82812  c
7.71810 6.95312 7.96289 7.10938 8.11914 7.29688  c
8.27539 7.48438 8.38477 7.72396 8.44727 8.01562  c
8.47852 8.19271 8.49414 8.51562 8.49414 8.98438  c
8.49414 10.3906 l
8.49414 11.3698 8.51758 11.9896 8.56445 12.2500  c
8.61133 12.5104 8.70247 12.7604 8.83789 13.0000  c
7.72852 13.0000 l
7.62435 12.7812 7.55664 12.5260 7.52539 12.2344  c
h
7.43164 9.87500 m
7.04622 10.0312 6.47331 10.1667 5.71289 10.2812  c
5.27539 10.3438 4.96810 10.4141 4.79102 10.4922  c
4.61393 10.5703 4.47591 10.6823 4.37695 10.8281  c
4.27799 10.9740 4.22852 11.1406 4.22852 11.3281  c
4.22852 11.6094 4.33529 11.8438 4.54883 12.0312  c
4.76237 12.2188 5.07227 12.3125 5.47852 12.3125  c
5.88477 12.3125 6.24674 12.2240 6.56445 12.0469  c
6.88216 11.8698 7.11393 11.6250 7.25977 11.3125  c
7.37435 11.0729 7.43164 10.7240 7.43164 10.2656  c
7.43164 9.87500 l
h
10.0898 15.3906 m
9.96484 14.4062 l
10.1940 14.4688 10.3971 14.5000 10.5742 14.5000  c
10.8034 14.5000 10.9883 14.4609 11.1289 14.3828  c
11.2695 14.3047 11.3867 14.1979 11.4805 14.0625  c
11.5430 13.9479 11.6523 13.6823 11.8086 13.2656  c
11.8190 13.2135 11.8503 13.1302 11.9023 13.0156  c
9.52734 6.78125 l
10.6680 6.78125 l
11.9648 10.3750 l
12.1315 10.8333 12.2826 11.3177 12.4180 11.8281  c
12.5430 11.3385 12.6888 10.8646 12.8555 10.4062  c
14.1836 6.78125 l
15.2305 6.78125 l
12.8711 13.1094 l
12.6107 13.7865 12.4128 14.2552 12.2773 14.5156  c
12.0898 14.8698 11.8737 15.1276 11.6289 15.2891  c
11.3841 15.4505 11.0951 15.5312 10.7617 15.5312  c
10.5638 15.5312 10.3398 15.4844 10.0898 15.3906  c
h
20.3867 11.0000 m
21.4805 11.1250 l
21.3138 11.7604 20.9961 12.2552 20.5273 12.6094  c
20.0586 12.9635 19.4648 13.1406 18.7461 13.1406  c
17.8398 13.1406 17.1185 12.8594 16.5820 12.2969  c
16.0456 11.7344 15.7773 10.9479 15.7773 9.93750  c
15.7773 8.89583 16.0482 8.08594 16.5898 7.50781  c
17.1315 6.92969 17.8294 6.64062 18.6836 6.64062  c
19.5169 6.64062 20.1966 6.92188 20.7227 7.48438  c
21.2487 8.04688 21.5117 8.84375 21.5117 9.87500  c
21.5117 9.93750 21.5117 10.0312 21.5117 10.1562  c
16.8711 10.1562 l
16.9128 10.8438 17.1055 11.3672 17.4492 11.7266  c
17.7930 12.0859 18.2253 12.2656 18.7461 12.2656  c
19.1315 12.2656 19.4622 12.1641 19.7383 11.9609  c
20.0143 11.7578 20.2305 11.4375 20.3867 11.0000  c
h
16.9336 9.29688 m
20.4023 9.29688 l
20.3607 8.76562 20.2305 8.36979 20.0117 8.10938  c
19.6680 7.70312 19.2305 7.50000 18.6992 7.50000  c
18.2096 7.50000 17.8008 7.66146 17.4727 7.98438  c
17.1445 8.30729 16.9648 8.74479 16.9336 9.29688  c
h
22.7949 13.0000 m
22.7949 6.78125 l
23.7480 6.78125 l
23.7480 7.71875 l
23.9876 7.28125 24.2090 6.99219 24.4121 6.85156  c
24.6152 6.71094 24.8418 6.64062 25.0918 6.64062  c
25.4460 6.64062 25.8053 6.75000 26.1699 6.96875  c
25.8105 7.95312 l
25.5501 7.79688 25.2949 7.71875 25.0449 7.71875  c
24.8053 7.71875 24.5944 7.78906 24.4121 7.92969  c
24.2298 8.07031 24.1022 8.26562 24.0293 8.51562  c
23.9043 8.89062 23.8418 9.29688 23.8418 9.73438  c
23.8418 13.0000 l
22.7949 13.0000 l
h
30.2188 13.0000 m
30.2188 4.40625 l
33.4531 4.40625 l
34.1094 4.40625 34.6354 4.49479 35.0312 4.67188  c
35.4271 4.84896 35.7370 5.11719 35.9609 5.47656  c
36.1849 5.83594 36.2969 6.21354 36.2969 6.60938  c
36.2969 6.97396 36.1979 7.31771 36.0000 7.64062  c
35.8021 7.96354 35.5000 8.22396 35.0938 8.42188  c
35.6146 8.57812 36.0130 8.84115 36.2891 9.21094  c
36.5651 9.58073 36.7031 10.0156 36.7031 10.5156  c
36.7031 10.9115 36.6198 11.2839 36.4531 11.6328  c
36.2865 11.9818 36.0781 12.2500 35.8281 12.4375  c
35.5781 12.6250 35.2630 12.7656 34.8828 12.8594  c
34.5026 12.9531 34.0417 13.0000 33.5000 13.0000  c
30.2188 13.0000 l
h
31.3594 8.01562 m
33.2188 8.01562 l
33.7188 8.01562 34.0781 7.98438 34.2969 7.92188  c
34.5885 7.83854 34.8073 7.69531 34.9531 7.49219  c
35.0990 7.28906 35.1719 7.03646 35.1719 6.73438  c
35.1719 6.45312 35.1042 6.20312 34.9688 5.98438  c
34.8333 5.76562 34.6380 5.61719 34.3828 5.53906  c
34.1276 5.46094 33.6927 5.42188 33.0781 5.42188  c
31.3594 5.42188 l
31.3594 8.01562 l
h
31.3594 11.9844 m
33.5000 11.9844 l
33.8646 11.9844 34.1198 11.9688 34.2656 11.9375  c
34.5365 11.8958 34.7578 11.8203 34.9297 11.7109  c
35.1016 11.6016 35.2448 11.4427 35.3594 11.2344  c
35.4740 11.0260 35.5312 10.7865 35.5312 10.5156  c
35.5312 10.1927 35.4505 9.91146 35.2891 9.67188  c
35.1276 9.43229 34.9010 9.26562 34.6094 9.17188  c
34.3177 9.07812 33.8958 9.03125 33.3438 9.03125  c
31.3594 9.03125 l
31.3594 11.9844 l
h
f
Q
Q
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
0.00000 0.00000 0.00000 RG
0 J
.701961 1.00000 .400000 RG
newpath
148.000 96.0000 m
260.000 96.0000 l
260.000 160.000 l
148.000 160.000 l
148.000 96.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 179.000 111.000 ] concat
2 J
0.00000 0.00000 0.00000 RG
q
q
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
newpath
.765625 13.0000 m
.765625 4.40625 l
1.82812 4.40625 l
1.82812 13.0000 l
.765625 13.0000 l
h
7.52539 12.2344 m
7.12956 12.5677 6.75195 12.8021 6.39258 12.9375  c
6.03320 13.0729 5.64518 13.1406 5.22852 13.1406  c
4.54102 13.1406 4.01497 12.9740 3.65039 12.6406  c
3.28581 12.3073 3.10352 11.8802 3.10352 11.3594  c
3.10352 11.0573 3.17122 10.7786 3.30664 10.5234  c
3.44206 10.2682 3.62435 10.0651 3.85352 9.91406  c
4.08268 9.76302 4.33789 9.65104 4.61914 9.57812  c
4.81706 9.51562 5.12956 9.45833 5.55664 9.40625  c
6.40039 9.31250 7.02539 9.19271 7.43164 9.04688  c
7.43164 8.90104 7.43164 8.81250 7.43164 8.78125  c
7.43164 8.34375 7.33268 8.03646 7.13477 7.85938  c
6.86393 7.63021 6.46289 7.51562 5.93164 7.51562  c
5.44206 7.51562 5.07747 7.60156 4.83789 7.77344  c
4.59831 7.94531 4.42122 8.25000 4.30664 8.68750  c
3.27539 8.54688 l
3.36914 8.10938 3.52539 7.75521 3.74414 7.48438  c
3.96289 7.21354 4.27539 7.00521 4.68164 6.85938  c
5.08789 6.71354 5.55664 6.64062 6.08789 6.64062  c
6.61914 6.64062 7.05143 6.70312 7.38477 6.82812  c
7.71810 6.95312 7.96289 7.10938 8.11914 7.29688  c
8.27539 7.48438 8.38477 7.72396 8.44727 8.01562  c
8.47852 8.19271 8.49414 8.51562 8.49414 8.98438  c
8.49414 10.3906 l
8.49414 11.3698 8.51758 11.9896 8.56445 12.2500  c
8.61133 12.5104 8.70247 12.7604 8.83789 13.0000  c
7.72852 13.0000 l
7.62435 12.7812 7.55664 12.5260 7.52539 12.2344  c
h
7.43164 9.87500 m
7.04622 10.0312 6.47331 10.1667 5.71289 10.2812  c
5.27539 10.3438 4.96810 10.4141 4.79102 10.4922  c
4.61393 10.5703 4.47591 10.6823 4.37695 10.8281  c
4.27799 10.9740 4.22852 11.1406 4.22852 11.3281  c
4.22852 11.6094 4.33529 11.8438 4.54883 12.0312  c
4.76237 12.2188 5.07227 12.3125 5.47852 12.3125  c
5.88477 12.3125 6.24674 12.2240 6.56445 12.0469  c
6.88216 11.8698 7.11393 11.6250 7.25977 11.3125  c
7.37435 11.0729 7.43164 10.7240 7.43164 10.2656  c
7.43164 9.87500 l
h
10.0898 15.3906 m
9.96484 14.4062 l
10.1940 14.4688 10.3971 14.5000 10.5742 14.5000  c
10.8034 14.5000 10.9883 14.4609 11.1289 14.3828  c
11.2695 14.3047 11.3867 14.1979 11.4805 14.0625  c
11.5430 13.9479 11.6523 13.6823 11.8086 13.2656  c
11.8190 13.2135 11.8503 13.1302 11.9023 13.0156  c
9.52734 6.78125 l
10.6680 6.78125 l
11.9648 10.3750 l
12.1315 10.8333 12.2826 11.3177 12.4180 11.8281  c
12.5430 11.3385 12.6888 10.8646 12.8555 10.4062  c
14.1836 6.78125 l
15.2305 6.78125 l
12.8711 13.1094 l
12.6107 13.7865 12.4128 14.2552 12.2773 14.5156  c
12.0898 14.8698 11.8737 15.1276 11.6289 15.2891  c
11.3841 15.4505 11.0951 15.5312 10.7617 15.5312  c
10.5638 15.5312 10.3398 15.4844 10.0898 15.3906  c
h
20.3867 11.0000 m
21.4805 11.1250 l
21.3138 11.7604 20.9961 12.2552 20.5273 12.6094  c
20.0586 12.9635 19.4648 13.1406 18.7461 13.1406  c
17.8398 13.1406 17.1185 12.8594 16.5820 12.2969  c
16.0456 11.7344 15.7773 10.9479 15.7773 9.93750  c
15.7773 8.89583 16.0482 8.08594 16.5898 7.50781  c
17.1315 6.92969 17.8294 6.64062 18.6836 6.64062  c
19.5169 6.64062 20.1966 6.92188 20.7227 7.48438  c
21.2487 8.04688 21.5117 8.84375 21.5117 9.87500  c
21.5117 9.93750 21.5117 10.0312 21.5117 10.1562  c
16.8711 10.1562 l
16.9128 10.8438 17.1055 11.3672 17.4492 11.7266  c
17.7930 12.0859 18.2253 12.2656 18.7461 12.2656  c
19.1315 12.2656 19.4622 12.1641 19.7383 11.9609  c
20.0143 11.7578 20.2305 11.4375 20.3867 11.0000  c
h
16.9336 9.29688 m
20.4023 9.29688 l
20.3607 8.76562 20.2305 8.36979 20.0117 8.10938  c
19.6680 7.70312 19.2305 7.50000 18.6992 7.50000  c
18.2096 7.50000 17.8008 7.66146 17.4727 7.98438  c
17.1445 8.30729 16.9648 8.74479 16.9336 9.29688  c
h
22.7949 13.0000 m
22.7949 6.78125 l
23.7480 6.78125 l
23.7480 7.71875 l
23.9876 7.28125 24.2090 6.99219 24.4121 6.85156  c
24.6152 6.71094 24.8418 6.64062 25.0918 6.64062  c
25.4460 6.64062 25.8053 6.75000 26.1699 6.96875  c
25.8105 7.95312 l
25.5501 7.79688 25.2949 7.71875 25.0449 7.71875  c
24.8053 7.71875 24.5944 7.78906 24.4121 7.92969  c
24.2298 8.07031 24.1022 8.26562 24.0293 8.51562  c
23.9043 8.89062 23.8418 9.29688 23.8418 9.73438  c
23.8418 13.0000 l
22.7949 13.0000 l
h
32.6875 13.0000 m
32.6875 9.35938 l
29.3750 4.40625 l
30.7656 4.40625 l
32.4531 7.00000 l
32.7656 7.47917 33.0573 7.96354 33.3281 8.45312  c
33.5885 8.00521 33.9010 7.50000 34.2656 6.93750  c
35.9375 4.40625 l
37.2500 4.40625 l
33.8281 9.35938 l
33.8281 13.0000 l
32.6875 13.0000 l
h
f
Q
Q
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
0.00000 0.00000 0.00000 RG
0 J
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
newpath
0.00000 0.00000 m
0.00000 224.000 l
261.000 224.000 l
261.000 0.00000 l
h
W
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
newpath
0.00000 0.00000 m
0.00000 224.000 l
261.000 224.000 l
261.000 0.00000 l
h
W
Q
end end restore showpage

%%Trailer
%%EOF
