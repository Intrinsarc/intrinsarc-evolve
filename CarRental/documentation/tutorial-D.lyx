#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{wrapfig}
\usepackage{graphicx}
\usepackage{color}

\definecolor{side}{rgb}{0.9,0.9,0.99}
\definecolor{outside}{rgb}{0.6,0.6,0.6}

\newcommand{\sidebar}[3]
{
  \begin{wrapfigure}{O}{#1\textwidth}
  \fcolorbox{outside}{side}{
    \begin{minipage}[t]{#1\columnwidth}
    \includegraphics[scale=0.07]{#2}
    #3
    \end{minipage}}
  \end{wrapfigure}
}
\newcommand{\idea}[2][0.5]
{
  \sidebar{#1}{./icons/tip}{#2}
}

\newcommand{\warning}[2][0.5]
{
  \sidebar{#1}{./icons/warn}{#2}
}

\newcommand{\highlight}[2][0.5]
{
  \sidebar{#1}{./icons/highlight}{#2}
}

\newcommand{\fsidebar}[3]
{
  \fcolorbox{outside}{side}{
    \begin{minipage}[t]{#1\columnwidth}
    \includegraphics[scale=0.07]{#2}
    #3
    \end{minipage}}
}
\newcommand{\fidea}[2][1.0]
{
  \fsidebar{#1}{./icons/tip}{#2}
}

\newcommand{\fwarning}[2][1.0]
{
  \fsidebar{#1}{./icons/warn}{#2}
}

\newcommand{\fhighlight}[2][1.0]
{
  \fsidebar{#1}{./icons/highlight}{#2}
}

\newcommand{\menu}[1]
{
  \fcolorbox{outside}{side}{#1}
}

\usepackage{chngcntr}
\counterwithout{figure}{section}
\renewcommand{\thefigure}{\thechapter.\arabic{figure}}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language english
\inputencoding auto
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family sfdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement h
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Tutorial D: 
\begin_inset CommandInset label
LatexCommand label
name "cha:Tutorial-D:-The"

\end_inset

The GWT / Hibernate Car Rental System
\end_layout

\begin_layout Standard
In this tutorial we will build a GWT ajax front-end for the car rental system,
 and a back-end service built on Hibernate and the H2 SQL database.
 To whet your appetite, figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Car-Rental"

\end_inset

 shows a picture of the GUI where one person has rented a car, and a further
 three cars are still available.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-car-rental"

\end_inset

 shows the corresponding entries in the database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/evolve-car-rental.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Car-Rental"

\end_inset

The Car Rental GWT front end
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/evolve-car-rental-db.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-car-rental"

\end_inset

The car rental database rows
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although we have deliberately kept this example small, it demonstrates convincin
gly that Evolve's component approach can mould to fit in with some fairly
 exotic technologies.
 In the case of GWT, the components will actually be running in the browser
 as GWT-translated Javascript.
 In the case of Hibernate, we will persist the 
\family typewriter
RentalCar
\family default
 composites using SQL.
 This can all be achieved without any changes to our approach and the full
 complement of techniques including components, state machines, evolution
 and resemblance are available in both environments.
\end_layout

\begin_layout Standard
This tutorial covers the 
\family typewriter
gwt
\family default
, 
\family typewriter
service interfaces
\family default
, 
\family typewriter
gwtgui
\family default
, 
\family typewriter
gwtservice
\family default
 and 
\family typewriter
hibernate
\family default
 strata from the example model.
 For reference, we repeat a picture of these strata in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-strata-used"

\end_inset

.
 Note that the only part of this tutorial that builds on the previous tutorials
 is the back end - the 
\family typewriter
gwtservice
\family default
 and 
\family typewriter
hibernate
\family default
 strata depend on the definitions of rental cars and their factories, as
 they work with and persist them.
 The front end does not use the car components.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/tutorial-strata.eps
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-strata-used"

\end_inset

The strata used in the tutorials
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Prerequisites for Setting Up and Running this Example
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fwarning{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Disclaimer: This chapter contains Eclipse-centric build and run instructions.
 We created the example in Eclipse using the Google GWT plugin.
 We apologise for the exclusive focus on a single IDE but we trust that
 users of other environments will be able to tweak the example to get it
 running also.
 We will look at rectifying this situation in the future to at least include
 an ant build script.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although the strata for this example are present in the 
\family typewriter
car-rental.evolve
\family default
 model, the Java files and libraries are not included with the standard
 Evolve distribution and must be downloaded separately.
 Visit the following site.
\end_layout

\begin_layout LyX-Code
http://intrinsarc.com/evolve/downloads
\end_layout

\begin_layout Standard
Download the 
\family typewriter
tutorial-d-files.zip
\family default
 file.
 This contains the 
\family typewriter
CarRentalGUI
\family default
 folder at the top level.
 Unzip this so that the contents are located under the 
\family typewriter
tutorial
\family default
 directory in the Evolve installation area.
 It should be in the same location as the 
\family typewriter
CarRental
\family default
 folder.
 This is shown in figure X.
\end_layout

\begin_layout Standard
dsxd
\end_layout

\begin_layout Standard
We tested the example using Eclipse Helios.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Creating the Back End: The Rental Car Service
\end_layout

\begin_layout Standard
In this section we explain how to create the Hibernate/H2 back end service
 for persisting, manipulating and retrieving rental car components.
 We first build a service which doesn't use persistence.
 We then evolve this to add Hibernate support and transactions.
\end_layout

\begin_layout Subsection
Creating the GWT Service Interface
\end_layout

\begin_layout Standard
Navigate into the 
\family typewriter
service interfaces
\family default
 stratum.
 You will see the 
\family typewriter
IRentalServiceAsync
\family default
 and 
\family typewriter
IRentalService
\family default
 interfaces, which describe the service interface(s) for our car rental
 system.
 These interfaces were actually created by the project wizard supplied by
 the Google GWT plugin when we made the project in Eclipse.
 We imported the interfaces into Evolve using the Bean Importer so that
 we could model with them.
\end_layout

\begin_layout Standard
As per GWT conventions, 
\family typewriter
IRentalServiceAsync
\family default
 is the asynchronous (ajax) interface to be used by the GWT front end.
 
\family typewriter
IRentalService
\family default
 is the interface that our server must support.
\end_layout

\begin_layout Standard
The methods on IRentalService show the calls implemented by the server.
\end_layout

\begin_layout LyX-Code
public interface IRentalService extends RemoteService
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
  void createRentalCar(String model);
\end_layout

\begin_layout LyX-Code
  void rent(int car, String renter);
\end_layout

\begin_layout LyX-Code
  void returnRental(int car);
\end_layout

\begin_layout LyX-Code
  String[] getCars();
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
The last call returns a string array where each line contains the car model
 and the name of the renter separated by a delimiter.
\end_layout

\begin_layout Subsection
Creating a Service Without Persistence
\end_layout

\begin_layout Standard
Navigate into the 
\family typewriter
gwtservice
\family default
 stratum.
 Here we have define a server which uses the previously defined 
\family typewriter
CarFactory
\family default
 (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Factories"

\end_inset

) factory component to dynamically create cars when the
\family typewriter
 createRentalCar()
\family default
 method is called.
 The 
\family typewriter
RentalServiceLogic
\family default
 leaf implements the logic of the server as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-CarRental-leaf"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/carrental-transient.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-CarRental-leaf"

\end_inset

The 
\family typewriter
RentalServiceLogic
\family default
 leaf implements the logic of the server
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code for the server lives in 
\family typewriter
RentalServiceLogic.java
\family default
 and has been deliberately kept simple.
 Below is the implementation of the 
\family typewriter
createRentalCar()
\family default
 method.
 Of particular interest is the use of the parameters to set the car model
 and purchase date.
\end_layout

\begin_layout LyX-Code
	public void createRentalCar(String model)
\end_layout

\begin_layout LyX-Code
    {
\end_layout

\begin_layout LyX-Code
      Map<String, Object> params = new HashMap<String, Object>();
\end_layout

\begin_layout LyX-Code
      params.put("model", model);
\end_layout

\begin_layout LyX-Code
      params.put("purchased", new Date());
\end_layout

\begin_layout LyX-Code
      create.create(params);
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout Standard
We then connect this up to the factory part via a composite, as per figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Connecting-up-to"

\end_inset

.
 Note that this provides the 
\family typewriter
IRentalService
\family default
 because we have exposed the 
\family typewriter
service
\family default
 port of the 
\family typewriter
RentalServiceLogic
\family default
 part.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/carrentalservice-transient.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Connecting-up-to"

\end_inset

Connecting up to a car factory
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As the GWT environment cannot use the Backbone interpreter, to allow our
 service to be run we generate a full implementation of the 
\family typewriter
CarRentalService
\family default
 component
\begin_inset Newline newline
\end_inset

(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Backbone
\begin_inset Formula $\vartriangleright$
\end_inset

Generate full implementation
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

) which creates the 
\family typewriter
CarRentalServiceFactory.java
\family default
 file.
\end_layout

\begin_layout Standard
We now need to 
\begin_inset Quotes eld
\end_inset

plumb
\begin_inset Quotes erd
\end_inset

 this into the GWT generated skeleton for the server.
 When we created the Eclipse project, the GWT project wizard created the
 
\family typewriter
RentalServiceImpl.java
\family default
 class.
 We modify it as follows to instantiate the 
\family typewriter
CarRentalService
\family default
 component and delegate to it.
\end_layout

\begin_layout LyX-Code
public class RentalServiceImpl extends RemoteServiceServlet
\end_layout

\begin_layout LyX-Code
  implements IRentalService
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
  private IRentalService service =
\end_layout

\begin_layout LyX-Code
    new CarRentalServiceFactory().initialize(null, null).
\end_layout

\begin_layout LyX-Code
      getService_Provided();
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
  public void createRentalCar(String model)
\end_layout

\begin_layout LyX-Code
  {
\end_layout

\begin_layout LyX-Code
    service.createRentalCar(model);
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
  ...
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
That's it - we now have a rental service created in Evolve that we can run.
 Note that the cars created by this service are not persisted - they reside
 only in memory and will be destroyed when the application completes.
\end_layout

\begin_layout Standard
See section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Running-the-Example"

\end_inset

 for details on how to run the complete application.
\end_layout

\begin_layout Subsection
Creating a Service With Persistence
\end_layout

\begin_layout Standard
Navigate into the 
\family typewriter
hibernate
\family default
 stratum.
 In this example, we amend the previous components to use Hibernate to persist
 the cars into a SQL database.
 
\end_layout

\begin_layout Standard
To accomplish this, we simply evolve the 
\family typewriter
RentalServiceLogic
\family default
 leaf, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolving-CarRental-to"

\end_inset

.
 We have renamed the leaf to 
\family typewriter
HibernateRentalServiceLogic
\family default
 as part of the evolution and set the implementation class to 
\family typewriter
com.intrinsarc.carrentalgui.server.HibernateRentalServiceLogic
\family default
.
 We have also turned off implementation inheritance, and enabled lifecycle
 callbacks.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/carrental-persistent.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolving-CarRental-to"

\end_inset

Evolving CarRental to add Hibernate support
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Examining the 
\family typewriter
HibernateRentalServiceLogic.java
\family default
 class we see the following code used for initialization.
\end_layout

\begin_layout LyX-Code
private Session session;
\end_layout

\begin_layout LyX-Code
public void afterInit()
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
  SessionFactory sessionFactory =
\end_layout

\begin_layout LyX-Code
    new Configuration().configure().buildSessionFactory();
\end_layout

\begin_layout LyX-Code
  session = sessionFactory.openSession();
\end_layout

\begin_layout LyX-Code
  // get all the existing rental cars
\end_layout

\begin_layout LyX-Code
  Transaction t = session.beginTransaction();
\end_layout

\begin_layout LyX-Code
  cars.addAll(
\end_layout

\begin_layout LyX-Code
    session.createQuery("from RentalCarDetails").list());
\end_layout

\begin_layout LyX-Code
  System.out.println("Found " + cars.size() +
\end_layout

\begin_layout LyX-Code
    " existing car(s) in database");
\end_layout

\begin_layout LyX-Code
  t.commit();
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
When the service starts up, the 
\family typewriter
afterInit()
\family default
 method is called for the lifecycle callback.
 This method establishes a Hibernate session (using the connection settings
 in 
\family typewriter
hibernate.cfg.xml
\family default
) and uses it to find all existing cars in the database.
 It then adds these to its 
\family typewriter
cars
\family default
 port.
 In other words, this restores the full state of the server from the database
 at startup time.
 Any further created cars will also be added to this port.
\end_layout

\begin_layout Standard
The logic for creating a new car is a simple variation on the non-persistent
 version.
\end_layout

\begin_layout LyX-Code
public void createRentalCar(String model)
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
  
\series bold
Transaction t = session.beginTransaction();
\end_layout

\begin_layout LyX-Code
  Map<String, Object> params = new HashMap<String, Object>();
\end_layout

\begin_layout LyX-Code
  params.put("model", model);
\end_layout

\begin_layout LyX-Code
  params.put("purchased", new Date());
\end_layout

\begin_layout LyX-Code
  create.create(params);
\end_layout

\begin_layout LyX-Code
  
\series bold
session.save(cars.get(cars.size() - 1));
\end_layout

\begin_layout LyX-Code

\series bold
  t.commit();
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
It's as simple as that.
 Note that if we look at the 
\family typewriter
CarRentalService
\family default
 composite (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Connecting-up-to"

\end_inset

) from this perspective, we can see that the evolution of 
\family typewriter
CarRental
\family default
 has automatically affected this as we would expect, shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:CarRentalService-from-the"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/carrentalservice-persistent.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout

\family typewriter
\begin_inset CommandInset label
LatexCommand label
name "fig:CarRentalService-from-the"

\end_inset

CarRentalService
\family default
 from the 
\family typewriter
hibernate
\family default
 perspective
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Mapping the Components Using Hibernate
\end_layout

\begin_layout Standard
We are persisting 
\family typewriter
RentalCar
\family default
 parts, each of which are made up of a 
\family typewriter
RentalCarDetails
\family default
 instance connected to a 
\family typewriter
RenterDetails
\family default
 instance.
 This can be seen by looking at the 
\family typewriter
RentalCar
\family default
 definition (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-RentalCar-composite"

\end_inset

).
 As these are instances of beans, persisting them in Hibernate is trivial.
\end_layout

\begin_layout Standard
The 
\family typewriter
carrental.hbm.xml
\family default
 Hibernate mapping file is shown below.
 We have used field-level access in order to avoid the need for extra setters,
 and the renter's name from 
\family typewriter
RenterDetails
\family default
 is included in the same table as the car details.
\end_layout

\begin_layout LyX-Code
<hibernate-mapping default-access="field">
\end_layout

\begin_layout LyX-Code
<class name="com.intrinsarc.base.RentalCarDetails" table="CARS">
\end_layout

\begin_layout LyX-Code
  <id name="model" type="java.lang.String" column="MODEL" />
\end_layout

\begin_layout LyX-Code
  <property name="purchased" type="java.util.Date" column="PURCHASED" />
\end_layout

\begin_layout LyX-Code
  <component name="renter" class="com.intrinsarc.base.RenterDetails">
\end_layout

\begin_layout LyX-Code
    <property name="renterName" type="java.lang.String" column="RENTER" />
\end_layout

\begin_layout LyX-Code
  </component>
\end_layout

\begin_layout LyX-Code
</class>
\end_layout

\begin_layout LyX-Code
</hibernate-mapping>
\end_layout

\begin_layout Standard
The DDL for creating the database is in 
\family typewriter
schema.ddl
\family default
 and is similarly obvious.
\end_layout

\begin_layout LyX-Code
CREATE TABLE CARRENTAL.CARS (MODEL text, PURCHASED date, RENTER text);
\end_layout

\begin_layout Standard
If you are running the example, don't forget to create the table in H2 first.
\end_layout

\begin_layout Subsection
Alternating Between the Persistent and Non-Persistent Variants
\end_layout

\begin_layout Standard
Since the 
\family typewriter
hibernate
\family default
 stratum evolves 
\family typewriter
RentalServiceLogic
\family default
, when we generate the full implementation we will overwrite the same 
\family typewriter
CarRentalServiceFactory.java
\family default
 file that the 
\family typewriter
gwtservice
\family default
 stratum also writes to.
 The stratum we last used to generate a full implementation will be the
 one used when we run our GWT example.
\end_layout

\begin_layout Standard
This allows us to quickly switch between the persistent and non-persistent
 implementations when testing.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Creating the User Interface
\end_layout

\begin_layout Standard
In this section, we show how to import the GWT widgets as Evolve leaves,
 and then use these to construct our user interface.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Importing-the-GWT"

\end_inset

Importing the GWT Widgets into Evolve
\end_layout

\begin_layout Standard
Before using GWT to create our interface, we must make the GWT widgets available
 for use within Evolve.
 As per Java conventions, they are packaged as JavaBean-like classes and
 we can use the Bean Importer tool to import these into Evolve as leaves.
\end_layout

\begin_layout Standard
We now describe the steps we took to import the GWT widgets into the tutorial
 model.
\end_layout

\begin_layout Standard
First, we created the 
\family typewriter
gwt
\family default
 stratum to import the GWT widgets into.
 We set the 
\family typewriter
bb-classpath
\family default
 stereotype property to point to both the 
\family typewriter
gwt-user.jar
\family default
 and the JDK 
\family typewriter
rt.jar
\family default
 (needed for some primitives) and we started up the importer.
 We selected the GWT widget package in the top left tree of the importer
 (
\family typewriter
com.google.gwt.user.client.ui
\family default
), selected all the beans that were found, and then clicked 
\begin_inset Quotes eld
\end_inset

Add to import list
\begin_inset Quotes erd
\end_inset

.
 The result is figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Importing-the-GWT"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/gwt-import.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Importing-the-GWT"

\end_inset

Importing the GWT widgets
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fhighlight{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The importer sometimes confuses a bean for a primitive and vice versa.
 In the former situation, this generally happens because the bean has no
 explicit set or get methods.
 To correct this, right-click on the item in the browser's lower left tree
 and select
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Toggle bean/primitive
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can see, for instance, that the importer decided that the 
\family typewriter
CheckBox
\family default
 bean could be turned into a leaf.
 After seeing that there were no errors, we then clicked 
\begin_inset Quotes eld
\end_inset

Import all
\begin_inset Quotes erd
\end_inset

 and imported the beans into the stratum.
 In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-subject-browser"

\end_inset

 we can see the subject browser showing the imported components.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/browser-on-checkbox.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-subject-browser"

\end_inset

The subject browser showing the imported components
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fhighlight{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you are going to try the above import on the existing 
\family typewriter
gwt
\family default
 stratum, ensure that you make that stratum writeable first.
 The example model has marked this stratum read only.
 Right click on the stratum and uncheck the 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Read only
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 option.
 Notice also that because we have already imported the GWT components into
 this stratum, you will be presented with refresh options.
 If you want to start from the beginning, make another stratum, make it
 depend on the 
\family typewriter
backbone
\family default
 stratum, and copy over the 
\family typewriter
bb-classpath
\family default
 property from the 
\family typewriter
gwt
\family default
 stratum.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creating Views of the Imported Components
\end_layout

\begin_layout Standard
We then navigated into the 
\family typewriter
gwt
\family default
 stratum.
 Because we hadn't yet made any views of the components, the diagram was
 empty.
\end_layout

\begin_layout Standard
To create views, we used the referencing technique first shown in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Subjects-and-Views"

\end_inset

.
 We created a new component on the diagram, typed the first few characters
 of 
\family typewriter
CheckBox
\family default
, pressed
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

tab
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

and then selected 
\family typewriter
CheckBox
\family default
 from the list.
 We now had a view of the imported component.
 Note that no ports or attributes were showing at this point.
\end_layout

\begin_layout Standard
Because imported components can be very complex with literally hundreds
 of ports and attributes, by default the first ever view of a component
 will show none of these.
 To make them visible, right click on the component and choose
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Show specific attributes
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

or
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Show specific ports
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

.
 If you want to see all ports and attributes, choose the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Show hidden
\begin_inset Formula $\vartriangleright$
\end_inset

Attributes
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

or the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Show hidden
\begin_inset Formula $\vartriangleright$
\end_inset

Ports
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

options.
\end_layout

\begin_layout Subsubsection
Legacy versus Non-Legacy Beans
\end_layout

\begin_layout Standard
When a bean is imported, if it does not already exist in the model then
 it is imported as a 
\begin_inset Quotes eld
\end_inset

legacy
\begin_inset Quotes erd
\end_inset

 bean.
 To see what this means, consider that most existing JavaBeans do not implement
 an interface, but instead rely on direct access to the class.
 The listing below shows the form of most beans in existing libraries.
\end_layout

\begin_layout LyX-Code
public class Bean
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
  private int attribute;
\end_layout

\begin_layout LyX-Code
  ...
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
public class NextBean
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
  private Bean required;
\end_layout

\begin_layout LyX-Code
  ...
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
This is not the in the interface-centric paradigm that Evolve uses for compoents.
 In contrast to the conventional JavaBean approach, leaves generated from
 Evolve will always implement interfaces, and no leaf will reference another
 leaf class directly.
\end_layout

\begin_layout Standard
To fit existing beans into the Evolve approach, when a bean is imported
 it is marked as legacy and a synthetic interface is created.
 The implementation class of this interface is set to the same class as
 the bean itself.
 This lets us pretend that the bean is a conventional leaf.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Legacy-beans-have"

\end_inset

 shows what the beans from the listing above would look like after import.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/legacy-beans.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Legacy-beans-have"

\end_inset

Legacy beans have a synthetic interface to avoid directly coupling to classes
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
All of the GWT widgets will be organised in this way on import.
\end_layout

\begin_layout Subsection
Connecting Up Widgets
\end_layout

\begin_layout Standard
We can now use the GWT widgets to construct our GUI.
 Navigate into the 
\family typewriter
gwtgui
\family default
 stratum.
 You will see three packages.
 Navigate into the 
\family typewriter
addcar widget
\family default
 package and you will see the component shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-AddCarWidget-composite"

\end_inset

 below.
 This defines the 
\begin_inset Quotes eld
\end_inset

Add new car:
\begin_inset Quotes erd
\end_inset

 widget shown at the top of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Car-Rental"

\end_inset

.
 It allows a new rental car to be entered into the system.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/addcarwidget.eps
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-AddCarWidget-composite"

\end_inset

The 
\family typewriter
AddCarWidget
\family default
 composite
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The widget itself is pretty simple.
 It uses a horizontal panel to bind together a label (
\begin_inset Quotes eld
\end_inset

Add new car:
\begin_inset Quotes erd
\end_inset

) and the textbox for entering the car's information into.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fhighlight{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Interestingly, we have managed to define 
\family typewriter
AddCarWidget
\family default
 without any GWT-specific support for composite widgets.
 We have simply used normal Evolve practices.
 This widget can now be used as a part in a larger design, as we shall soon
 see.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now consider building a widget showing a single car and its rental status,
 with logic to transition between rented and available.
 Navigate into the 
\family typewriter
rentallogic & widget
\family default
 package.
 Here we have defined another composite widget as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-widget-for"

\end_inset

.
 Multiple of these are shown in the lower part of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Car-Rental"

\end_inset

, one per car.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/carrentalwidget.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-widget-for"

\end_inset

The widget for viewing and renting a car
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
CarRentalWidget
\family default
 is defined in a similar way to 
\family typewriter
AddCarWidget
\family default
, with the small addition of a 
\family typewriter
RentalLogic
\family default
 part which adds some logic handling when the textbox is entered or the
 button clicked.
 In this case a horizontal panel is used to structure two labels, a textbox
 and a button.
\end_layout

\begin_layout Standard
Note the 
\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset

 in the value of the slot in the second label.
 This is useful when values are quite long, and indicates that the value
 used will be taken from the 
\family typewriter
actual-slot-value
\family default
 stereotype property of the slot.
 This property is set to 
\begin_inset Quotes eld
\end_inset

Enter renter:
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/rentallogic.eps
	scale 47

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-component-for"

\end_inset

The component for handling the rental logic
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
RentalLogic
\family default
 leaf, shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-component-for"

\end_inset

, handles the logic for when a car is rented out and when it is returned
 from rental.
 In both cases, a callback from a GWT widget results in a call to the 
\family typewriter
IRentalServicesAsync
\family default
 GWT service interface.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fhighlight{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As the widgets we are building are simply components, we can evolve and
 reuse them to good effect.
 For instance, we might want to keep the GUI structure (the widgets) separate
 from the business logic.
 In that case, we could have defined the 
\family typewriter
CarRentalWidget
\family default
 without the 
\family typewriter
RentalLogic
\family default
 part and used evolution or resemblance to add in the logic parts later.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Putting the User Interface Together
\end_layout

\begin_layout Standard
Navigate to the 
\family typewriter
car rental widget
\family default
 package.
 Here we connect up the widgets to create the final GUI as shown in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Bringing-the-full"

\end_inset

.
 Note that we use a 
\family typewriter
CarRentalWidgetFactory
\family default
 part so that a separate 
\family typewriter
CarRentalWidget
\family default
 part can be created for each car.
 Finally, we connect up a 
\family typewriter
GUILogic
\family default
 part which has a small amount of logic to control the population of these
 widgets.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/carrentalform.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Bringing-the-full"

\end_inset

Bringing the full UI together
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Making the Service Available
\end_layout

\begin_layout Standard
The 
\family typewriter
RentalService
\family default
 leaf is simply a shell component with a hyperport, designed to make the
 
\family typewriter
IRentalServiceAsync
\family default
 GWT-provided service available to the entire GUI structure.
 Look at 
\family typewriter
RentalService.java
\family default
 to see how trivial this is.
\end_layout

\begin_layout Subsubsection*
Generating the Full Implementation
\end_layout

\begin_layout Standard
We cannot run the GWT system inside Evolve - it must be run in hosted mode
 as provided by the GWT toolkit.
 To allow this, we generate the full code for the stratum
\begin_inset Newline newline
\end_inset

(
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Backbone
\begin_inset Formula $\vartriangleright$
\end_inset

Generate full implementation
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

) which creates the 
\family typewriter
CarRentalFormFactory.java
\family default
 class.
 As this does not provide 
\family typewriter
IRun
\family default
, no 
\family typewriter
main()
\family default
 method will be generated.
 We instead add the instantiation of our factory to the GWT-created class
 
\family typewriter
CarRentalGUI
\family default
, as below.
\end_layout

\begin_layout LyX-Code
public class CarRentalGUI implements EntryPoint
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
  public void onModuleLoad()
\end_layout

\begin_layout LyX-Code
  {
\end_layout

\begin_layout LyX-Code
    CarRentalFormFactory form =
\end_layout

\begin_layout LyX-Code
        new CarRentalFormFactory().initialize(null, null);
\end_layout

\begin_layout LyX-Code
    RootPanel.get("application").add(form.getPanel_Provided());
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
} 
\end_layout

\begin_layout Standard
That completes the integration with GWT for the front-end.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
highlight{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Although we used Evolve to model every part of this example, including the
 graphical client, it is sometimes preferable to use a combination of Evolve
 components and custom Java code for certain domains.
 To use this approach simply generate less fine-grained components and write
 the component logic using conventional object-oriented code.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Running-the-Example"

\end_inset

Running the Example
\end_layout

\begin_layout Standard
To run the front and back ends in Eclipse, right-click on the project in
 the project explorer and select the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Run as
\begin_inset Formula $\vartriangleright$
\end_inset

Web application
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

menu option provided by the GWT plugin.
 The client and server will start up.
\end_layout

\begin_layout Standard
Type in a car name and press
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

enter
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

to add a new car.
 Enter the name of a renter and press return to rent a car.
 Press the 
\begin_inset Quotes eld
\end_inset

return
\begin_inset Quotes erd
\end_inset

 button to return a car to the available pool.
\end_layout

\begin_layout Subsection
Quick Turnaround
\end_layout

\begin_layout Standard
Because GWT translates the generated client-side Java code directly into
 Javascript, without requiring a recompile, turnarounds to changes in the
 GUI are extremely fast.
 Make the change to the GUI components, regenerate the full implementation,
 and press
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

F5
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

in the browser to refresh the view.
\end_layout

\begin_layout Standard
Using this approach we find that the turnaround time for a change is often
 under 5 seconds.
\end_layout

\end_body
\end_document
