#LyX 1.6.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{wrapfig}
\usepackage{graphicx}
\usepackage{color}

\definecolor{side}{rgb}{0.9,0.9,0.99}
\definecolor{outside}{rgb}{0.6,0.6,0.6}

\newcommand{\sidebar}[3]
{
  \begin{wrapfigure}{O}{#1\textwidth}
  \fcolorbox{outside}{side}{
    \begin{minipage}[t]{#1\columnwidth}
    \includegraphics[scale=0.07]{#2}
    #3
    \end{minipage}}
  \end{wrapfigure}
}
\newcommand{\idea}[2][0.5]
{
  \sidebar{#1}{./icons/tip}{#2}
}

\newcommand{\warning}[2][0.5]
{
  \sidebar{#1}{./icons/warn}{#2}
}

\newcommand{\highlight}[2][0.5]
{
  \sidebar{#1}{./icons/highlight}{#2}
}

\newcommand{\fsidebar}[3]
{
  \fcolorbox{outside}{side}{
    \begin{minipage}[t]{#1\columnwidth}
    \includegraphics[scale=0.07]{#2}
    #3
    \end{minipage}}
}
\newcommand{\fidea}[2][1.0]
{
  \fsidebar{#1}{./icons/tip}{#2}
}

\newcommand{\fwarning}[2][1.0]
{
  \fsidebar{#1}{./icons/warn}{#2}
}

\newcommand{\fhighlight}[2][1.0]
{
  \fsidebar{#1}{./icons/highlight}{#2}
}

\newcommand{\menu}[1]
{
  \fcolorbox{outside}{side}{#1}
}

\usepackage{chngcntr}
\counterwithout{figure}{section}
\renewcommand{\thefigure}{\thechapter.\arabic{figure}}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\language english
\inputencoding auto
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family sfdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement h
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Tutorial-A:-Creating"

\end_inset

Tutorial A: Creating and Composing Components
\end_layout

\begin_layout Standard
In this tutorial, we will create a component to hold information about a
 car and another for representing renters.
 We will then connect instances of these into a composite component to represent
 a rental car, and execute this as a program.
\end_layout

\begin_layout Standard
Along the way we will discover:
\end_layout

\begin_layout Itemize
How to create leaf components and tie each of them to an implementation
 class.
\end_layout

\begin_layout Itemize
How to generate Java skeleton code for a leaf component, and regenerate
 without overwriting code added outside of Evolve.
\end_layout

\begin_layout Itemize
How to use the Bean Importer to refresh a leaf if its fundamental definition
 is altered outside of Evolve.
\end_layout

\begin_layout Itemize
How to connect up parts to form a composite component.
\end_layout

\begin_layout Itemize
Using slots to configure the state of parts.
\end_layout

\begin_layout Itemize
How to execute a Backbone program inside Evolve.
\end_layout

\begin_layout Itemize
How to run a Backbone program independently from Evolve.
\end_layout

\begin_layout Itemize
How to generate a program from a model that doesn't require Backbone.
\end_layout

\begin_layout Standard
This is a lot of functionality to get through.
 Bear with me, however, and you'll soon be creating your own components
 and composing with ease.
\end_layout

\begin_layout Standard
This tutorial assumes you have loaded the example model (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Loading-and-Navigating"

\end_inset

) and have navigated into the 
\family typewriter
base
\family default
 stratum by middle-clicking on it.
 You should see the model shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-base-model,"

\end_inset

 on your screen.
 Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Running-A-Backbone"

\end_inset

 has already described how to run this model and you should have seen the
 output as per figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Backbone-runner"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/base.eps
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-base-model,"

\end_inset

The base model, defining rental car components
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Defining the Leaves
\end_layout

\begin_layout Standard
In this section we will define the leaf components, which each represent
 a Java class.
 Shortly after that we will connect instances of them together to make a
 composite component which we can execute.
\end_layout

\begin_layout Standard
The two leaves we are primarily interested in are 
\family typewriter
RentalCarDetails
\family default
 which holds the car details, and 
\family typewriter
RenterDetails
\family default
 while holds information on the renter.
\end_layout

\begin_layout Standard
Let us examine 
\family typewriter
RentalCarDetails
\family default
, shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-RentalCarDetails-leaf"

\end_inset

, in more detail.
 It has two attributes, 
\family typewriter
model
\family default
 and 
\family typewriter
purchased
\family default
, which hold the model of the car and the date it was purchased.
 It also has a port 
\family typewriter
details
\family default
 which provides the interface 
\family typewriter
IRentalCarDetails
\family default
 allowing the data held to be accessed.
 The port 
\family typewriter
renter
\family default
 requires the 
\family typewriter
IRenterDetails
\family default
 interface, and through this the renter details can be accessed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/rentalcardetails.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-RentalCarDetails-leaf"

\end_inset

The 
\family typewriter
RentalCarDetails
\family default
 leaf
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fidea{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can see that this component is a leaf because the icon in the top right
 corner has filled-in legs.
 A composite component has white legs.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
RenterDetails
\family default
 leaf is defined similarly, in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-RenterDetails-leaf"

\end_inset

.
 This provides the 
\family typewriter
IRenterDetails
\family default
 interface, which allows it to be connected up to 
\family typewriter
RentalCarDetails
\family default
 which requires the same interface.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/renterdetails.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-RenterDetails-leaf"

\end_inset

The RenterDetails leaf
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
How We Created the RentalCarDetails Leaf
\end_layout

\begin_layout Standard
The leaf component was created by choosing the 
\begin_inset Quotes eld
\end_inset

Component
\begin_inset Quotes erd
\end_inset

 tool from the palette on the left, and applying it to the diagram.
 An alternative is to simply press the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

space
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

key over the diagram, giving a choice of tools appropriate for the context.
 The attributes were created by pressing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

space
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

in the body of the component and selecting the attribute option.
\end_layout

\begin_layout Standard
The ports were created by pressing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

space
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

closer to the edge of the component.
 The interfaces (both provided and required) were created by selecting the
 interface option and creating the interfaces near the component.
\end_layout

\begin_layout Standard
The provided port line was created by pressing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

space
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

on the port.
 The provided link was then dragged over to the interface.
 The required port line was created in a similar fashion.
\end_layout

\begin_layout Subsubsection*
The Implementation Class of a Leaf Component or Interface
\end_layout

\begin_layout Standard
The implementation class used for a leaf is the Java package that is set
 for the stratum where the component is defined, along with the name of
 the class.
 This is the Java class that will be generated for the leaf.
\end_layout

\begin_layout Standard
To set the package, go back to the top level diagram and select the stratum.
 You will see an icon in the top left corner.
 Click this and enter in the desired package name, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Setting-the-Java"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/setting-package.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Setting-the-Java"

\end_inset

Setting the Java package of a stratum
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now go back into the diagram and select the 
\family typewriter
RentalCarDetails
\family default
 leaf.
 You will see an icon at the top left, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Viewing-the-implementation"

\end_inset

.
 Click this and it will show you the full class name.
 This is the Java implementation class that the leaf is associated with.
 To change this, either change the package of the stratum, or the name of
 the class.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/setting-class.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Viewing-the-implementation"

\end_inset

Viewing the implementation class of a leaf
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Interfaces use the same approach.
\end_layout

\begin_layout Subsubsection*
Forcing a Different Implementation Class
\end_layout

\begin_layout Standard
It is possible to force a different implementation class for a leaf.
 To do this, select the leaf and invoke the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Object
\begin_inset Formula $\vartriangleright$
\end_inset

Browse element
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

menu option or press
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

F2
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

.
 You should see a subject browser.
 Click on the 
\begin_inset Quotes eld
\end_inset

Stereotypes
\begin_inset Quotes erd
\end_inset

 tab and you will see a dialog like figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Entering-in-the"

\end_inset

 below.
 Enter the full class name in the 
\family typewriter
force-implementation
\family default
 field
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In UML2 terminology, the forced implementation class of a leaf component
 is held on the stereotype.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/entering-implementation.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Entering-in-the"

\end_inset

Setting the implementation class for a leaf
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Interfaces can the same approach to force the implementation interface.
\end_layout

\begin_layout Section
The RentalCar Composite
\end_layout

\begin_layout Standard
We have the 
\family typewriter
RentalCarDetails
\family default
 leaf which holds information about a car, and the 
\family typewriter
RenterDetails
\family default
 leaf which holds information about a renter.
 Together these hold the full set of details for a rental car, but we would
 like to treat these as a single unit rather than two separate entities.
 A composite component allows us to do just this.
\end_layout

\begin_layout Standard
So, we now create a 
\family typewriter
RentalCar
\family default
 composite that contains a 
\family typewriter
RentalCarDetails
\family default
 part and a 
\family typewriter
RenterDetails
\family default
 part.
 We connect the two parts together via their compatible interfaces, and
 add attributes to the composite for the state we wish to set.
 We then create slots in the 
\family typewriter
RentalCarDetails
\family default
 part which bind to the attributes.
 In this way, we can set the state at the composite level and have it propagate
 into the parts - in effect we can now ignore the fact that the composite
 is made up of two parts.
 This is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-RentalCar-composite"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/rentalcar.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-RentalCar-composite"

\end_inset

The RentalCar composite component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
How We Created the Composite
\end_layout

\begin_layout Standard
The composite component was created by choosing the 
\begin_inset Quotes eld
\end_inset

Component
\begin_inset Quotes erd
\end_inset

 tool from the palette on the left, and applying it to the diagram.
 The ports and attributes were created in the same way as those for the
 leaf - by pressing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

space
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

on or near the edge of the component, or by explicitly choosing tools from
 the palette.
\end_layout

\begin_layout Standard
The parts were created by resizing the component to be a bit larger, and
 pressing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

space
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

in the middle of the component.
 The 
\begin_inset Quotes eld
\end_inset

Part
\begin_inset Quotes erd
\end_inset

 menu item was then chosen, creating an empty part inside the component.
 If you try this you will notice that the text inside the part is simply
 a colon 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

.
 Select the part and type 
\family typewriter
partA: RentalCarDetails
\family default
 for instance.
 The first section is the name, followed by a colon and then next comes
 the type.
\end_layout

\begin_layout Standard
Several things should be noted when entering a part.
 The first is that the colon is very important as it separates the name
 and type.
 Also, the name can be empty but the type cannot.
 Finally, note that it is not necessary to press
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

tab
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

to select the type - Evolve will find the existing component with the entered
 type name.
\end_layout

\begin_layout Standard
To create the connectors, press
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

space
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

over the start port, select 
\begin_inset Quotes eld
\end_inset

Connector
\begin_inset Quotes erd
\end_inset

 and then click on the end port.
\end_layout

\begin_layout Standard
It is never necessary to specify the required and provided interfaces of
 ports on a composite.
 These are determined automatically by a powerful inference algorithm that
 takes into account the internal connections in the component.
 It also understands interface inheritance.
 Inferred interfaces have a dotted line around them.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
fhighlight{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you want to hide connectors to a port, middle click on that port.
 Middle click again to re-show the connectors.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Making the Example Runnable
\end_layout

\begin_layout Standard
To make our small example runnable, we require the component equivalent
 of a 
\family typewriter
main()
\family default
 method.
 This is provided by the 
\family typewriter
IRun
\family default
 interface, which has an 
\family typewriter
void run(String args[])
\family default
 method.
 We create a small runner leaf as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-runner-component"

\end_inset

.
 Note that this has an indexed port called 
\family typewriter
cars
\family default
 with a multiplicity of 
\family typewriter
[0..*]
\family default
.
 This will turn into 
\family typewriter
List<IRentalCarDetails>
\family default
 in the generated bean, with the appropriate 
\family typewriter
addCar(), setCar()
\family default
 and 
\family typewriter
getCars()
\family default
 methods.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/carsexamplerunner.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-runner-component"

\end_inset

The runner component
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

We can now configure up the full program.
 We create the 
\family typewriter
CarsExample
\family default
 composite (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-CarsExample-composite"

\end_inset

), which connects up a 
\family typewriter
CarsExampleRunner
\family default
 part, along with two rental cars: a sports car and a compact car.
 We use slot values to set the attributes of the parts and these propagate
 all the way down into the leaf parts.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated/carsexample.eps
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-CarsExample-composite"

\end_inset

The CarsExample composite
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fhighlight{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The types of attributes are known as 
\begin_inset Quotes eld
\end_inset

primitive types
\begin_inset Quotes erd
\end_inset

.
 These can be created using the 
\begin_inset Quotes eld
\end_inset

Primitive type
\begin_inset Quotes erd
\end_inset

 tool in the component focus.
 When a slot, such as 
\family typewriter
model
\family default
 is set in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-CarsExample-composite"

\end_inset

, the literal string will be assigned directly to the attribute.
 In the case of a set of parameters, such as 
\family typewriter
(109, 5, 5)
\family default
 for the 
\family typewriter
purchased
\family default
 attribute, a suitable constructor will be found for the primitive type.
 In this case, the 
\family typewriter
java.util.Date(int, int, int)
\family default
 will be called at runtime.
 Other possible literals are 
\family typewriter
default
\family default
 (the default value for the type) or 
\family typewriter
null
\family default
.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Indexed Connectors
\end_layout

\begin_layout Standard
In figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-CarsExample-composite"

\end_inset

, the connectors used indices of 
\family typewriter
[a]
\family default
 and 
\family typewriter
[b]
\family default
 to connect to the 
\family typewriter
cars
\family default
 indexed port.
 When connecting to such a port, indices allow us to specify an ordering.
 The indices can be alphabetical, in which case lexical ordering is used
 (i.e.
 a before b), or alternatively integers can be used.
\end_layout

\begin_layout Standard
When using integers, the actual integer index will be used to make the connectio
n.
 On the other hand, alphabetical indices just order the connections.
 Alphabetical indices are preferred over integers, as this allows a resembling
 or evolving definition to always insert an index in between existing indices
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Evolve and Backbone come from research into highly extensible systems, and
 alphabetical indices play a large part in this approach.
\end_layout

\end_inset

.
 We will see this used in the next chapter.
 In our example, an example of an index that comes between 
\family typewriter
[a]
\family default
 and 
\family typewriter
[b]
\family default
 is 
\family typewriter
[ab]
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fidea{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If no index is provided, connections happen in any order.
 It is possible to force the use of indices by marking a port as ordered
 through the subject browser.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Generating Code
\end_layout

\begin_layout Standard
Evolve generates Java code for leaves and interfaces, and Backbone definitions
 for composites.
 This section discusses how this works and how to set the options.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Checking-the-Model"

\end_inset

Checking the Model
\end_layout

\begin_layout Standard
Before any code can be generated, the model must be checked for errors.
 To do this for the current stratum, press
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

F8
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

or invoke the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Checking
\begin_inset Formula $\vartriangleright$
\end_inset

Check current stratum
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

menu option.
 All the elements in the stratum will be checked for correctness according
 to a large set of rules governing compatible interfaces etc.
 This is a bit like the component equivalent of the checks that a compiler
 performs before compiling a program in Java or C++.
\end_layout

\begin_layout Standard
If you have an error, such as forgetting to set the implementation class
 of a leaf, the offending element will be flagged with a small red cross.
 Hover over this, and you will see the error described in more detail, as
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Errors-are-shown"

\end_inset

.
 If you bring up the repository browser on the element in question, you
 can click on the 
\begin_inset Quotes eld
\end_inset

Errors
\begin_inset Quotes erd
\end_inset

 tab to see the location and error description.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/errors.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Errors-are-shown"

\end_inset

Errors are shown on the diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fhighlight{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The entire system can be checked by pressing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

shift F8
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

or by invoking the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Checking
\begin_inset Formula $\vartriangleright$
\end_inset

Check everything
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

menu option.
 This is advanced usage which will be discussed in a later tutorial.
 It checks all possible strata combinations for any errors.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sec:Generating-JavaBean-and"

\end_inset

Generating Java and Backbone Code
\end_layout

\begin_layout Standard
Assuming the model is error free, we can now generate Java code for the
 leaves and Backbone definitions for the composite components.
 First, we must ensure that the stratum code generation parameters are correctly
 set.
 Bring up the browser for the 
\family typewriter
base
\family default
 stratum itself.
 Select the stereotype tab, and you should see something similar to figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-code-generation"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/base-stereotype.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-code-generation"

\end_inset

The code generation options for the 
\family typewriter
base
\family default
 stratum
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The various fields control how code generation and reverse engineering for
 the stratum will proceed.
 The relevant fields are as follows.
\end_layout

\begin_layout Itemize

\family typewriter
bb-java-folder
\family default

\begin_inset Newline newline
\end_inset

Java code will be written into packages, starting with this as the source
 folder.
 Recall that back in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Setting-Up-The"

\end_inset

, we defined the variable 
\family typewriter
CARS
\family default
 to point to the tutorial directory.
\end_layout

\begin_layout Itemize

\family typewriter
bb-java-suppress
\family default

\begin_inset Newline newline
\end_inset

If this is ticked, no Java code will be generated for the stratum even if
 the generation phase is invoked.
\end_layout

\begin_layout Itemize

\family typewriter
bb-classpath
\family default

\begin_inset Newline newline
\end_inset

This is the classpath used to find class and jar files for importing beans
 into Evolve.
 Separate any items by a space, and use quotes for classpath entries with
 spaces.
 This should be set to be the corresponding 
\begin_inset Quotes eld
\end_inset

bin
\begin_inset Quotes erd
\end_inset

 directory for the 
\begin_inset Quotes eld
\end_inset

source
\begin_inset Quotes erd
\end_inset

 directory 
\family typewriter
bb-java-folder
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
bb-source-folder
\family default

\begin_inset Newline newline
\end_inset

This specifies where to write the Backbone definitions for the stratum.
\end_layout

\begin_layout Itemize

\family typewriter
bb-source-suppress
\family default

\begin_inset Newline newline
\end_inset

If this is ticked, no Backbone code will be generated.
\end_layout

\begin_layout Standard
As these fields are already configured in our example, we can generate the
 code.
 First, we must tag the stratum by pressing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

control T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

or invoking
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Backbone
\begin_inset Formula $\vartriangleright$
\end_inset

Tag current stratum
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

.
 This only needs to be done once.
 It simply indicates which stratum will be used for running or generation
 from now on.
\end_layout

\begin_layout Standard
Next, we generate the Java and Backbone code by pressing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

control G
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

or by invoking
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Backbone
\begin_inset Formula $\vartriangleright$
\end_inset

Generate Backbone
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

.
 Note that a generation always performs a current stratum check beforehand,
 so you do not need to do this manually.
\end_layout

\begin_layout Subsubsection
Inspecting the Backbone Code
\end_layout

\begin_layout Standard
The Backbone code will be written to the 
\family typewriter
$BB/cars/base
\family default
 location, which will depend on the folder you have set the 
\family typewriter
BB
\family default
 variable to.
 As an alternative to looking at the files directly, you can look at them
 in Evolve.
 Go back up to the top level in the model (middle-click the diagram background),
 right-click on the 
\family typewriter
base
\family default
 stratum and select 
\begin_inset Quotes eld
\end_inset

Show Backbone code
\begin_inset Quotes erd
\end_inset

.
 The code will look like the following listing.
\end_layout

\begin_layout LyX-Code
stratum base
\end_layout

\begin_layout LyX-Code
    parent model 
\end_layout

\begin_layout LyX-Code
    is-relaxed 
\end_layout

\begin_layout LyX-Code
   depends-on backbone
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
    interface IRentalCarDetails implementation-class
\end_layout

\begin_layout LyX-Code
                 com.intrinsarc.base.IRentalCarDetails     {     }
\end_layout

\begin_layout LyX-Code
    interface IRenterDetails implementation-class
\end_layout

\begin_layout LyX-Code
                 com.intrinsarc.base.IRenterDetails     {     }
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
    component RentalCar
\end_layout

\begin_layout LyX-Code
    {
\end_layout

\begin_layout LyX-Code
        attributes: 
\end_layout

\begin_layout LyX-Code
            model: String,
\end_layout

\begin_layout LyX-Code
            purchasedWhen: Date;
\end_layout

\begin_layout LyX-Code
        ports:             car;
\end_layout

\begin_layout LyX-Code
        parts:
\end_layout

\begin_layout LyX-Code
            c6d4caa6-cff6-4bee-b245-ea03d785d2ae: RentalCarDetails
\end_layout

\begin_layout LyX-Code
                slots:
\end_layout

\begin_layout LyX-Code
                    purchased = purchasedWhen
\end_layout

\begin_layout LyX-Code
                    model = model,
\end_layout

\begin_layout LyX-Code
            11f33863-3b39-4b6b-88b4-6089e3930e2b: RenterDetails;
\end_layout

\begin_layout LyX-Code
        connectors:
\end_layout

\begin_layout LyX-Code
        ...
 lots of extra lines
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
The connection between the graphical component views and the generated Backbone
 code should be fairly clear.
 Note that in general Backbone identifies elements according to their UUID
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A globally unique identifier assigned when the element is created.
\end_layout

\end_inset

, using element names solely to help with human readability.
 When listing Backbone code in Evolve, the names are put in where possible.
 Where they are missing, the UUID is shown.
 In the files generated to 
\family typewriter
$BB/cars
\family default
, the UUID will always be present.
\end_layout

\begin_layout Standard
In other words, human-readable names are not used for identity in Backbone,
 UUIDs are used instead.
 If the name of a component changes, its UUID will remain constant, meaning
 that renaming does not present a problem.
 The only names that really matter are those that affect Java code such
 as port and attribute names.
\end_layout

\begin_layout Subsubsection
Inspecting the Java Code
\end_layout

\begin_layout Standard
The Java source code for 
\family typewriter
RentalCarDetails
\family default
 will be written to 
\end_layout

\begin_layout LyX-Code

\family typewriter
$CARS/src/com/intrinsarc/base/RentalCarDetails.java
\end_layout

\begin_layout Standard
Looking at this code gives insight into how Evolve forward-engineering works.
\end_layout

\begin_layout LyX-Code
public class RentalCarDetails
\end_layout

\begin_layout LyX-Code

\series bold
// start generated code
\end_layout

\begin_layout LyX-Code
    // main port
\end_layout

\begin_layout LyX-Code
 implements com.intrinsarc.base.IRentalCarDetails {
\end_layout

\begin_layout LyX-Code
    // attributes
\end_layout

\begin_layout LyX-Code
    private java.util.Date purchased;
\end_layout

\begin_layout LyX-Code
    private String model;
\end_layout

\begin_layout LyX-Code
    // attribute setters and getters
\end_layout

\begin_layout LyX-Code
    public java.util.Date getPurchased() { return purchased; }
\end_layout

\begin_layout LyX-Code
    public void setPurchased(java.util.Date purchased)
\end_layout

\begin_layout LyX-Code
        { this.purchased = purchased;}
\end_layout

\begin_layout LyX-Code
    public String getModel() { return model; }
\end_layout

\begin_layout LyX-Code
    public void setModel(String model) { this.model = model;}
\end_layout

\begin_layout LyX-Code
    // required ports
\end_layout

\begin_layout LyX-Code
    private com.intrinsarc.base.IRenterDetails renter;
\end_layout

\begin_layout LyX-Code
    // port setters and getters
\end_layout

\begin_layout LyX-Code
    public void setRenter(com.intrinsarc.base.IRenterDetails renter)
\end_layout

\begin_layout LyX-Code
        { this.renter = renter; }
\end_layout

\begin_layout LyX-Code

\series bold
// end generated code 
\end_layout

\begin_layout LyX-Code
    ...
 code omitted
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Evolve looks for the 
\family typewriter
\series bold
// start generated code
\family default
\series default
 and 
\family typewriter
\series bold
//end generated code
\family default
\series default
 markers and replaces anything in between with its generated code.
 By placing your own code outside of these markers, you can regenerate the
 leaf code and keep the added code safe.
 If you wish to avoid generating any code for this class completely, simply
 remove the markers.
 If you wish to start generating code for a class again, place the markers
 back in.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fidea{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The port corresponding to the interfaces implemented directly by the Java
 class is called the 
\begin_inset Quotes eld
\end_inset

main
\begin_inset Quotes erd
\end_inset

 port.
 This must be a non-indexed port with at least one provided interface.
 In the situation where more than one port qualifies, you must explicitly
 force one main port by ticking the 
\family typewriter
force-bean-main
\family default
 stereotype attribute on a port.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that Java interfaces are generated with an almost identical marker-based
 approach.
\end_layout

\begin_layout Subsubsection
A Recap of Evolve Implementation Class Generation
\end_layout

\begin_layout Standard
Let's quickly recap the code generation side of Evolve.
 We define leaf components which are associated with Java classes.
 Evolve can generate a skeleton for each leaf class, automatically creating
 the getters and setters to represent the leaf.
 You can then add methods and fields to the class using an IDE, as long
 as you write your additions outside of the code generation markers.
 If you do this, Evolve will preserve your code changes when you regenerate
 allowing you to move between Evolve and the IDE at will.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fhighlight{
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For those familiar with dependency injection, note that Evolve uses setter
 injection exclusively.
 It does not use constructor injection, as this prevents situations like
 those shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-wordprocessor-composite"

\end_inset

 where the two parts refer to each other.
 Setter injection is more general, and places no restrictions on the type
 of complex connections that are often made in advanced component models.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Lifecycle Callbacks
\end_layout

\begin_layout Standard
To indicate that a leaf should be told that initialization has occurred,
 and that destruction is about to occur, tick the 
\family typewriter
lifecycle-callbacks
\family default
 option in the stereotype properties of the leaf.
 This will result in it implementing the 
\family typewriter
ILifecycle
\family default
 interface, which defines the 
\family typewriter
afterInit()
\family default
 and 
\family typewriter
beforeDelete()
\family default
 methods.
 
\family typewriter
afterInit()
\family default
 is called after all leaves have been instantiated and after all connections
 have been made.
 
\family typewriter
beforeDelete()
\family default
 is called before any parts or connectors are destroyed.
\end_layout

\begin_layout Section
Running the Model
\end_layout

\begin_layout Standard
Evolve provides several different ways to run a program.
 The simplest is to use the Backbone interpreter, which reads in the composite
 definitions and uses this information to create instances of the leaf classes
 and connect them together.
 Once they are connected, Backbone is no longer involved and there is no
 overhead after initialization.
\end_layout

\begin_layout Subsection
Running Using the Backbone Interpreter
\end_layout

\begin_layout Standard
To run this example, we need to tell Backbone which component to instantiate
 and which port to run.
 Bringing up the stereotype tab again on the stratum, as shown in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-code-generation"

\end_inset

, we set 
\family typewriter
bb-run-component
\family default
 to 
\family typewriter
CarsExample
\family default
 and 
\family typewriter
bb-run-port
\family default
 to 
\family typewriter
run
\family default
.
 We then tag the stratum using
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

control T
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

if this hasn't already been done, and run the component by pressing
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

control R
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

or invoking the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Backbone
\begin_inset Formula $\vartriangleright$
\end_inset

Run Backbone
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

menu option.
 Doing this will bring up the runner window of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Running-the-car"

\end_inset

, showing that 
\family typewriter
CarsExampleRunner's
\family default
 
\family typewriter
run()
\family default
 method has iterated over the configured cars and printed them out.
\end_layout

\begin_layout Standard
Note that running a program always performs a check of the current stratum
 (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Checking-the-Model"

\end_inset

) and a code generation (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Generating-JavaBean-and"

\end_inset

) before execution.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/runner.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Running-the-car"

\end_inset

Running the car example
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Running Outside of Evolve
\end_layout

\begin_layout Standard
When we generated the code, it wrote the following file.
\end_layout

\begin_layout LyX-Code

\family typewriter
$BB/cars/base/run-load-list.bat
\end_layout

\begin_layout Standard
This can be directly executed from a command line, either as a batch file
 under Windows, or renamed to a shell file under Unix-like systems and executed.
\end_layout

\begin_layout Standard
This uses the 
\family typewriter
system.loadlist
\family default
 file in the same directory, which specifies which strata to include.
 Note that the loadlist has two sections: the first defines the variables
 (from the Evolve model) and the second describes the strata included.
\end_layout

\begin_layout Subsection
Running Without the Backbone Interpreter
\end_layout

\begin_layout Standard
The two previous sections used the Backbone interpreter to execute the Backbone
 files.
 The interpreter parses the component definitions, flattens out the composites,
 instantiates the leaf classes, connects them together and then calls the
 
\family typewriter
IRun::run()
\family default
 method on the 
\family typewriter
CarsExampleRunner
\family default
 instance.
 The Backbone jar file is around 350kb in size.
\end_layout

\begin_layout Standard
Alternatively, Evolve is able generate a small Java program from the model
 which achieves the same effect.
 To do this, set the 
\family typewriter
bb-composite-package
\family default
 stereotype property on the stratum (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-code-generation"

\end_inset

) to be the Java package where you would like the factory to be generated.
 In this case we are using the 
\family typewriter
com.intrinsarc.hardcoded
\family default
 package.
 Press
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

control shift G
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

or invoke the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Backbone
\begin_inset Formula $\vartriangleright$
\end_inset

Generate full implementation
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

menu option and the 
\family typewriter
CarsExampleFactory.java
\family default
 file will be generated.
 This has a 
\family typewriter
main()
\family default
 method on it which will run an identical program to that of the Backbone
 interpreter.
 The runtime overhead in this mode is virtually zero, as opposed to the
 interpreter which has some startup time.
 Further, it only requires the tiny 
\family typewriter
backbone-base.jar
\family default
 library (~15kb) which contains mainly interfaces and some state machine
 related classes.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
fhighlight{
\end_layout

\end_inset

All features are available in this mode, including the advanced features
 and techniques discussed in later chapters.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The ability to generate a Java program representing an Evolve model allows
 us to use components in all sorts of exotic environments.
 In chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Tutorial-D:-The"

\end_inset

, we will use this to create a GWT program.
 GWT will then translate the program to Javascript and run the Evolve components
 directly in a web browser.
\end_layout

\begin_layout Section
Importing Beans and Refreshing Leaves from Code
\end_layout

\begin_layout Standard
Evolve contains a bean importer, which can process existing class and jar
 files and import them as leaf components.
 This can be used to import JavaBean libraries
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Many programmers will already have a collection of beans from using other
 Dependency Injection approaches such as Spring and Guice.
 The importer allows these to be used in Evolve.
\end_layout

\end_inset

 into Evolve, or it can be used to update leaf definitions to reflect changes
 in code
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The importer is very fast, and can analyze approximately 3000 complex beans
 per second on my machine.
 It analyzes the entire Java rt.jar library in around 5 seconds.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The importer uses the 
\family typewriter
bb-classpath
\family default
 setting on the stratum to know which files to process.
 To start the importer, choose the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

Backbone
\begin_inset Formula $\vartriangleright$
\end_inset

Import beans into current package
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

menu option.
 You should see a window like in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Bean-Importer"

\end_inset

.
 Expand out the tree on the top left and select the 
\family typewriter
base
\family default
 package.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/bean-importer.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Bean-Importer"

\end_inset

The Bean Importer
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The top right list shows the beans and interfaces found in the selected
 package.
 In this case, it has found our three beans and two interfaces and indicates
 that the current Evolve definitions will be refreshed if the beans are
 imported.
 Selecting the beans and interfaces and clicking on 
\begin_inset Quotes eld
\end_inset

Add to import list
\begin_inset Quotes erd
\end_inset

 sees them appear in the 
\begin_inset Quotes eld
\end_inset

Import list
\begin_inset Quotes erd
\end_inset

 pane in the bottom left.
 Clicking on an entry will then show on the bottom right pane what it will
 look like as an Evolve leaf.
 This is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-importer-shows"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename screenshots/bean-importer2.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-importer-shows"

\end_inset

The importer showing the Evolve representation of a bean
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
After importing the beans, the model is updated.
 Note that if you import a bean library, then the subject definitions will
 go into the model, but will not be visible on a diagram until they are
 explicitly added.
 You must add a new component to a diagram and then use the
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
menu{
\end_layout

\end_inset

tab
\family typewriter

\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\family default
key to reference an imported one, as shown in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Subjects-and-Views"

\end_inset

.
 It can then be expanded to show the ports and attributes required.
 We explain this in more detail in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Importing-the-GWT"

\end_inset

.
\end_layout

\begin_layout Standard
Note that the importer works off class and jar files, and not source files.
 If you make changes that you want to see in the importer, compile your
 code before you import.
\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Standard
We've covered a lot in this section - you now know how to create leaves
 and composites, and how to import and reuse existing bean libraries.
 In the next chapter, we will show how to resemble and evolve components,
 allowing us to quickly customize and build on an existing application without
 destroying its original definition.
\end_layout

\end_body
\end_document
