package hardcoded;

import com.intrinsarc.backbone.runtime.api.*;

/** generated by Evolve */
public class RentalExample1Factory implements IHardcodedFactory
{
  private java.util.List<IHardcodedFactory> children;

  // attributes
  private Attribute<java.util.Date> purchasedWhen;
  private Attribute<String> model;
  private Attribute<java.util.Date> purchasedWhen1;
  private Attribute<String> model1;
  private Attribute<String> renterName;
  private Attribute<String> renterName1;

  // connectors
  private com.intrinsarc.cars.IRenterDetails c;
  private com.intrinsarc.cars.IRentalCarDetails c1;
  private com.intrinsarc.cars.IRenterDetails c2;
  private com.intrinsarc.cars.IRenterDetails c3;
  private com.intrinsarc.cars.IRentalCarDetails c4;
  private com.intrinsarc.cars.IRenterDetails c5;

 // parts
  private com.intrinsarc.cars.RentalExample1Runner x = new com.intrinsarc.cars.RentalExample1Runner();
  private com.intrinsarc.cars.RentalCarDetails x6 = new com.intrinsarc.cars.RentalCarDetails();
  private com.intrinsarc.cars.RenterDetails x7 = new com.intrinsarc.cars.RenterDetails();
  private com.intrinsarc.cars.RentalCarDetails x1 = new com.intrinsarc.cars.RentalCarDetails();
  private com.intrinsarc.cars.RenterDetails x2 = new com.intrinsarc.cars.RenterDetails();
  public com.intrinsarc.backbone.runtime.api.IRun getRun() { return x.getRun_IRun(null); }

  public RentalExample1Factory() {}

  public RentalExample1Factory initialize(IHardcodedFactory parent, java.util.Map<String, Object> values)
  {
    purchasedWhen = new Attribute<java.util.Date>(new java.util.Date(105, 10, 25));
    model = new Attribute<String>(new java.lang.String("Porsche"));
    purchasedWhen1 = new Attribute<java.util.Date>(new java.util.Date(109, 5, 15));
    model1 = new Attribute<String>(new java.lang.String("Mini"));
    renterName = new Attribute<String>(new java.lang.String(null));
    renterName1 = new Attribute<String>(new java.lang.String(null));
    x6.setPurchased(purchasedWhen);
    x6.setModel(model);
    x7.setRenterName(renterName);
    x1.setPurchased(purchasedWhen1);
    x1.setModel(model1);
    x2.setRenterName(renterName1);
    c = x2.getDetails_IRenterDetails(com.intrinsarc.cars.IRenterDetails.class);
    c1 = x1.getDetails_IRentalCarDetails(com.intrinsarc.cars.IRentalCarDetails.class);
    c2 = x2.getDetails_IRenterDetails(com.intrinsarc.cars.IRenterDetails.class);
    c3 = x7.getDetails_IRenterDetails(com.intrinsarc.cars.IRenterDetails.class);
    c4 = x6.getDetails_IRentalCarDetails(com.intrinsarc.cars.IRentalCarDetails.class);
    c5 = x7.getDetails_IRenterDetails(com.intrinsarc.cars.IRenterDetails.class);
    x.setCars_IRentalCarDetails(c4, -1);
    x.setRenters_IRenterDetails(c5, -1);
    x.setCars_IRentalCarDetails(c1, -1);
    x.setRenters_IRenterDetails(c2, -1);
    x1.setRenter_IRenterDetails(c);
    x6.setRenter_IRenterDetails(c3);
    return this;
  }
  public void childDestroyed(IHardcodedFactory child) { children.remove(child); }

  public void destroy()
  {
  }

  static void destroyChildren(IHardcodedFactory parent, IHardcodedFactory me, java.util.List<IHardcodedFactory> children)
  {
    parent.childDestroyed(me);
    if (children != null) {
      java.util.List<IHardcodedFactory> copy = new java.util.ArrayList<IHardcodedFactory>(children);
      java.util.Collections.reverse(copy);
      for (IHardcodedFactory f : copy)
        f.destroy();
    }
  }
}
