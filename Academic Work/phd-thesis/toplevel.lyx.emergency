#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass report
\begin_preamble
%\sloppy

%  \let\oldthebibliography=\thebibliography
% \let\endoldthebibliography=\endthebibliography
%  \renewenvironment{thebibliography}[1]{%
%    \begin{oldthebibliography}{#1}%
%      \setlength{\parskip}{0ex}%
%      \setlength{\itemsep}{0ex}%
%  }%
%  {%
%    \end{oldthebibliography}%
%  }

\usepackage{listings}

\lstdefinelanguage{Alloy}
{
 sensitive=true,
 morecomment=[l]{--}
}

\lstset{language=Alloy}

\newtheorem{srule}{Structural rule}
\newtheorem{sdef}{Definition}
\newtheorem{sprop}{Property}

\include{thesis.preamble}
\bibliographystyle{alpha}

\usepackage[left=2cm,right=2cm,top=3.5cm,bottom=2cm]{geometry}
\end_preamble
\use_default_options false
\language british
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement h
\paperfontsize 11
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 1cm
\headsep 1cm
\footskip 1cm
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title

\series bold
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
LARGE{
\end_layout

\end_inset

A Rigorous, Architectural Approach to
\begin_inset Newline newline
\end_inset

Extensible Applications
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Author
Andrew McVeigh
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
submitdate{May 2009} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
normallinespacing
\end_layout

\begin_layout Plain Layout


\backslash
preface
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Abstract}
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
An extensible application allows additional features to be added without
 requiring the source code of the application to be revealed or modified.
 The aim is to allow developers to add features to an often substantial
 base application without direct involvement by the application creators.
\end_layout

\begin_layout Abstract
A recurring theme of existing extensibility approaches is that the application
 must provide pre-planned extension points and parametrisations in order
 to accommodate expected future extensions.
 This results in a tension between keeping the architecture simple and potential
ly non-extensible in certain cases, or providing many predictive extension
 points in order to accommodate any possible future requirements.
 Even in the latter case, however, there is no guarantee that all future
 extensions can be supported.
\end_layout

\begin_layout Abstract
The Backbone component model is presented as an architectural approach which
 addresses these issues, providing facilities for both system creation and
 extension.
 By augmenting a hierarchical architecture description language with a small
 set of constructs for modelling changes, a facility is provided for extensions
 to adjust any part of the application they build on.
\end_layout

\begin_layout Abstract
The key contribution of this work is the consideration of both planned and
 unplanned extensibility in a hierarchical component model.
 A formal specification is given for the component model showing how merging
 and conflicts are handled.
\end_layout

\begin_layout Abstract
Tool support is provided by a UML-based modelling workbench and runtime
 environment, developed from the formal specification.
 A key aim is that system extension should be as natural and as straight
 forward as initial creation.
 Integration with existing implementation components and their subsequent
 evolution is fully supported.
\end_layout

\begin_layout Abstract
For evaluation, the model is compared and contrasted with existing approaches,
 specifically including plugin architectures and product family approaches.
 Backbone is also used to model the variants of an existing system which
 previously used object-oriented techniques to achieve a level of extensibility.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
cleardoublepage
\end_layout

\begin_layout Plain Layout


\backslash
addcontentsline{toc}{chapter}{Acknowledgements}
\end_layout

\begin_layout Plain Layout


\backslash
begin{acknowledgements}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
I would like to thank my supervisors, Professor Jeff Magee and Professor
 Jeff Kramer for their guidance and deep insights into the world of component
 structures and architecture.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{acknowledgements}
\end_layout

\begin_layout Plain Layout


\backslash
cleardoublepage
\end_layout

\begin_layout Plain Layout


\backslash
begin{dedication}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dedicated to my lovely wife Terri, and my two wonderful daughters Annabelle
 and Madeline.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{dedication}
\end_layout

\begin_layout Plain Layout


\backslash
body
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "introduction.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "background.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "backbone-model.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "formal-outline.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "tool-approach.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "advanced-modelling.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "evaluation.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "conclusions.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "full-backbone-informal.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand include
filename "full-backbone-formal.lyx"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "../read papers/references"
options "bibtotoc,plain"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
mention also
\end_layout

\begin_layout Plain Layout
- importing standard javabeans and mapping from javabeans to BB + limitations
 (no aliasing + no prov indices)
\end_layout

\begin_layout Plain Layout
- gui layout as a case study (guis are complex and interactive)
\end_layout

\begin_layout Plain Layout
- import of alloy results
\end_layout

\begin_layout Plain Layout
- mention doing runtime as a BB model (= MOP approach)
\end_layout

\begin_layout Plain Layout
- emphasise renaming as a subset of replace
\end_layout

\begin_layout Plain Layout
Things to specifically mention, perhaps in conclusion:
\end_layout

\begin_layout Plain Layout
- hardcoded generation + GWT integration
\end_layout

\begin_layout Plain Layout
- extensible SQL schemas
\end_layout

\begin_layout Plain Layout
- baselining
\end_layout

\begin_layout Plain Layout
- active components (actor model for concurrency)
\end_layout

\begin_layout Plain Layout
- support for OSGi and module systems
\end_layout

\begin_layout Plain Layout
- support for 
\begin_inset Quotes eld
\end_inset

frozen parts
\begin_inset Quotes erd
\end_inset

 where version of the part is kept the same
\end_layout

\begin_layout Plain Layout
(i.e.
 normal approach is to agree on global consensus of a class)
\end_layout

\begin_layout Plain Layout
- explain how approach can remove as well as add functionality, reference
 parnas paper
\end_layout

\begin_layout Plain Layout
- mention expressing runtime via backbone also -- a bit like a MOP
\end_layout

\begin_layout Plain Layout
- mention how Backbone provides most of the facilities of AOP
\end_layout

\begin_layout Plain Layout
- runtime evolution and extensibility -- i.e.
 changes applied to a running system
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Extras to fix up:
\end_layout

\begin_layout Plain Layout
1.
 italics for introduced terms
\end_layout

\end_inset


\end_layout

\end_body
\end_document
