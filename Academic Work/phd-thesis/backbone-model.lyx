#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass report
\begin_preamble
\include{thesis.preamble}
\bibliographystyle{alpha}
\usepackage[left=2cm,right=2cm,top=2cm,bottom=3cm]{geometry}
\end_preamble
\use_default_options false
\language british
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement h
\paperfontsize 11
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:The-Backbone-ADL"

\end_inset

The Backbone Architecture Description Language
\end_layout

\begin_layout Standard
The Backbone ADL is a conventional, hierarchical ADL that has been supplemented
 with three key extensibility concepts.
 These concepts have been distilled from experience and insights gained
 working on several industrial systems, and have been formulated to address
 the requirements of section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Requirements"

\end_inset

.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Basic-Concepts"

\end_inset

The Three Key Extensibility Concepts
\end_layout

\begin_layout Standard
In keeping with the definition in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-Based-Software-Engineering"

\end_inset

, a Backbone component is minimally defined as a unit of software that can
 be instantiated, and which explicitly declares the interfaces that it provides
 and requires.

\emph on
 
\emph default
Building on this foundation, a composite component is one which is made
 up of instances of other components.
 As discussed in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:The-Abstraction-Problem"

\end_inset

, an entire application can be structured as a complex composite component.
\end_layout

\begin_layout Standard
Consider a composite component representation of the Desk 1.0 application
 (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-desk-application"

\end_inset

), configured with two microphone devices as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-compositional-structure"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/naive-desk.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-compositional-structure"

\end_inset

The compositional structure of the desk application
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a simplified UML2 composite structure diagram showing components
 and instances only.
 The 
\family typewriter
Desk
\family default
 component is composed of two separate instances of the 
\family typewriter
MicDevice
\family default
 component (each instance has a colon in front of its name), one instance
 of the 
\family typewriter
DeviceController
\family default
 component and one instance of the 
\family typewriter
Mixer
\family default
 component.
 Diving down a further level in the compositional hierarchy, the 
\family typewriter
Mixer
\family default
 is composed of an instance of the 
\family typewriter
Equaliser
\family default
 component and an instance of the 
\family typewriter
Combiner
\family default
 component.
\end_layout

\begin_layout Standard

\emph on
The underlying insight of the Backbone approach is that we can make any
 alterations required to extend an application, by modifying the compositional
 structure of a base application expressed as a composite component.
\end_layout

\begin_layout Standard
Rather than directly editing the composite components to effect any required
 structural changes, however, we instead provide constructs to express alteratio
ns as deltas in an compositional hierarchy.
 Our alterations are then kept separately from the base application and
 can be selectively combined with the base at program startup to produce
 the required changes required for the extension.
\end_layout

\begin_layout Standard
Suppose that we now wish to extend the base application of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-compositional-structure"

\end_inset

 to support cuing, a turntable device and a CD device as per the desk scenario.
 To achieve this, we must alter the compositional hierarchy as shown in
 figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Extending-the-desk"

\end_inset

.
 The top of the figure shows the hierarchy of the base, and the extended
 application is shown underneath.
 The mixer is replaced with an improved, integrated version and a further
 mixer is added for cue support.
 One of the microphones is replaced with an instance of the 
\family typewriter
TurntableDevice
\family default
 component, and a 
\family typewriter
CDDevice
\family default
 is added.
 We also wish to retain all of the other aspects of the 
\family typewriter
Desk
\family default
 component, including any connectors and attributes (not shown), the existing
 
\family typewriter
DeviceController
\family default
 and one of the existing 
\family typewriter
MicDevice
\family default
 instances.
 Note that the extension in this case has compressed the hierarchy.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename models/a-to-a-dash.eps
	lyxscale 80
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Extending-the-desk"

\end_inset

Extending the desk application by adjusting its composition hierarchy
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset

Backbone provides the facilities to remake a composition hierarchy, in this
 manner, by adding three extensibility concepts to an underlying 
\begin_inset Quotes eld
\end_inset

core
\begin_inset Quotes erd
\end_inset

 ADL.
 The core is a conventional, Darwin-like language which has been adjusted
 to map more closely onto UML2 and object-oriented terminology and concepts.
\end_layout

\begin_layout Standard
The three extensibility concepts provide a way to apply architectural deltas
 to a design.
 The concepts are listed below.
\end_layout

\begin_layout Itemize
Resemblance
\begin_inset Newline newline
\end_inset

Resemblance allows a new component to be incrementally defined in terms
 of deltas (add, delete, replace) from the structure of one or more existing
 components.
 For instance, 
\family typewriter
Desk'
\family default
 could be defined using resemblance from 
\family typewriter
Desk
\family default
 in terms of four delta instructions: one to replace the 
\family typewriter
Mixer
\family default
 instance with an instance of 
\family typewriter
IntegratedMixer
\family default
, a second to add another mixer, a third to replace the 
\family typewriter
MicDevice
\family default
 instance with an instance of 
\family typewriter
TurntableDevice
\family default
, and a fourth to add a 
\family typewriter
CDDevice
\family default
.
 The other 
\family typewriter
MicDevice
\family default
 instance and the 
\family typewriter
DeviceController
\family default
 instance will be inherited
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Resemblance subsumes the notion of inheritance, and hence retains much of
 its terminology.
\end_layout

\end_inset

 from the original 
\family typewriter
Desk
\family default
 definition.
 Resemblance also allows structural constituents, such as connectors, to
 be adjusted in a similar fashion.
\end_layout

\begin_layout Itemize
Replacement
\begin_inset Newline newline
\end_inset

Replacement allows a component to be globally substituted for another in
 the architecture.
 For instance, we could use replacement to substitute 
\family typewriter
Desk'
\family default
 for 
\family typewriter
Desk
\family default
 in the architecture.
 Anything that previously referenced 
\family typewriter
Desk
\family default
 would now reference 
\family typewriter
Desk'
\family default
.
 The combination of resemblance and replacement allows us to evolve components
 incrementally without destructively editing the original definition.
\end_layout

\begin_layout Itemize
Stratum
\begin_inset Newline newline
\end_inset

A stratum is a module in the ADL, and this can be used to hold a base applicatio
n or extension.
 It groups definitions, declares explicit dependencies on other strata,
 and controls the visibility of any nested strata.
 In our example, the 
\family typewriter
Desk
\family default
, 
\family typewriter
Mixer
\family default
, 
\family typewriter
Combiner
\family default
, 
\family typewriter
Equaliser
\family default
, 
\family typewriter
DeviceController
\family default
 and 
\family typewriter
MicDevice
\family default
 components would be defined in one stratum (
\family typewriter
base
\family default
), and the 
\family typewriter
TurntableDevice
\family default
, 
\family typewriter
IntegratedMixer
\family default
, 
\family typewriter
CDDevice
\family default
 and 
\family typewriter
Desk'
\family default
 components would be defined in another (
\family typewriter
extension
\family default
) which depends upon the 
\family typewriter
base
\family default
 stratum (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Grouping-elements-using"

\end_inset

).
 If we include both strata in our application, we get the extended system.
 If, however, we only include the 
\family typewriter
base
\family default
 stratum, we get the original application desk application without the turntable
, CD or cuing support.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/strata.eps
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Grouping-elements-using"

\end_inset

An extension stratum depending on a base stratum
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In essence, the Backbone approach builds extensibility into an application
 by encouraging it to be structured as a hierarchical component architecture,
 at the same time providing a way to rework the composition hierarchy and
 associated structural constituents.
 Any part of the hierarchical structure acts as an extension point, and
 these points arise naturally from system decomposition.
 Resemblance and replacement are used to modify the composition tree, at
 the appropriate abstraction level, to alter and extend the architecture
 (
\noun on
AppropriateLevel
\noun default
).
\end_layout

\begin_layout Standard
Several points are worth noting in the example above.
 We have not destructively edited the definition of 
\family typewriter
Desk
\family default
 itself, yet we have been able to profoundly change the structure of the
 application to accommodate our changes (
\noun on
Alter
\noun default
).
 The replacement of 
\family typewriter
Mixer
\family default
 with 
\family typewriter
IntegratedMixer
\family default
 in the compositional hierarchy has somewhat flattened the hierarchy.
 In practice, it is common that both compression and expansion of the hierarchy
 may result from an extension.
\end_layout

\begin_layout Standard
The changes for the extension will only be applied if we form a system by
 including both the base and extension strata.
 If someone chooses to only include the base stratum, they will be left
 with the original base application (
\noun on
NoImpact
\noun default
).
 We can therefore choose the combination of features to include in a system
 by structuring and choosing strata with the appropriate dependencies.
\end_layout

\begin_layout Standard
By phrasing other elements as entities with structure, we are able to apply
 the extensibility concepts to these also.
 In this way, resemblance and replacement are used in Backbone to describe
 the evolution of interfaces and their substitutability in an architecture.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Backbone-Component-Model"

\end_inset

The Backbone Component Model
\end_layout

\begin_layout Standard
This section explains the Backbone component model in detail.
 UML2 composite structure diagrams are used to depict the graphical form.
\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Backbone-core"

\end_inset

 shows the graphical symbols for the core Backbone ADL.
 Apart from 
\emph on
port links, aliased slots
\emph default
 and 
\emph on
placeholders
\emph default
, these are standard UML2 constructs which we do not reinterpret.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="2">
<features>
<column alignment="center" valignment="middle" width="0">
<column alignment="left" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Backbone core construct
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/leaf.png
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Leaf component
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/interface.png
	BoundingBox -1bp 1bp 15bp 17bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Interface
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/iconheight.png

\end_inset


\begin_inset Graphics
	filename models/icons/operation.png
	scale 50
	BoundingBox 1bp -2bp 17bp 14bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Operation (inside an interface)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/iconheight.png

\end_inset


\begin_inset Graphics
	filename models/icons/port.png
	scale 80
	BoundingBox 2bp 0bp 18bp 16bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Port
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/required.png
	BoundingBox -1bp 0bp 16bp 16bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interface (from a port)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/provided.png
	BoundingBox -1bp 0bp 17bp 16bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interface (from a port)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/iconheight.png

\end_inset


\begin_inset Graphics
	filename models/icons/attribute.png
	scale 50
	BoundingBox 1bp -2bp 17bp 13bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attribute (inside a component)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/primitive.png
	BoundingBox 1bp 2bp 17bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Primitive type (of an attribute)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/portlink.png
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Port link (between ports inside a leaf component)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/composite.png
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Composite component
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/part.png
	BoundingBox 0bp 1bp 16bp 17bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Part (inside a composite component)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/connector.png
	BoundingBox 0bp 0bp 16bp 16bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Connector (between ports inside a composite component)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/slot.png
	BoundingBox 0bp 1bp 16bp 17bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Slot (inside a part)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/aliased-slot.png
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Aliased slot (inside a part)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/placeholder.png
	BoundingBox 0bp 2bp 16bp 18bp

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Placeholder component
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/delegate.png
	BoundingBox 0bp 1bp 16bp 17bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Delegation connector (between ports inside a composite component) or
\begin_inset Newline newline
\end_inset

Dependency (between strata)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Backbone-core"

\end_inset

The symbols for the Backbone core constructs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Backbone-extensibility"

\end_inset

 shows the graphical symbols for the primary Backbone extensibility constructs,
 which correspond to the three extensibility concepts discussed earlier.
 These are not part of UML2.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Backbone primary extensibility construct
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/resemblance.png
	BoundingBox 0bp 1bp 16bp 17bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resemblance
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/replacement.png
	BoundingBox 0bp 1bp 16bp 17bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Replacement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/stratum.png
	BoundingBox 0bp 1bp 16bp 17bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Stratum
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Backbone-extensibility"

\end_inset

The symbols for the primary Backbone extensibility constructs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Backbone-secondary"

\end_inset

 shows two further extensibility constructs, which are secondary in that
 they are 
\begin_inset Quotes eld
\end_inset

syntactic sugar
\begin_inset Quotes erd
\end_inset

 for a combination, or selective application, of the primary extensibility
 constructs.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Backbone secondary extensibility construct
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/evolution.png
	BoundingBox 0bp 1bp 16bp 17bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evolution (resemblance and replacement used together)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/retire.png
	BoundingBox 0bp 2bp 16bp 19bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Retirement
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Backbone-secondary"

\end_inset

The symbols for secondary Backbone extensibility constructs
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Backbone has a textual form also, and this is sometimes shown to the right
 in the diagrams.
 A full mapping between UML2 and Backbone is outlined in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Mapping-Backbone-onto"

\end_inset

, including restrictions placed on the UML2 model to support extensibility.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Core-Constructs"

\end_inset

Core Constructs
\end_layout

\begin_layout Standard
In keeping with the definition in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Component-Based-Software-Engineering"

\end_inset

, a Backbone component is a unit of software that can be instantiated, and
 explicitly declares the interfaces that it provides and requires.
 A component can be either a composite, a leaf, a factory
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Factories allow for dynamic component instantiation, and are discussed in
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:The-Factory-Pattern"

\end_inset

.
\end_layout

\end_inset

 or a placeholder.
\end_layout

\begin_layout Subsubsection*
Leaf Components
\emph on

\begin_inset space \thinspace{}
\end_inset


\begin_inset Graphics
	filename models/icons/leaf.png
	scale 70
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard
A 
\emph on
leaf component
\emph default
 is atomic and not further decomposed into other component instances.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-leaf-component"

\end_inset

 shows two leaves along with the textual definition of the first.
 The resemblance between the interfaces will be explained shortly.
 A leaf is associated directly with an implementation class.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/leaf.eps
	scale 85

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-leaf-component"

\end_inset

A leaf component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Interfaces
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/interface.png
	BoundingBox 0bp 3bp 16bp 19bp
	rotateOrigin leftTop

\end_inset

and Operations
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/operation.png
	scale 60
	BoundingBox 0bp 1bp 16bp 17bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard
An 
\emph on
interface
\emph default
 denotes a contract between two parties for a service.
 Each interface can contain a set of 
\emph on
operations
\emph default
, and is associated directly with an implementation interface, as shown
 in the textual form of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-leaf-component"

\end_inset

.
 As explained in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Extensibility-constructs"

\end_inset

, an interface may resemble other interfaces.
\end_layout

\begin_layout Subsubsection*
Ports
\begin_inset Graphics
	filename models/icons/port.png
	BoundingBox 0bp 4bp 16bp 20bp
	rotateOrigin leftTop

\end_inset

, Required Interfaces
\begin_inset Graphics
	filename models/icons/required.png
	BoundingBox -1bp 0bp 16bp 16bp
	rotateOrigin leftTop

\end_inset

and Provided Interfaces
\begin_inset Graphics
	filename models/icons/provided.png
	BoundingBox -1bp 0bp 17bp 16bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard

\emph on
Ports
\emph default
 serve to fully insulate a component from its environment, and can specify
 a number of 
\emph on
provided 
\emph default
and 
\emph on
required interfaces
\emph default
.
 A port can be denoted as 
\emph on
indexed
\emph default
 by specifying a multiplicity of either a single fixed bound, or a lower
 and upper bound together.
 The default multiplicity of a port is 
\family typewriter
[1]
\family default
.
 A port with a multiplicity of 
\family typewriter
[0..*] 
\family default
means that it can support any number of connections to it.
\end_layout

\begin_layout Standard
An indexed port can be marked as 
\emph on
ordered
\emph default
 by using the 
\family typewriter
is-ordered
\family default
 keyword in the port definition, meaning that the order of connections to
 the port is significant.
 This is related to the subject of connector indices, and discussed further
 below.
\end_layout

\begin_layout Subsubsection*
Attributes
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/attribute.png
	scale 60
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset

 and Primitive Types
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/primitive.png
	scale 60
	BoundingBox 1bp 2bp 17bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard
A component may have 
\emph on
attributes
\emph default
 of 
\emph on
primitive type
\emph default
, which represent a projection onto the internal state of the component.
\end_layout

\begin_layout Subsubsection*
Port Links
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/portlink.png
	BoundingBox 0bp 4bp 16bp 20bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard
Although a leaf component has no further decomposition in the architectural
 description, it may have internal logic and structure that relate the provided
 and required interfaces of several ports together.
 These internal linkages can be expressed by a 
\emph on
port link,
\emph default
 in lieu of explicit connectors, as shown in the leaf component of figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-leaf-component"

\end_inset

.
 Links propagate interface information between ports for the purposes of
 port type inference (see below), when an instance of the leaf is used inside
 a composite component.
 Port links can be between ports of different multiplicity, and are always
 optional.
\end_layout

\begin_layout Subsubsection*
Composite Components
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/composite.png
	scale 70
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset

, Parts
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/part.png
	scale 70
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset

 and Connectors
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/connector.png
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard
A 
\emph on
composite component
\emph default
 contains 
\emph on
parts
\emph default
, which are instances of other components, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-composite-component"

\end_inset

.
 Parts can either be wired together, or back to one of the component ports,
 using connectors.
 A connector has exactly two 
\emph on
connector ends
\emph default
.
 The parts of a component represent its initial configuration.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/composite.eps
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-composite-component"

\end_inset

A composite component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As with leaf components, a composite may also specify ports and attributes.
 A composite has no need to specify port links, as the structure is fully
 described by the parts and connectors.
\end_layout

\begin_layout Standard
A composite component does not specify an implementation class; the composite
 exists only in the ADL and is a purely structural entity.
 In this sense, a composite differs from the conventional UML2 usage where
 it is denotes an implementation class that can have its own behaviour 
\begin_inset CommandInset citation
LatexCommand cite
key "Oliver2006"

\end_inset

.
 A composite in Backbone (and Darwin) is shorthand for a set of wiring instructi
ons, and can always be flattened into a connected graph of leaf parts 
\begin_inset CommandInset citation
LatexCommand cite
key "Kramer1995"

\end_inset

.
\end_layout

\begin_layout Standard
We refer to components and interfaces collectively as 
\emph on
elements
\emph default
.
 We refer to the insides of components or interfaces (i.e.
 ports, parts, attributes, operations etc) as 
\emph on
constituents
\emph default
.
\end_layout

\begin_layout Subsubsection*
Connector Indices: Numeric and Alphanumeric
\end_layout

\begin_layout Standard
When connecting to an non-ordered port, a connector end does not have to
 explicitly specify an index.
 In this case, the connections will be made in an arbitrary order reflecting
 the fact that order is not important to the port.
\end_layout

\begin_layout Standard
When connecting to an ordered port, however, an index must always be supplied.
 
\emph on
A numeric
\emph default
 
\emph on
index
\emph default
 (e.g.
 
\family typewriter
[2]
\family default
) or an 
\emph on
alphanumeric index 
\emph default
(e.g.
 
\family typewriter
[A1]
\family default
) can be used.
 The latter type is always preferred, as it is then possible for an extension
 to insert a new connection between any two existing connection ends by
 choosing an index that is lexically between the existing indices.
 For example, if the base architecture has connectors that use indices of
 
\family typewriter
[a]
\family default
 and 
\family typewriter
[b]
\family default
 to connect to a port, then an extension could use 
\family typewriter
[Z]
\family default
 to insert a connection before in the ordering, 
\family typewriter
[aa]
\family default
 to insert between, and 
\family typewriter
[c]
\family default
 to add the connection after the existing ones.
\end_layout

\begin_layout Standard
If numeric and alphanumeric indices are both used to connect to a given
 port, the numeric indices will be applied first.
 Using indices on a non-ordered port is allowed, but not mandatory.
\end_layout

\begin_layout Subsubsection
Slots
\begin_inset Graphics
	filename models/icons/slot.png
	BoundingBox 0bp 4bp 16bp 20bp
	rotateOrigin leftTop

\end_inset

and Aliased Slots
\begin_inset Graphics
	filename models/icons/aliased-slot.png
	BoundingBox 0bp 4bp 16bp 20bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard
A 
\emph on
slot
\emph default
 is an attribute of a part that has been bound to a value, such as the slot
 
\family typewriter
attribute
\family default
 in 
\family typewriter
part
\family default
 of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-composite-component"

\end_inset

.
 The value can be a literal (e.g.
 
\family typewriter
100
\family default
) or a copy of an enclosing attribute (e.g.
 
\family typewriter
= cAttribute
\family default
).
 A slot may also be 
\emph on
aliased
\emph default
 onto an enclosing attribute (as per the slot shown in the figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-composite-component"

\end_inset

).
 If the same enclosing attribute of the composite is aliased onto several
 slots of different parts, they will all literally share the same variable.
 This allows buried instance state to be propagated up to the composite
 level and shared between parts.
\end_layout

\begin_layout Subsubsection*
Delegation Connectors
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/delegate.png
	BoundingBox 0bp 4bp 16bp 20bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard
A 
\emph on
delegation connector
\emph default
 establishes one port as an alias for another.
 In our example, 
\family typewriter
cPort
\family default
 is an alias for 
\family typewriter
port1
\family default
.
 This tends to be used as a convenience to prevent the need for many explicit
 connectors between ports with multiplicity.
\end_layout

\begin_layout Subsubsection*
Placeholder Components
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default
\noun on

\begin_inset Graphics
	filename models/icons/placeholder.png
	scale 70
	BoundingBox 0bp 2bp 16bp 18bp

\end_inset


\end_layout

\begin_layout Standard
A 
\emph on
placeholder component 
\emph default
represents a component that has not been fully elaborated in the architecture,
 supporting top down architectural specification.
 It cannot contain parts and is not associated with an implementation class,
 but may contain port links, attributes and ports.
\end_layout

\begin_layout Standard
Placeholders are useful for defining the general 
\begin_inset Quotes eld
\end_inset

shape
\begin_inset Quotes erd
\end_inset

 required of other components, and resemblance can be used to inherit constituen
ts from a placeholder when forming a new concrete component.
 A placeholder can also be evolved into a concrete component using replacement.
 Parts of placeholder type can be used to represent unelaborated sections
 of a composite, with the caveat that a composite with placeholder parts
 cannot be instantiated as part of the composition hierarchy of an application.
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-placeholder-component"

\end_inset

 shows a placeholder definition with the same shape as 
\family typewriter
LeafComponent
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/placeholder.eps
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-placeholder-component"

\end_inset

A placeholder component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Port Type Inference
\end_layout

\begin_layout Standard
The provided interface of 
\family typewriter
cPort
\family default
 was inferred in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-composite-component"

\end_inset

 and did not need to be specified explicitly.
 The port of the 
\family typewriter
AdvancedLeaf
\family default
 part provides a subtype of 
\family typewriter
BasicInterface
\family default
, called
\family typewriter
 AdvancedInterface (
\family default
figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-leaf-component"

\end_inset

) and this propagates through 
\family typewriter
part1
\family default
 using that leaf's port link information.
\end_layout

\begin_layout Standard
Port type inference completely removes the need to specify provided and
 required interfaces for ports of composite components.
 This is useful because when even a small number of component structures
 are replaced using the extensibility constructs, many port interfaces can
 alter quite dramatically as the changes propagate to many component definitions
 in the composition hierarchy.
 With inference, updates to the port specifications are handled automatically
 and we do not have to manually adjust the affected composite component
 definitions.
\end_layout

\begin_layout Subsubsection*
Unique Identifiers
\end_layout

\begin_layout Standard
Although figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-leaf-component"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-composite-component"

\end_inset

 show elements and constituents with names, these are purely descriptive.
 In actuality, each element or constituent has a universally unique identifier
 (UUID) allocated to it that remains constant even as the name changes,
 allowing Backbone to track logical identity even when elements are evolved
 or moved between strata.
 UUIDs also provides a robust way to reference individual constituents of
 a component for the resemblance construct.
\end_layout

\begin_layout Standard
The Evolve modelling tool (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Evolve:-The-Backbone"

\end_inset

) handles the allocation of UUIDs and completely hides these from the user
 interface so that only descriptive names are presented.
 Although in the remainder of this thesis we will continue to show names
 for reasons of clarity, in all cases UUIDs would be allocated.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Extensibility-constructs"

\end_inset

Extensibility constructs
\end_layout

\begin_layout Subsubsection*
Resemblance
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/resemblance.png
	BoundingBox 0bp 4bp 16bp 20bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard

\emph on
Resemblance 
\emph default
is used to define a new element in terms of similarity to other elements,
 using delta alterations (add, delete, replace) to add or change any inherited
 constituents.
 For instance, we can use resemblance to define a new component in terms
 of changes to the part and connector structures of existing components.
\end_layout

\begin_layout Standard
Consider figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Using-resemblance-to"

\end_inset

, where we have defined 
\family typewriter
NewComposite
\family default
 in terms of 
\family typewriter
CompositeComponent
\family default
 from figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-composite-component"

\end_inset

.
 We have deleted 
\family typewriter
part2
\family default
, added 
\family typewriter
cPort2
\family default
 and replaced 
\family typewriter
connector
\family default
.
 Other constituents such as 
\family typewriter
part1
\family default
 and 
\family typewriter
delegation_connector
\family default
 were inherited.
 Notice how the removal of 
\family typewriter
part2
\family default
 has caused the interface provided by 
\family typewriter
cPort
\family default
 to change to 
\family typewriter
BasicInterface
\family default
 via port type inference.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/newcomposite.eps
	scale 85

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Using-resemblance-to"

\end_inset

Using resemblance to define a new component in terms of deltas
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The constituents of a component that can be added, deleted or replaced using
 resemblance are component name, parts, ports, connectors, attributes, port
 links, retirement status, implementation class and stereotype
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Stereotype usage in Backbone is explained in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Using-Stereotypes-for"

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Resemblance can be used to define a composite component from a leaf (and
 vice versa).
 Defining a composite from a leaf involves deleting the inherited implementation
 class name constituent and adding parts and other structure.
 Defining a leaf from a composite involves deleting the parts and adding
 an implementation class name constituent via a delta.
\end_layout

\begin_layout Standard
The use of deltas even for descriptive names and implementation class mappings
 allows us to take a consistent approach to change, extension combination
 and conflict resolution for any constituent of a component or interface.
 Deltas are used uniformly in all cases
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The textual and graphical forms hide the use of deltas for name and implementati
on class.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
An interface is also an element and can resemble other interfaces, as described
 earlier.
 Interface constituents are interface name, implementation class name and
 operations.
 Resemblance subsumes the inheritance construct completely, and a subtype
 relationship for interfaces is a resemblance relationship where no deletions
 or replacements of operations have been performed.
 For instance, 
\family typewriter
AdvancedInterface
\family default
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-leaf-component"

\end_inset

 is defined using resemblance from 
\family typewriter
BasicInterface
\family default
.
\end_layout

\begin_layout Subsubsection*
Replacement
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/replacement.png
	BoundingBox 0bp 4bp 16bp 20bp
	rotateOrigin leftTop

\end_inset

and Evolution
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/evolution.png
	BoundingBox 0bp 4bp 16bp 20bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard

\emph on
Replacement 
\emph default
globally replaces one element with another in the architecture.
\end_layout

\begin_layout Standard

\emph on
Evolution
\emph default
 is expressed by combining resemblance and replacement.
 Accordingly, it is regarded as a secondary construct and the graphical
 symbol is the overlay of the resemblance and replacement symbols.
 It defines a new element incrementally in terms of an existing one (resemblance
), and then replaces the previous definition with the new one (replacement).
\end_layout

\begin_layout Standard
Although we previously used resemblance to define 
\family typewriter
NewComponent
\family default
 in terms of changes to 
\family typewriter
Composite\SpecialChar \-
Component
\family default
, thereby incrementally altering the inherited structure, this did not affect
 the definition of 
\family typewriter
Composite\SpecialChar \-
Component
\family default
.
 If a component contained 
\family typewriter
Composite\SpecialChar \-
Component
\family default
 parts, its structure would be unaffected by the presence of 
\family typewriter
NewComponent
\family default
.
 Replacement, on the other hand, allows us to affect existing usages by
 globally replacing the previous definition with our new definition.
\end_layout

\begin_layout Standard
Consider how this works in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolving-a-component"

\end_inset

.
 We create another component, in the spirit of 
\family typewriter
NewComponent
\family default
, via resemblance from 
\family typewriter
CompositeComponent
\family default
.
 Simultaneously, we use replacement to replace the old definition.
 In this case we did not specify a new name, so the name is inherited.
 The component name is shown with a prime symbol after it to denote that
 it evolves the original.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/replace.eps
	scale 85

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolving-a-component"

\end_inset

Evolving a component with resemblance and replace
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Resemblance is useful as a construct in its own right for effecting component
 reuse 
\begin_inset CommandInset citation
LatexCommand cite
key "McVeigh2006"

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset citation
LatexCommand cite
key "McVeigh2006"

\end_inset

 refers to 
\emph on
replacement
\emph default
 as 
\emph on
redefinition
\emph default
.
\end_layout

\end_inset

.
 Replacement used on its own is possible, but rarely useful as it always
 introduces breaking changes because no structure or ports (including their
 UUIDs) will be inherited from the element being replaced.
\end_layout

\begin_layout Subsubsection*
Retirement
\begin_inset Graphics
	filename models/icons/retire.png
	scale 70
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard

\emph on
Retirement
\emph default
 allows an element to be retired, and it is an error to further refer to
 something that has been retired.
 Retirement is not a primary construct in the ADL per se, but is instead
 modelled as a boolean constituent which can be altered using deltas.
 As such, retirement is achieved by evolving the element we wish to retire,
 and creating a replace delta to set the retirement status to true.
\end_layout

\begin_layout Standard
The graphical and textual form are shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Retirement"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/retire.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Retirement"

\end_inset

Retiring a component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Strata
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/stratum.png
	scale 70
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset

 and Strata Dependencies
\emph on

\begin_inset space \thinspace{}
\end_inset


\emph default

\begin_inset Graphics
	filename models/icons/delegate.png
	BoundingBox 0bp 4bp 16bp 20bp
	rotateOrigin leftTop

\end_inset


\end_layout

\begin_layout Standard
A 
\emph on
stratum 
\emph default
is a nested module in Backbone.
 It groups related definitions corresponding to an extension or base application
, and indicates their dependencies.
 A stratum must explicitly declare which other strata it depends on, and
 which child strata are exported as visible to others.
\end_layout

\begin_layout Standard
Combinations of strata are used to represent application variants.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Grouping-elements-using"

\end_inset

 demonstrates how a base application can be placed in one strata, and an
 extension in another.
 If we take the {
\family typewriter
base, extension
\family default
} strata combination, we get the variant corresponding to the extended applicati
on.
 If we just take the {
\family typewriter
base
\family default
} combination, however, we are left with the original application.
\end_layout

\begin_layout Standard
A stratum forms the unit of extension in Backbone, and also the unit of
 ownership and sharing.
 Each stratum is owned by a single party that has modification rights to
 it.
 We can therefore use strata to model the ownership structure of an architecture
, and map this onto a community of base and extension developers.
 The modelling tool and runtime environment are centred around the import
 and export of strata for distributing extensions and subsets of an architecture.
\end_layout

\begin_layout Standard
A system is assembled out of strata, and it is not possible to selectively
 include only some elements from a stratum.
 As such, it is not sensible to package both a definition and any replacements
 for it in the same stratum, as only the evolved version would then be visible.
 For this reason, replacement, evolution or retirement of an element must
 be in a different stratum to the original definition.
\end_layout

\begin_layout Standard
A stratum can either be 
\emph on
relaxed
\emph default
 or 
\emph on
strict
\emph default
.
 If stratum S is relaxed then it propagates its dependencies: any stratum
 that depends on S also has visibility of the strata that S depends on,
 and so forth in a transitive manner.
 This allows us to use Backbone to model strict and relaxed layered architecture
s as described in 
\begin_inset CommandInset citation
LatexCommand cite
key "Buschmann1996"

\end_inset

.
\end_layout

\begin_layout Standard
A stratum that contains an element replacement (including evolution and
 retirement) must be marked as 
\emph on
destructive
\emph default
, and strata with nested destructive strata must be also marked as destructive.
 The symbols for the different strata types (table 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Strata-symbols"

\end_inset

) allow a developer to quickly see which parts of the system involve replacement
 and could therefore cause conflict when combined with other extensions.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="left" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Strata variant
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/stratum-relaxed.png
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Relaxed (white / grey)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/stratum-strict.png
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Strict (white / black)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/stratum-relaxed-destructive.png
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destructive and relaxed (red / grey)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename models/icons/stratum-strict-destructive.png
	BoundingBox 0bp 2bp 16bp 18bp
	rotateOrigin leftTop

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Destructive and strict (red / black)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Strata-symbols"

\end_inset

The symbols for strata types
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The stratum concept is related to the UML2 package concept.
 Unfortunately, packages suffer from limitations which restrict their usage
 as a unit of import and export from a modelling environment 
\begin_inset CommandInset citation
LatexCommand cite
key "Schurr1998"

\end_inset

.
 This is explained in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Mapping-Backbone-onto"

\end_inset

.
\end_layout

\begin_layout Subsection
Summary
\end_layout

\begin_layout Standard
The Backbone ADL consists of a set of three primary extensibility constructs,
 added to a conventional Darwin-like ADL which has been aligned to UML2
 terminology and concepts.
\end_layout

\begin_layout Standard
The extensibility constructs derive from the insight of manipulating a component
 composition hierarchy in order to restructure it for an extension.
 Resemblance allows the reuse of existing composition hierarchies, by permitting
 a new element to be defined in terms of deltas from existing elements.
\end_layout

\begin_layout Standard
Used on its own, however, resemblance always defines a new component (and
 composition hierarchy) from existing ones.
 We also need the ability to remake the hierarchy of an existing component.
 At the same time, we want to prevent direct editing of the original definition
 by extension developers who are not the owners of that definition, to respect
 the 
\noun on
NoImpact
\noun default
 requirement.
 To accomplish this, we further add the replacement construct, which replaces
 an existing definition with a new definition.
 Used together, resemblance and replacement can express the incremental
 evolution of a component or interface in a hierarchical architecture.
\end_layout

\begin_layout Standard
Finally, strata can be used to group definitions for an extension and express
 the extension's dependencies on other parts of the system.
 Strata can also be used to model the ownership structure of the architecture.
 We use combinations of strata to express variants of an application.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Modelling-the-Audio"

\end_inset

Modelling the Audio Desk Scenario in Backbone
\end_layout

\begin_layout Standard
In this section, we work through the audio desk scenario from section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Example-Scenario"

\end_inset

, to demonstrate how the extensibility constructs satisfy the requirements
 outlined in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Requirements"

\end_inset

.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Relationships-in-an"

\end_inset

Relationships in an Extension Setting
\end_layout

\begin_layout Standard
Before modelling the desk application itself, let us examine the relationship
 between the parties involved in the extension setting, as shown in figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-flow-of"

\end_inset

.
 The arrows show the flow of software between parties.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/parties.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-flow-of"

\end_inset

Software flows between parties in the desk scenario
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The base desk application is developed by Audiosoft.
 Audiosoft distributes the base to Developer X who creates an extension
 to add turntable and cuing support.
 Developer Y also receives the base and creates an extension that adds CD
 player support.
\end_layout

\begin_layout Standard
Audiosoft have also recently produced an extension which upgrades the mixer.
 X and Y have not seen this upgrade or adapted their extensions for this
 version.
 Finally radio station R wishes to run an upgraded desk with a microphone,
 CD player and turntable.
\end_layout

\begin_layout Standard
To further complicate matters, consider that R wishes to potentially patch
 or fix the upgraded desk version and feed these changes back to Audiosoft.
\end_layout

\begin_layout Standard
The relationships between the parties reveal a number of issues which occur
 frequently in an extension setting.
 The extensions of X and Y are created independently, but must eventually
 be combined despite neither X nor Y having visibility of, nor a particular
 interest in adapting their extension for the other.
 The job of combining these extensions and correcting any issues falls eventuall
y to another party further towards the eventual user of the application;
 R in this case.
 Secondly, upgrades to the base may be packaged as an extension also
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Audiosoft could simply edit the desk application directly to produce the
 upgrade, but this may violate the 
\noun on
NoImpact
\noun default
 requirement for existing users.
\end_layout

\end_inset

, and not all parties may have access to the upgrade.
 It is common to want to combine a number of extensions, each originally
 developed against a different version of the base.
\end_layout

\begin_layout Standard
A further issue is that R wishes to send fixes back to Audiosoft.
 However, any fixes cannot reference the extensions from X and Y as Audiosoft
 has no exposure to these.
\end_layout

\begin_layout Standard
Finally, we cannot assume that a common configuration management (CM) system
 exists to allow all parties uniform access to the architectural definitions
 and implementations.
 Some software may be distributed by simply sending it to others.
 Other parties may use CM systems internally and control the evolution of
 their own software in this way, but will generally not share a repository
 with other parties.
\end_layout

\begin_layout Subsection
Using Strata to Model Ownership and Relationships
\end_layout

\begin_layout Standard
We now turn our attention to structuring a set of strata and their dependencies,
 such that each party owns associated strata to contain the software that
 they produce.
 After reversing the direction of the arrows in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-flow-of"

\end_inset

 to represent dependencies rather than software distribution, we arrive
 at the structure shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Strata-are-structured"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/strata-ownership.eps
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Strata-are-structured"

\end_inset

Strata dependencies reflect the relationships between parties
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Each stratum contains both architectural descriptions and related leaf and
 interface implementations, and has a single owner.
 The owner is the only one permitted to do any direct modification of the
 definitions in the stratum.
 Strata can then be distributed to non-owning parties, in the reverse direction
 of the dependencies, who must treat them as read-only and use the extensibility
 constructs to effect any alterations required.
 This approach guarantees that each strata has a single definitive source
 and no merging or common CM system is required to manage parallel branches
 of a single stratum.
 Of course, this arrangement does not prevent parties from using a CM system
 to manage the evolution of strata they own, if this is desired.
\end_layout

\begin_layout Standard
In our strata graph, Audiosoft owns the 
\family typewriter
desk 1.0
\family default
 stratum.
 X owns 
\family typewriter
turntable
\family default
 and Y owns 
\family typewriter
CD
\family default
, each of which depend on 
\family typewriter
desk 1.0
\family default
.
 Audiosoft also owns a separate stratum 
\family typewriter
upgraded
\family default
 which is used for the extension corresponding to the upgrade.
 In this way, both the base and upgraded desk are available via different
 strata combinations.
 The 
\family typewriter
combined
\family default
 stratum is owned by R, and its dependencies combine all extensions into
 a single application.
 R is using the 
\family typewriter
fixes
\family default
 stratum to hold any fixes to the upgraded desk to be sent back to Audiosoft,
 and the dependency structure ensures that this cannot contain references
 to the 
\family typewriter
turntable
\family default
 or 
\family typewriter
CD
\family default
 extensions.
 Other variants could be similarly structured as strata with the appropriate
 dependencies.
\end_layout

\begin_layout Standard
Parties do not need generally need to see strata upwards in their dependency
 graph, and do not have to concern themselves with the maintenance of these.
 An exception to this is stratum 
\family typewriter
fixes
\family default
, which is used by R to send fixes back to Audiosoft.
\end_layout

\begin_layout Subsection
The Base Application
\end_layout

\begin_layout Standard
Audiosoft defines the 
\family typewriter
Desk
\family default
 component in the 
\family typewriter
desk 1.0
\family default
 stratum, which it owns.
 This forms the base application that others will extend.
 In this section, we will elaborate the 
\family typewriter
Desk
\family default
 component using a top-down decomposition.
\end_layout

\begin_layout Standard
The audio desk (
\family typewriter
Desk
\family default
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Desk-component"

\end_inset

) contains a number of volume knobs and switches (
\family typewriter
Device\SpecialChar \-
Controller
\family default
), which control a set of audio devices.
 The desk is configured with two microphone devices (
\family typewriter
MicDevice
\family default
).
 The audio from the devices is fed into the mixer (
\family typewriter
Mixer
\family default
), which combines them and produces a single audio output channel.
 Order is important for the 
\family typewriter
controllers
\family default
 port of 
\family typewriter
DeviceController
\family default
, as this determines which knobs and switches control which device.
 As this port is marked as ordered, we need to specify an index for each
 connection end bound to it (
\family typewriter
[a][b]
\family default
).
 Note that the 
\family typewriter
out
\family default
 port definition does not need to specify an interface, as this is inferred
 from the parts and connections.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/desk-1.0.eps
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Desk-component"

\end_inset

The Desk component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-AudioDevice-and"

\end_inset

 shows the 
\family typewriter
AudioDevice
\family default
 placeholder and 
\family typewriter
DeviceController
\family default
 leaf component definitions.
 The placeholder serves to describe the general shape of an audio device:
 each device should provide an 
\family typewriter
IDevice
\family default
 interface for device control, and require an 
\family typewriter
IAudioChannel
\family default
 interface for outputting its audio packets.
\end_layout

\begin_layout Standard

\family typewriter
DeviceController
\family default
 requires an ordered collection of 
\family typewriter
IDevice
\family default
 interfaces, representing the devices it controls via the 
\family typewriter
play
\family default
 and 
\family typewriter
stop
\family default
 operations.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/audio-device-and-device-controller.eps
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-AudioDevice-and"

\end_inset

The AudioDevice and DeviceController components
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
MicDevice
\family default
 leaf is defined using resemblance from 
\family typewriter
AudioDevice
\family default
, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-MicDevice-component"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/mic-device.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-MicDevice-component"

\end_inset

The MicDevice component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
MicDevice
\family default
 is implemented by the 
\family typewriter
audiosoft.MicDevice
\family default
 class.
 The implementation of this class must follow a convention, which the Backbone
 runtime engine expects.
 The Java class definition would start as follows
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Currently, leaf and interface implementations are written in Java, although
 the approach is equally applicable to other object-oriented languages.
\end_layout

\end_inset

.
\end_layout

\begin_layout LyX-Code
package audiosoft;
\end_layout

\begin_layout LyX-Code
public class MicDevice {
\end_layout

\begin_layout LyX-Code
  public void setAudio_IAudioChannel(IAudioChannel channel) { ...
 }
\end_layout

\begin_layout LyX-Code
  public IDevice getControl_IDevice() { ...
 }
\end_layout

\begin_layout Standard
The method names are formed by concatenating a 
\family typewriter
get
\family default
 (for provided) or 
\family typewriter
set
\family default
 (for required) with the port name and the interface name.
 The Backbone runtime will instantiate an instance of the class and connect
 to it using these methods during program execution.
\end_layout

\begin_layout Standard
The leaf and interface implementations logically form a part of the stratum
 and must be distributed when sending the stratum to another party.
 In keeping with the 
\noun on
NoSource
\noun default
 requirement, the implementation source is not required when distributing.
 The compiled artifacts suffice, as no direct modification of the source
 code of the base is required when extending using the Backbone constructs.
\end_layout

\begin_layout Standard
The definition of the 
\family typewriter
Mixer
\family default
 composite is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Mixer-definition"

\end_inset

.
 It provides a number of audio channels for accepting multiple audio inputs
 and combining them into a single output (
\family typewriter
Combiner
\family default
) and also has an frequency equaliser so that the signal can be adjusted
 (
\family typewriter
Equaliser
\family default
).
 Note that the 
\family typewriter
Combiner
\family default
 
\family typewriter
volume
\family default
 attribute has been aliased onto the 
\family typewriter
mixerVolume
\family default
 attribute.
 This is a way of 
\begin_inset Quotes eld
\end_inset

pushing up
\begin_inset Quotes erd
\end_inset

 attributes, to avoid having them buried in the compositional hierarchy.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/mixer.eps
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Mixer-definition"

\end_inset

The Mixer component
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Combiner
\family default
 and 
\family typewriter
Equaliser
\family default
 leaf definitions are shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-Combiner-and"

\end_inset

.
 Note that the 
\family typewriter
in
\family default
 port of 
\family typewriter
Combiner
\family default
 is not ordered, as the manner in which the audio signals are combined makes
 no difference to the output.
 
\family typewriter
Equaliser
\family default
 has an attribute with a default value.
 As such, it is not necessary to specify a slot for this in the 
\family typewriter
Equaliser
\family default
 part of 
\family typewriter
Mixer
\family default
.
\end_layout

\begin_layout Standard
The final composition hierarchy of Desk is shown in the top of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Extending-the-desk"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/combiner-equaliser.eps
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-Combiner-and"

\end_inset

The Combiner and Equaliser components
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:The-CD-Player"

\end_inset

The CD Player Extension
\end_layout

\begin_layout Standard
The 
\family typewriter
desk 1.0
\family default
 stratum is distributed to developer Y who is tasked with adding an audio
 device to control a CD player.
 This is a type of planned extension as the application was specifically
 designed to allow new devices to be defined and connected into the desk.
\end_layout

\begin_layout Standard
Developer Y owns the 
\family typewriter
CD
\family default
 stratum, and this is used to contain their component definitions and implementa
tions.
\end_layout

\begin_layout Standard

\family typewriter
CDDevice
\family default
 is defined in terms of resemblance from the 
\family typewriter
AudioDevice
\family default
 placeholder, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-CD-device"

\end_inset

.
 Resemblance allows the component to reuse the shape of the placeholder,
 resulting in a terse definition.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/cd-device.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-CD-device"

\end_inset

The CD device component
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Y then uses an evolution of the 
\family typewriter
Desk
\family default
 component to connect in a 
\family typewriter
CDDevice
\family default
 part (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:desk-with-CD"

\end_inset

), leaving all the other structures intact.
 Note that the textual form uses a combination of resemblance and replacement,
 in keeping with the definition of evolution as a secondary construct (table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Backbone-secondary"

\end_inset

).
 Even if the graphical view does not explicitly show the evolution relation,
 the definition can be seen to be an evolution due to the prime after the
 name.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/desk-with-cd.eps
	scale 75

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:desk-with-CD"

\end_inset

The evolved desk with CD support
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The addition of a CD device was accomplished using only the extensibility
 constructs, without directly editing the definitions in the base stratum.
 The 
\family typewriter
Desk'
\family default
 and 
\family typewriter
CDDevice
\family default
 definitions (and implementation artifacts) can now be packaged into the
 
\family typewriter
CD
\family default
 stratum and distributed to parties who wish to incorporate this extension
 into their system.
\end_layout

\begin_layout Standard
The composition hierarchy is the same as the hierarchy of the base, with
 the single addition of a CDDevice part.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:The-Turntable-Extension"

\end_inset

The Turntable Extension
\end_layout

\begin_layout Standard
The 
\family typewriter
desk 1.0
\family default
 stratum is also distributed to developer X, who is tasked with adding an
 audio device to control a turntable.
 This device requires cuing facilities, where the audio can be sent to an
 off-air bus so that the start of a track can be located before broadcasting.
\end_layout

\begin_layout Standard
Unfortunately the base application does not provide cue support, so X must
 extend the application to add this.
 This is a type of unplanned extension as the base application did not foresee
 or cater for this type of change.
\end_layout

\begin_layout Standard
Developer X owns the 
\family typewriter
turntable
\family default
 stratum, and this is used to contain their component definitions and implementa
tions.
 The definition of 
\family typewriter
TurntableDevice
\family default
 is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-turntable-device"

\end_inset

.
 Again, resemblance from the placeholder is used to inherit the shape, and
 the 
\family typewriter
cue
\family default
 port is added.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/turntable.eps
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-turntable-device"

\end_inset

The turntable device component
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The mixer of the base application does not have a way to handle cue inputs
 separately from on-air inputs.
 To add this facility, we first create a 
\family typewriter
CuingCombiner
\family default
 component, which resembles the base 
\family typewriter
Combiner
\family default
 component, but adds 
\family typewriter
cueIn
\family default
 and 
\family typewriter
cueOut
\family default
 ports (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cuing-combiner"

\end_inset

).
 Note that this is a leaf, and to add cuing support X must also create a
 new implementation class named 
\family typewriter
x.CuingCombiner
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/cuing-combiner.eps
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cuing-combiner"

\end_inset

The combiner with cue support
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The new implementation class can be phrased in a number of ways, as long
 as it respects that the source code of 
\family typewriter
audiosoft.Combiner
\family default
 is not available.
 In this case, X makes 
\family typewriter
x.CuingCombiner
\family default
 inherit from the 
\family typewriter
audiosoft.Combiner
\family default
 class, using implementation inheritance to avoid recreating the entire
 implementation.
 This is not always possible leading to occasional reimplementation, as
 inheritance is limited to additions and selective overrides, whereas resemblanc
e also allows deletions and replace also.
 As reimplementing a coarse-grained leaf can be costly, Backbone intentionally
 biases developers towards fine-grained leaf components.
 Backbone also allows for architectural hierarchy via composition, so this
 level of granularity does not pose a management or abstraction problem.
\end_layout

\begin_layout Standard
X now needs to incorporate the new combiner into an updated mixer.
 
\family typewriter
CuingMixer
\family default
 is defined via resemblance from 
\family typewriter
Mixer
\family default
, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cuing-mixer"

\end_inset

.
 X has replaced the inherited 
\family typewriter
Combiner
\family default
 part with a 
\family typewriter
CuingCombiner
\family default
 part.
 Note that as part of the replace, the name was altered from 
\family typewriter
c
\family default
 to 
\family typewriter
cc
\family default
.
 As described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Backbone-Component-Model"

\end_inset

, most names in Backbone are purely descriptive
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Except where the names are used to denote leaf component ports and attributes
 which correspond to implementation names.
\end_layout

\end_inset

 and all artifacts also have a UUID.
 Because the UUIDs of parts and other constituents remain constant even
 when being replaced, a name change does not cause problems for inherited
 connectors.
 Note that 
\family typewriter
CuingCombiner
\family default
 also inherits the ports of 
\family typewriter
Combiner
\family default
, which means that the inherited connectors still connect to the correct
 ports.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/cuing-mixer.eps
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cuing-mixer"

\end_inset

Defining a mixer with cue support
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:turntable-desk"

\end_inset

 shows how Y has evolved 
\family typewriter
Desk
\family default
 to replace the mixer with a 
\family typewriter
CuingMixer
\family default
 part, and that one of the microphones has been replaced with a 
\family typewriter
TurntableDevice
\family default
 part.
 As 
\family typewriter
CuingMixer
\family default
 and 
\family typewriter
TurntableDevice
\family default
 both resemble elements in the base and hence inherit their constituents
 and UUIDs, we can replace the parts in our evolution of 
\family typewriter
Desk
\family default
 without having to replace all the existing connectors.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/turntable-desk.eps
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:turntable-desk"

\end_inset

Evolving the desk to provide cue support
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adding the turntable and cuing has involved making a number of changes to
 the composition hierarchy of the desk application.
 As shown in figure 
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:turntable-hierarchy"

\end_inset

, the hierarchy has been changed at two different levels.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename models/base-to-turntable.eps
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:turntable-hierarchy"

\end_inset

Changing the composition hierarchy for cuing and turntable support
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The structural alterations are accommodated by the resemblance and replacement
 constructs, which allow deep change by permitting components at successive
 abstraction levels to be restructured.
 These constructs allows the hierarchy to be remade, whilst still permitting
 a convenient and intuitive graphical component representation in the spirit
 of UML2 composite structure diagrams.
\end_layout

\begin_layout Standard
Further, we have been able to make these changes even though the type of
 extension was unanticipated by the base application.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:The-Upgraded-Desk"

\end_inset

The Upgraded Desk
\end_layout

\begin_layout Standard
Audiosoft decides to upgrade the mixer component of the original desk, and
 package it in the 
\family typewriter
upgrade
\family default
 stratum.
 They have recently purchased a superior mixer implementation with integrated
 combiner and equalisation capabilities.
 As they do not have the source code, they must evolve the mixer from a
 composite into a leaf component.
 It is not uncommon for an extension to either expand (due to further decomposit
ion) or occasionally compress the compositional hierarchy of an application
 when making alterations.
\end_layout

\begin_layout Standard
Audiosoft also wish to change the name of the evolved mixer to 
\family typewriter
IntegratedMixer
\family default
.
 This is accomplished by the usual dual application of resemblance and replaceme
nt, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Evolving-the-mixer"

\end_inset

.
 The name change is expressed by a delta alteration to the name constituent,
 and does not affect the logical identity of the component.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/integrated-mixer.eps
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolving-the-mixer"

\end_inset

Evolving the mixer component from a composite to a leaf
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The upgrade also features an evolved 
\family typewriter
DeviceController
\family default
, as shown in figure 
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:Evolving-controller"

\end_inset

.
 Previously the resolution of the volume controls was found to be too coarse,
 and the 
\family typewriter
increaseResolution
\family default
 boolean attribute was added to indicate to the new implementation that
 the resolution should be increased.
 By default, this is set to 
\family typewriter
true
\family default
 so that existing parts of this type will automatically pick this up, although
 an extension can turn this off if necessary by using a slot to set the
 value to 
\family typewriter
false
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/evolved-device-controller.eps
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Evolving-controller"

\end_inset

Evolving the device controller to specify a new implementation
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The evolution of the controller specifies a different implementation class
 to the previous incarnation.
 However, it is not always the case that a new class must be used.
 If no implementation class is specified in the evolution, then the inherited
 one will be reused.
 This is only useful if the implementation source is available to the party
 defining the upgrade, as it implies that the source has been evolved also.
\end_layout

\begin_layout Standard
As we are now using an integrated mixer and no longer require the 
\family typewriter
Combiner
\family default
 or 
\family typewriter
Equaliser
\family default
 components, these can be retired.
 After this point, it is an error to continue to refer to these components.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Obsolete-components-retire"

\end_inset

 shows that retirement is expressed in terms of resemblance and replacement,
 in keeping with its status as a secondary construct.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/retiring.eps
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Obsolete-components-retire"

\end_inset

Obsolete components can be retired
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Combining-All-Extensions"

\end_inset

Combining All Extensions to Form a Coherent Application
\end_layout

\begin_layout Standard
Radio station R now wishes to combine the upgrade, the CD player extension,
 and the turntable extension into a single coherent application.
 They retain the services of an extension developer to achieve this task
 for them.
\end_layout

\begin_layout Standard
According to the relationships between the parties, as shown in figure 
\begin_inset CommandInset ref
LatexCommand eqref
reference "fig:The-flow-of"

\end_inset

, each extension (including the upgrade) has been developed in isolation,
 with no view of the others.
 Therefore there is a possibility that the alterations made to the common
 base by the extensions may conflict when combined.
 This is not particularly surprising -- by allowing extensions the freedom
 to radically alter a base application, we also provide the potential for
 them to make changes that conflict with each other.
\end_layout

\begin_layout Standard
In practice, Backbone mitigates against the possibility of conflict by supportin
g an architectural hierarchy with fine-grained leaf components.
 This allows an alteration to be specified at the correct level of abstraction
 (
\noun on
AppropriateLevel
\noun default
).
 Further, fine-grained decomposition means that an alteration can be targeted
 to a precise area in order to achieve the required architectural effect.
 These factors decrease the footprint of alterations, and hence reduce the
 chance of structural overlap and conflict.
\end_layout

\begin_layout Subsubsection*
Stratum Perspective
\end_layout

\begin_layout Standard

\emph on
Stratum perspective 
\emph default
is the view of the architecture from a particular stratum, including all
 of the changes made in that stratum and the strata it transitively depends
 upon.
\end_layout

\begin_layout Standard
Consider the view of the 
\family typewriter
Desk
\family default
 component from the perspective of R's 
\family typewriter
combined
\family default
 stratum.
 The dependencies of this stratum causes all extensions and upgrades to
 be combined, which automatically produces the consolidated component shown
 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-consolidated-desk"

\end_inset

.
 This component has four erroneous connectors, which are flagged up by the
 Backbone error checker: the connectors either do not propagate any interface
 types (connector 
\family typewriter
desk1
\family default
), or the provided and required interfaces of one of the connector ends
 cannot be made to match the other end.
\end_layout

\begin_layout Standard
The connectors errors are not the root cause of the conflicts -- they are
 just a symptom of a deeper structural problem which we will now examine.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/desk-errors.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-consolidated-desk"

\end_inset

The consolidated Desk component
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Combining Extensions
\end_layout

\begin_layout Standard
Consider how the consolidated 
\family typewriter
Desk
\family default
 component is formed from the perspective of 
\family typewriter
combined
\family default
.
 Strata dependencies are used to order the definitions and evolutions from
 the various extensions, so as to form a consolidated (or expanded) resemblance
 graph, as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Consolidated-desk"

\end_inset

.
 The evolutions from the 
\family typewriter
turntable
\family default
 and 
\family typewriter
CD
\family default
 strata are in parallel, because the two strata are independent of each
 other.
 To form a final view of the component, we apply the deltas starting from
 the bottom of the graph, working up to the top.
 If separate branches of the graph conflict, for instance by replacing a
 constituent with one that the other branch finds objectionable or by deleting
 a constituent that the other side still depends upon, then we have a structural
 error which will be picked up by well-formedness rules.
\end_layout

\begin_layout Standard
As a result of combining deltas, the consolidated 
\family typewriter
Desk
\family default
 contains the 
\family typewriter
CuingMixer
\family default
 and 
\family typewriter
Turntable
\family default
 part replacements from the 
\family typewriter
turntable
\family default
 stratum, and the added 
\family typewriter
CDDevice
\family default
 part from the 
\family typewriter
CD
\family default
 stratum.
 However, this has not resulted in a structural conflict for this component.
 The bad connectors are caused by a structural problem deeper down in the
 composition hierarchy at the mixer level.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/consolidated-desk-resemblance.eps
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Consolidated-desk"

\end_inset

The expanded resemblance graph for Desk
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Cuingmixer-resemblance"

\end_inset

 shows this expanded resemblance graph for 
\family typewriter
CuingMixer
\family default
.
 Note that in addition to using strata dependencies, any evolutions are
 inserted before standard resemblance, often leading to a linear graph.
 The intuition behind this is that 
\family typewriter
CuingMixer
\family default
 builds on top of the 
\family typewriter
Mixer
\family default
 definition, but the 
\family typewriter
Mixer
\family default
 component was subsequently evolved to 
\family typewriter
IntegratedMixer'
\family default
.
 As such, 
\family typewriter
Cui
\family default
ngMixer resembles 
\family typewriter
IntegratedMixer'
\family default
 in a consolidated view.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/consolidated-cuingmixer-resemblance.eps
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Cuingmixer-resemblance"

\end_inset

The expanded resemblance graph for CuingMixer
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
These use of strata dependencies for ordering expanded resemblance graphs
 tends to linearise them in an intuitive manner.
 Parallel branches form when have multiple parallel evolutions of the same
 component in independent strata, as per figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Consolidated-desk"

\end_inset

.
\end_layout

\begin_layout Standard
Upon examining the consolidated 
\family typewriter
CuingMixer
\family default
 resemblance hierarchy, the problem becomes clear: the evolution of 
\family typewriter
Mixer
\family default
 into the 
\family typewriter
IntegratedMixer'
\family default
 leaf has removed the 
\family typewriter
Combiner
\family default
 and 
\family typewriter
Equaliser
\family default
 parts that 
\family typewriter
CuingMixer
\family default
 previously relied on.
 As such, the consolidated structure of 
\family typewriter
CuingMixer
\family default
 (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-consolidated-CuingMixer"

\end_inset

) has a number of structural errors such as missing connectors and a missing
 
\family typewriter
Equaliser
\family default
 part.
 A further problem is that the upgrade stratum retired the 
\family typewriter
Combiner
\family default
 component: 
\family typewriter
CuingCombiner
\family default
 resembles this, and inherits the retirement also.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/consolidated-cuingmixer-structure.eps
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-consolidated-CuingMixer"

\end_inset

The consolidated CuingMixer component has errors
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Conflict Resolution
\end_layout

\begin_layout Standard
To resolve these issues, R needs to restructure either the 
\family typewriter
CuingMixer
\family default
 to cope with the newly evolved 
\family typewriter
IntegratedMixer'
\family default
, or needs to find another way to add cue support.
 As the evolved mixer has superior performance to the previous incarnation,
 R decides to retire 
\family typewriter
CuingMixer
\family default
 and restructure the 
\family typewriter
Desk
\family default
 to include another mixer to act as the cue audio bus.
 The evolution of 
\family typewriter
Desk
\family default
 that R uses to correct the conflicts is shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Unified-correction"

\end_inset

.
 This involves adding the extra 
\family typewriter
IntegratedMixer
\family default
 part, replacing the existing 
\family typewriter
CuingMixer
\family default
 part with another 
\family typewriter
IntegratedMixer
\family default
, and redirecting two connectors.
 Although not shown, we are now also free to retire 
\family typewriter
CuingMixer
\family default
.
\end_layout

\begin_layout Standard
The final compositional hierarchy of the consolidated application is shown
 in the lower part of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Extending-the-desk"

\end_inset

.
 The extension developers have together succeeded in transforming the base
 application to accommodate new and modified features, even though many
 of the changes were not anticipated by the base architecture.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename generated-figures/unified-desk.eps
	scale 90

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Unified-correction"

\end_inset

Evolving the desk to correct extension conflicts
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Standard
The Backbone ADL consists of a conventional, UML2-based ADL, supplemented
 with three extensibility concepts: resemblance, replacement and stratum.
 Resemblance allows an element to be defined in terms of deltas from existing
 elements thereby facilitating reuse.
 Replacement allows a newly defined element to be globally substituted for
 an existing one.
 Combined together, resemblance and replacement enable an extension to make
 incremental alterations to the compositional hierarchy of a base application.
\end_layout

\begin_layout Standard
A stratum is a nested module, which allows definitions for an extension
 to be grouped and coarse-grained dependencies to be expressed.
 Strata form the unit of ownership and architectural control in Backbone,
 and strata combinations can be used to represent variants of the application.
\end_layout

\begin_layout Standard
The audio desk scenario demonstrates how these concepts enable complex extension
s, regardless of whether or not the types of extensions were foreseen and
 therefore factored into the underlying base application.
 This characteristic allows the base architecture to be designed without
 the pollution of speculative extension points.
 In the natural process of architectural elaboration and decomposition into
 more granular components over time, extensibility is built into an architecture.
 As such, Backbone copes well with unplanned extension.
\end_layout

\begin_layout Standard
By allowing any part of the base to be restructured, Backbone meets the
 
\noun on
Alter
\noun default
 requirement.
 It satisfies the 
\noun on
NoImpact
\noun default
 requirement by keeping evolutions and replacements in separate strata from
 the components that they operate on.
 If one party wishes to see the change, then they can choose both the extension
 and base strata.
 If another party wishes to see only the base, then they can simply ignore
 the extension strata.
\end_layout

\begin_layout Standard
Backbone satisfies the 
\noun on
NoSource
\noun default
 requirement, as it enables full extensibility without requiring the implementat
ion source code of components or interfaces.
 The support of an architectural hierarchy encourages fine-grained component
 decomposition, which reduces the reimplementation cost if it is necessary
 to fully replace a leaf in an extension when the source code is not available.
 Backbone also supports the evolution of leaf implementations via direct
 source code modification if required.
\end_layout

\begin_layout Standard
To form a consolidated component out of multiple independent evolutions,
 Backbone forms an expanded resemblance graph, where replacements are inserted
 into the original resemblance graph using strata dependency order.
 This allows the replacements from various extensions to be combined, meeting
 the 
\noun on
Combine
\noun default
 requirement.
 An upgrade can also be phrased as an extension and combined with other
 extensions and upgrades, and hence Backbone also meets the 
\noun on
Upgrade
\noun default
 requirement.
\end_layout

\begin_layout Standard
Backbone defines a number of well-formedness checks (section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Structural-Rules-of"

\end_inset

) which can detect if a combination of extensions has resulted in a structural
 error.
 Errors can occur when combining independently developed extensions which
 both alter a common base, and the same extensibility constructs can be
 used to evolve, replace and retire elements to form a structurally correct
 system.
 This meets many facets of the 
\noun on
DetectAndCorrect
\noun default
 requirement.
 Behavioural checks are not currently considered and are discussed in future
 work.
\end_layout

\begin_layout Standard
By allowing an architectural hierarchy, Backbone permits extension to occur
 at the appropriate level of abstraction.
 It therefore satisfies the 
\noun on
AppropriateLevel
\noun default
 requirement.
 The use of a hierarchy also tends to diminish the likelihood of conflict,
 as extensions can target and minimise the changes they need to make to
 the base architecture.
\end_layout

\begin_layout Standard
In contrast to other approaches such as MAE 
\begin_inset CommandInset citation
LatexCommand cite
key "Roshandel2004"

\end_inset

 which integrate general architectural concepts into a CM system, Backbone
 introduces extensibility constructs directly into an ADL.
 This increased modelling support provides powerful facilities for extension,
 but the constructs are also useful for component evolution and reuse 
\begin_inset CommandInset citation
LatexCommand cite
key "McVeigh2006"

\end_inset

.
 Backbone is agnostic as to the use of CM approaches and can work with existing
 CM systems if required.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="12cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requirement
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
How the extensibility concepts meet the requirement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Alter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resemblance and replacement allow any part of a base application's architecture
 to be restructured for an extension.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
NoSource
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The implementation source code of components or interfaces is not required
 to effect an extension.
 The extension is expressed as structural deltas against the architectural
 description of the base.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
NoImpact
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
An extension is packaged into a different stratum from the base.
 Only parties who wish to see the extension need reference the extension
 stratum.
 Other parties are unaffected.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Combine
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Replacements from various extensions can be combined, by forming expanded
 resemblance graphs based on the strata dependency graph.
 This gives a precise order of delta application.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
Upgrade
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
An upgrade can be phrased as an extension.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
DetectAndCorrect
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Well-formedness checks are used to detect if a combination of extensions
 has resulted in a structural error.
 Any errors can be corrected by another stratum.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\noun on
AppropriateLevel
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Components form an architectural hierarchy.
 Resemblance and replacement allow the appropriate abstraction level in
 this hierarchy to be adjusted by an extension.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Checking the extensibility concepts against the requirements
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "../read papers/references"
options "plain"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_body
\end_document
