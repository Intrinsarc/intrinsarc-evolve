<!-- /tmp/alloy4tmp19-andrew/tmp/611832/1.xml| conflictAndResolution correct, but with the same part type, took 9737863ms -->

<alloy builddate="2007/Apr/04 12:54 EDT">

<instance filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/unittests_conflict.als" bitwidth="4" command="Run conflictAndResolution for 3 but exactly 5 Stratum, exactly 6 Element, exactly 5 Component, exactly 1 Interface, exactly 5 bb/full/Ports/Deltas, exactly 4 bb/full/Parts/Deltas, exactly 4 bb/full/Connectors/Deltas, exactly 0 bb/full/Operations/Deltas, exactly 4 Part, 5 LinkEnd">

<sig name="bb/base/Model">
  <atom name="bb/base/Model[0]"/>
</sig>

<field name="errorsAllowed">
    <type> <sig name="bb/base/Model"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/base/Model[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
</field>

<field name="providesIsOptional">
    <type> <sig name="bb/base/Model"/> <sig name="bb/base/boolean/Bool"/> </type>
    <tuple> <atom name="bb/base/Model[0]"/> <atom name="bb/base/boolean/True[0]"/> </tuple>
</field>

<sig name="bb/base/Stratum">
  <atom name="bb/base/Stratum[0]"/>
  <atom name="bb/base/Stratum[1]"/>
  <atom name="bb/base/Stratum[2]"/>
  <atom name="bb/base/Stratum[3]"/>
  <atom name="bb/base/Stratum[4]"/>
</sig>

<field name="parent">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="dependsOn">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
</field>

<field name="dependsOnNested">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="nestedStrata">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="isRelaxed">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/boolean/Bool"/> </type>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/base/boolean/False[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/boolean/True[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/boolean/True[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/boolean/True[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/boolean/True[0]"/> </tuple>
</field>

<field name="ownedElements">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Element"/> </type>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Interface[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[0]"/> </tuple>
</field>

<field name="exportsStrata">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="canSee">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
</field>

<field name="simpleDependsOn">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
</field>

<field name="isTop">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/boolean/Bool"/> </type>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/base/boolean/False[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/boolean/False[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/boolean/False[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/boolean/False[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/boolean/True[0]"/> </tuple>
</field>

<field name="transitive">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
</field>

<field name="replacing">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Element"/> </type>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[0]"/> </tuple>
</field>

<field name="canSeePlusMe">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="transitivePlusMe">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[1]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[2]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[3]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[4]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="defining">
    <type> <sig name="bb/base/Stratum"/> <sig name="bb/base/Element"/> </type>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Interface[0]"/> </tuple>
</field>

<sig name="bb/base/Element">
  <atom name="bb/full/Component[0]"/>
  <atom name="bb/full/Component[1]"/>
  <atom name="bb/full/Component[2]"/>
  <atom name="bb/full/Component[3]"/>
  <atom name="bb/full/Component[4]"/>
  <atom name="bb/full/Interface[0]"/>
</sig>

<field name="home">
    <type> <sig name="bb/base/Element"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
</field>

<field name="replaces">
    <type> <sig name="bb/base/Element"/> <sig name="bb/base/Element"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Component[4]"/> </tuple>
</field>

<field name="resembles">
    <type> <sig name="bb/base/Element"/> <sig name="bb/base/Element"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Component[4]"/> </tuple>
</field>

<field name="resembles_e">
    <type> <sig name="bb/base/Element"/> <sig name="bb/base/Element"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Component[1]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Component[2]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="actsAs_e">
    <type> <sig name="bb/base/Element"/> <sig name="bb/base/Element"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Component[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Component[3]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Component[3]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Component[3]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Component[3]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="isInvalid_e">
    <type> <sig name="bb/base/Element"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
</field>

<sig name="bb/base/boolean/Bool">
  <atom name="bb/base/boolean/True[0]"/>
  <atom name="bb/base/boolean/False[0]"/>
</sig>

<sig name="bb/base/boolean/True" extends="bb/base/boolean/Bool">
  <atom name="bb/base/boolean/True[0]"/>
</sig>

<sig name="bb/base/boolean/False" extends="bb/base/boolean/Bool">
  <atom name="bb/base/boolean/False[0]"/>
</sig>

<sig name="bb/full/Component" extends="bb/base/Element">
  <atom name="bb/full/Component[0]"/>
  <atom name="bb/full/Component[1]"/>
  <atom name="bb/full/Component[2]"/>
  <atom name="bb/full/Component[3]"/>
  <atom name="bb/full/Component[4]"/>
</sig>

<field name="myParts">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Parts/Deltas"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Parts/Deltas[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Parts/Deltas[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Parts/Deltas[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Parts/Deltas[0]"/> </tuple>
</field>

<field name="myPorts">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Ports/Deltas"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Ports/Deltas[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Ports/Deltas[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Ports/Deltas[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Ports/Deltas[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Ports/Deltas[0]"/> </tuple>
</field>

<field name="myConnectors">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Connectors/Deltas"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Connectors/Deltas[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Connectors/Deltas[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Connectors/Deltas[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Connectors/Deltas[0]"/> </tuple>
</field>

<field name="myAttributes">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Attributes/Deltas"/> </type>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Attributes/Deltas[0]"/> </tuple>
</field>

<field name="myCImplementation">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/ComponentImplementation/Deltas"/> </type>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/ComponentImplementation/Deltas[0]"/> </tuple>
</field>

<field name="myLinks">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Links/Deltas"/> </type>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Links/Deltas[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Links/Deltas[0]"/> </tuple>
</field>

<field name="iDParts">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/PartID"/> <sig name="bb/full/Part"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
</field>

<field name="isComposite">
    <type> <sig name="bb/full/Component"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="parts">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Part"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
</field>

<field name="ports">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Port"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
</field>

<field name="connectors">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Connector"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[0]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[1]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[2]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[4]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="attributes">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Attribute"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="cimplementation">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/ComponentImplementation"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Component[3]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="links">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Link"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="inferredLinks">
    <type> <sig name="bb/full/Component"/> <sig name="bb/full/Port"/> <sig name="bb/full/Port"/> <sig name="bb/base/Stratum"/> </type>
</field>

<sig name="bb/full/PrimitiveType" extends="bb/base/Element">
</sig>

<field name="myTImplementation">
    <type> <sig name="bb/full/PrimitiveType"/> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> </type>
</field>

<field name="timplementation">
    <type> <sig name="bb/full/PrimitiveType"/> <sig name="bb/full/PrimitiveTypeImplementation"/> <sig name="bb/base/Stratum"/> </type>
</field>

<sig name="bb/full/Interface" extends="bb/base/Element">
  <atom name="bb/full/Interface[0]"/>
</sig>

<field name="myOperations">
    <type> <sig name="bb/full/Interface"/> <sig name="bb/full/Operations/Deltas"/> </type>
</field>

<field name="myIImplementation">
    <type> <sig name="bb/full/Interface"/> <sig name="bb/full/InterfaceImplementation/Deltas"/> </type>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> </tuple>
</field>

<field name="operations">
    <type> <sig name="bb/full/Interface"/> <sig name="bb/full/Operation"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="iimplementation">
    <type> <sig name="bb/full/Interface"/> <sig name="bb/full/InterfaceImplementation"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Interface[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="superTypes">
    <type> <sig name="bb/full/Interface"/> <sig name="bb/full/Interface"/> <sig name="bb/base/Stratum"/> </type>
</field>

<sig name="bb/full/PartID">
  <atom name="bb/full/PartID[0]"/>
</sig>

<sig name="bb/full/PortID">
  <atom name="bb/full/PortID[0]"/>
  <atom name="bb/full/PortID[1]"/>
</sig>

<sig name="bb/full/ConnectorID">
  <atom name="bb/full/ConnectorID[0]"/>
</sig>

<sig name="bb/full/AttributeID">
</sig>

<sig name="bb/full/OperationID">
</sig>

<sig name="bb/full/InterfaceImplementationID">
  <atom name="bb/full/InterfaceImplementationID[0]"/>
</sig>

<sig name="bb/full/ComponentImplementationID">
  <atom name="bb/full/ComponentImplementationID[0]"/>
</sig>

<sig name="bb/full/PrimitiveTypeImplementationID">
</sig>

<sig name="bb/full/LinkID">
</sig>

<sig name="bb/full/Part">
  <atom name="bb/full/Part[0]"/>
  <atom name="bb/full/Part[1]"/>
  <atom name="bb/full/Part[2]"/>
  <atom name="bb/full/Part[3]"/>
</sig>

<field name="partType">
    <type> <sig name="bb/full/Part"/> <sig name="bb/full/Component"/> </type>
    <tuple> <atom name="bb/full/Part[0]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/full/Part[3]"/> <atom name="bb/full/Component[3]"/> </tuple>
</field>

<field name="portRemap">
    <type> <sig name="bb/full/Part"/> <sig name="bb/full/PortID"/> <sig name="bb/full/PortID"/> </type>
</field>

<field name="portMap">
    <type> <sig name="bb/full/Part"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PortID"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
</field>

<field name="attributeValues">
    <type> <sig name="bb/full/Part"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/AttributeValue"/> </type>
</field>

<field name="attributeAliases">
    <type> <sig name="bb/full/Part"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/AttributeID"/> </type>
</field>

<field name="attributeCopyValues">
    <type> <sig name="bb/full/Part"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/AttributeID"/> </type>
</field>

<field name="linkedToParts">
    <type> <sig name="bb/full/Part"/> <sig name="bb/full/Part"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/Component"/> </type>
</field>

<field name="linkedToOutside">
    <type> <sig name="bb/full/Part"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/Component"/> </type>
    <tuple> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
</field>

<sig name="bb/full/Index">
  <atom name="bb/full/Zero[0]"/>
  <atom name="bb/full/One[0]"/>
  <atom name="bb/full/Two[0]"/>
  <atom name="bb/full/Three[0]"/>
</sig>

<sig name="bb/full/Zero" extends="bb/full/Index">
  <atom name="bb/full/Zero[0]"/>
</sig>

<sig name="bb/full/One" extends="bb/full/Index">
  <atom name="bb/full/One[0]"/>
</sig>

<sig name="bb/full/Two" extends="bb/full/Index">
  <atom name="bb/full/Two[0]"/>
</sig>

<sig name="bb/full/Three" extends="bb/full/Index">
  <atom name="bb/full/Three[0]"/>
</sig>

<sig name="bb/full/Port">
  <atom name="bb/full/Port[0]"/>
  <atom name="bb/full/Port[1]"/>
  <atom name="bb/full/Port[2]"/>
</sig>

<field name="setProvided">
    <type> <sig name="bb/full/Port"/> <sig name="bb/full/Interface"/> </type>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> </tuple>
</field>

<field name="setRequired">
    <type> <sig name="bb/full/Port"/> <sig name="bb/full/Interface"/> </type>
</field>

<field name="provided">
    <type> <sig name="bb/full/Port"/> <sig name="bb/full/Interface"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/Component"/> </type>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[3]"/> </tuple>
</field>

<field name="required">
    <type> <sig name="bb/full/Port"/> <sig name="bb/full/Interface"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/Component"/> </type>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[3]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Interface[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[1]"/> </tuple>
</field>

<field name="mandatory">
    <type> <sig name="bb/full/Port"/> <sig name="bb/full/Index"/> </type>
</field>

<field name="optional">
    <type> <sig name="bb/full/Port"/> <sig name="bb/full/Index"/> </type>
    <tuple> <atom name="bb/full/Port[0]"/> <atom name="bb/full/Zero[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[1]"/> <atom name="bb/full/Zero[0]"/> </tuple>
    <tuple> <atom name="bb/full/Port[2]"/> <atom name="bb/full/Zero[0]"/> </tuple>
</field>

<sig name="bb/full/Connector">
  <atom name="bb/full/Connector[0]"/>
</sig>

<field name="ends">
    <type> <sig name="bb/full/Connector"/> <sig name="bb/full/ConnectorEnd"/> </type>
    <tuple> <atom name="bb/full/Connector[0]"/> <atom name="bb/full/PartConnectorEnd[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connector[0]"/> <atom name="bb/full/ComponentConnectorEnd[0]"/> </tuple>
</field>

<sig name="bb/full/ConnectorEnd">
  <atom name="bb/full/PartConnectorEnd[0]"/>
  <atom name="bb/full/ComponentConnectorEnd[0]"/>
</sig>

<field name="portID">
    <type> <sig name="bb/full/ConnectorEnd"/> <sig name="bb/full/PortID"/> </type>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/PortID[1]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/PortID[0]"/> </tuple>
</field>

<field name="port">
    <type> <sig name="bb/full/ConnectorEnd"/> <sig name="bb/full/Port"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/Component"/> </type>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[1]"/> </tuple>
</field>

<field name="index">
    <type> <sig name="bb/full/ConnectorEnd"/> <sig name="bb/full/Index"/> </type>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Zero[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/Zero[0]"/> </tuple>
</field>

<field name="otherEnd">
    <type> <sig name="bb/full/ConnectorEnd"/> <sig name="bb/full/ConnectorEnd"/> </type>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/ComponentConnectorEnd[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentConnectorEnd[0]"/> <atom name="bb/full/PartConnectorEnd[0]"/> </tuple>
</field>

<sig name="bb/full/ComponentConnectorEnd" extends="bb/full/ConnectorEnd">
  <atom name="bb/full/ComponentConnectorEnd[0]"/>
</sig>

<sig name="bb/full/PartConnectorEnd" extends="bb/full/ConnectorEnd">
  <atom name="bb/full/PartConnectorEnd[0]"/>
</sig>

<field name="partID">
    <type> <sig name="bb/full/PartConnectorEnd"/> <sig name="bb/full/PartID"/> </type>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/PartID[0]"/> </tuple>
</field>

<field name="cpart">
    <type> <sig name="bb/full/PartConnectorEnd"/> <sig name="bb/full/Part"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/Component"/> </type>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[0]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[1]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/Component[4]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/Component[2]"/> </tuple>
    <tuple> <atom name="bb/full/PartConnectorEnd[0]"/> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[4]"/> </tuple>
</field>

<sig name="bb/full/Attribute">
</sig>

<field name="attributeType">
    <type> <sig name="bb/full/Attribute"/> <sig name="bb/full/PrimitiveType"/> </type>
</field>

<field name="defaultValue">
    <type> <sig name="bb/full/Attribute"/> <sig name="bb/full/AttributeValue"/> </type>
</field>

<sig name="bb/full/AttributeValue">
</sig>

<field name="valueType">
    <type> <sig name="bb/full/AttributeValue"/> <sig name="bb/full/PrimitiveType"/> </type>
</field>

<sig name="bb/full/Operation">
</sig>

<sig name="bb/full/InterfaceImplementation">
  <atom name="bb/full/InterfaceImplementation[0]"/>
</sig>

<sig name="bb/full/ComponentImplementation">
  <atom name="bb/full/ComponentImplementation[0]"/>
</sig>

<sig name="bb/full/PrimitiveTypeImplementation">
</sig>

<sig name="bb/full/Link">
</sig>

<field name="linkEnds">
    <type> <sig name="bb/full/Link"/> <sig name="bb/full/PortID"/> <sig name="bb/full/PortID"/> </type>
</field>

<sig name="bb/full/LinkEnd">
  <atom name="bb/full/PartLinkEnd[0]"/>
  <atom name="bb/full/ComponentLinkEnd[0]"/>
  <atom name="bb/full/ComponentLinkEnd[1]"/>
</sig>

<field name="linkPortID">
    <type> <sig name="bb/full/LinkEnd"/> <sig name="bb/full/PortID"/> </type>
    <tuple> <atom name="bb/full/PartLinkEnd[0]"/> <atom name="bb/full/PortID[1]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentLinkEnd[0]"/> <atom name="bb/full/PortID[1]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentLinkEnd[1]"/> <atom name="bb/full/PortID[0]"/> </tuple>
</field>

<field name="linkError">
    <type> <sig name="bb/full/LinkEnd"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/Component"/> </type>
    <tuple> <atom name="bb/full/ComponentLinkEnd[1]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/Component[0]"/> </tuple>
</field>

<sig name="bb/full/ComponentLinkEnd" extends="bb/full/LinkEnd">
  <atom name="bb/full/ComponentLinkEnd[0]"/>
  <atom name="bb/full/ComponentLinkEnd[1]"/>
</sig>

<sig name="bb/full/PartLinkEnd" extends="bb/full/LinkEnd">
  <atom name="bb/full/PartLinkEnd[0]"/>
</sig>

<field name="linkPartID">
    <type> <sig name="bb/full/PartLinkEnd"/> <sig name="bb/full/PartID"/> </type>
    <tuple> <atom name="bb/full/PartLinkEnd[0]"/> <atom name="bb/full/PartID[0]"/> </tuple>
</field>

<sig name="bb/full/Parts/Deltas">
  <atom name="bb/full/Parts/Deltas[0]"/>
  <atom name="bb/full/Parts/Deltas[1]"/>
  <atom name="bb/full/Parts/Deltas[2]"/>
  <atom name="bb/full/Parts/Deltas[3]"/>
</sig>

<field name="newObjects">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/full/Part[0]"/> </tuple>
</field>

<field name="addedObjects">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
</field>

<field name="replacedObjects">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/full/Part[0]"/> </tuple>
</field>

<field name="newIDs">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/full/PartID"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/PartID[0]"/> </tuple>
</field>

<field name="addObjects">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/full/PartID"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
</field>

<field name="deleteObjects">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/full/PartID"/> </type>
</field>

<field name="replaceObjects">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/full/PartID"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
</field>

<field name="objects_e">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PartID"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
</field>

<field name="objects">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/full/Part"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/full/Part[3]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/full/Part[2]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/full/Part[1]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/full/Part[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="oldObjects_e">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PartID"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
</field>

<field name="originalOldObjects_e">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PartID"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
</field>

<field name="deletedObjects_e">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PartID"/> </type>
</field>

<field name="replacedObjects_e">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PartID"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
</field>

<field name="originalObjects_e">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PartID"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[3]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
</field>

<field name="originalDeletedObjects_e">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PartID"/> </type>
</field>

<field name="originalReplacedObjects_e">
    <type> <sig name="bb/full/Parts/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PartID"/> <sig name="bb/full/Part"/> </type>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[2]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[1]"/> </tuple>
    <tuple> <atom name="bb/full/Parts/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PartID[0]"/> <atom name="bb/full/Part[0]"/> </tuple>
</field>

<sig name="bb/full/Ports/Deltas">
  <atom name="bb/full/Ports/Deltas[0]"/>
  <atom name="bb/full/Ports/Deltas[1]"/>
  <atom name="bb/full/Ports/Deltas[2]"/>
  <atom name="bb/full/Ports/Deltas[3]"/>
  <atom name="bb/full/Ports/Deltas[4]"/>
</sig>

<field name="newObjects">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/full/Port[0]"/> </tuple>
</field>

<field name="addedObjects">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
</field>

<field name="replacedObjects">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/full/Port[0]"/> </tuple>
</field>

<field name="newIDs">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/full/PortID"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/full/PortID[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/full/PortID[1]"/> </tuple>
</field>

<field name="addObjects">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/full/PortID"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
</field>

<field name="deleteObjects">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/full/PortID"/> </type>
</field>

<field name="replaceObjects">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/full/PortID"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
</field>

<field name="objects_e">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PortID"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[4]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
</field>

<field name="objects">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/full/Port"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/full/Port[2]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/full/Port[1]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[4]"/> <atom name="bb/full/Port[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="oldObjects_e">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PortID"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[4]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
</field>

<field name="originalOldObjects_e">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PortID"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[4]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
</field>

<field name="deletedObjects_e">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PortID"/> </type>
</field>

<field name="replacedObjects_e">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PortID"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[4]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
</field>

<field name="originalObjects_e">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PortID"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[1]"/> <atom name="bb/full/Port[2]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[1]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[4]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
</field>

<field name="originalDeletedObjects_e">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PortID"/> </type>
</field>

<field name="originalReplacedObjects_e">
    <type> <sig name="bb/full/Ports/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PortID"/> <sig name="bb/full/Port"/> </type>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
    <tuple> <atom name="bb/full/Ports/Deltas[4]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/PortID[0]"/> <atom name="bb/full/Port[0]"/> </tuple>
</field>

<sig name="bb/full/Connectors/Deltas">
  <atom name="bb/full/Connectors/Deltas[0]"/>
  <atom name="bb/full/Connectors/Deltas[1]"/>
  <atom name="bb/full/Connectors/Deltas[2]"/>
  <atom name="bb/full/Connectors/Deltas[3]"/>
</sig>

<field name="newObjects">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/full/Connector"/> </type>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
</field>

<field name="addedObjects">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/full/Connector"/> </type>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
</field>

<field name="replacedObjects">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/full/Connector"/> </type>
</field>

<field name="newIDs">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/full/ConnectorID"/> </type>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/full/ConnectorID[0]"/> </tuple>
</field>

<field name="addObjects">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/full/ConnectorID"/> <sig name="bb/full/Connector"/> </type>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
</field>

<field name="deleteObjects">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/full/ConnectorID"/> </type>
</field>

<field name="replaceObjects">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/full/ConnectorID"/> <sig name="bb/full/Connector"/> </type>
</field>

<field name="objects_e">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ConnectorID"/> <sig name="bb/full/Connector"/> </type>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
</field>

<field name="objects">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/full/Connector"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[3]"/> <atom name="bb/full/Connector[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="oldObjects_e">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ConnectorID"/> <sig name="bb/full/Connector"/> </type>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
</field>

<field name="originalOldObjects_e">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ConnectorID"/> <sig name="bb/full/Connector"/> </type>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[3]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
</field>

<field name="deletedObjects_e">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ConnectorID"/> </type>
</field>

<field name="replacedObjects_e">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ConnectorID"/> <sig name="bb/full/Connector"/> </type>
</field>

<field name="originalObjects_e">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ConnectorID"/> <sig name="bb/full/Connector"/> </type>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[2]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
    <tuple> <atom name="bb/full/Connectors/Deltas[3]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ConnectorID[0]"/> <atom name="bb/full/Connector[0]"/> </tuple>
</field>

<field name="originalDeletedObjects_e">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ConnectorID"/> </type>
</field>

<field name="originalReplacedObjects_e">
    <type> <sig name="bb/full/Connectors/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ConnectorID"/> <sig name="bb/full/Connector"/> </type>
</field>

<sig name="bb/full/Attributes/Deltas">
  <atom name="bb/full/Attributes/Deltas[0]"/>
</sig>

<field name="newObjects">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="addedObjects">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="replacedObjects">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="newIDs">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/full/AttributeID"/> </type>
</field>

<field name="addObjects">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="deleteObjects">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/full/AttributeID"/> </type>
</field>

<field name="replaceObjects">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="objects_e">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="objects">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/full/Attribute"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="oldObjects_e">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="originalOldObjects_e">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="deletedObjects_e">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/AttributeID"/> </type>
</field>

<field name="replacedObjects_e">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="originalObjects_e">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/Attribute"/> </type>
</field>

<field name="originalDeletedObjects_e">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/AttributeID"/> </type>
</field>

<field name="originalReplacedObjects_e">
    <type> <sig name="bb/full/Attributes/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/AttributeID"/> <sig name="bb/full/Attribute"/> </type>
</field>

<sig name="bb/full/Operations/Deltas">
</sig>

<field name="newObjects">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="addedObjects">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="replacedObjects">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="newIDs">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/full/OperationID"/> </type>
</field>

<field name="addObjects">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/full/OperationID"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="deleteObjects">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/full/OperationID"/> </type>
</field>

<field name="replaceObjects">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/full/OperationID"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="objects_e">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/OperationID"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="objects">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/full/Operation"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="oldObjects_e">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/OperationID"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="originalOldObjects_e">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/OperationID"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="deletedObjects_e">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/OperationID"/> </type>
</field>

<field name="replacedObjects_e">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/OperationID"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="originalObjects_e">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/OperationID"/> <sig name="bb/full/Operation"/> </type>
</field>

<field name="originalDeletedObjects_e">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/OperationID"/> </type>
</field>

<field name="originalReplacedObjects_e">
    <type> <sig name="bb/full/Operations/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/OperationID"/> <sig name="bb/full/Operation"/> </type>
</field>

<sig name="bb/full/InterfaceImplementation/Deltas">
  <atom name="bb/full/InterfaceImplementation/Deltas[0]"/>
</sig>

<field name="newObjects">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/full/InterfaceImplementation"/> </type>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
</field>

<field name="addedObjects">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/full/InterfaceImplementation"/> </type>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
</field>

<field name="replacedObjects">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/full/InterfaceImplementation"/> </type>
</field>

<field name="newIDs">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/full/InterfaceImplementationID"/> </type>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> </tuple>
</field>

<field name="addObjects">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/full/InterfaceImplementationID"/> <sig name="bb/full/InterfaceImplementation"/> </type>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
</field>

<field name="deleteObjects">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/full/InterfaceImplementationID"/> </type>
</field>

<field name="replaceObjects">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/full/InterfaceImplementationID"/> <sig name="bb/full/InterfaceImplementation"/> </type>
</field>

<field name="objects_e">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/InterfaceImplementationID"/> <sig name="bb/full/InterfaceImplementation"/> </type>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
</field>

<field name="objects">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/full/InterfaceImplementation"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="oldObjects_e">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/InterfaceImplementationID"/> <sig name="bb/full/InterfaceImplementation"/> </type>
</field>

<field name="originalOldObjects_e">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/InterfaceImplementationID"/> <sig name="bb/full/InterfaceImplementation"/> </type>
</field>

<field name="deletedObjects_e">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/InterfaceImplementationID"/> </type>
</field>

<field name="replacedObjects_e">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/InterfaceImplementationID"/> <sig name="bb/full/InterfaceImplementation"/> </type>
</field>

<field name="originalObjects_e">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/InterfaceImplementationID"/> <sig name="bb/full/InterfaceImplementation"/> </type>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/InterfaceImplementation/Deltas[0]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/InterfaceImplementationID[0]"/> <atom name="bb/full/InterfaceImplementation[0]"/> </tuple>
</field>

<field name="originalDeletedObjects_e">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/InterfaceImplementationID"/> </type>
</field>

<field name="originalReplacedObjects_e">
    <type> <sig name="bb/full/InterfaceImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/InterfaceImplementationID"/> <sig name="bb/full/InterfaceImplementation"/> </type>
</field>

<sig name="bb/full/ComponentImplementation/Deltas">
  <atom name="bb/full/ComponentImplementation/Deltas[0]"/>
  <atom name="bb/full/ComponentImplementation/Deltas[1]"/>
</sig>

<field name="newObjects">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/full/ComponentImplementation"/> </type>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
</field>

<field name="addedObjects">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/full/ComponentImplementation"/> </type>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
</field>

<field name="replacedObjects">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/full/ComponentImplementation"/> </type>
</field>

<field name="newIDs">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/full/ComponentImplementationID"/> </type>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/full/ComponentImplementationID[0]"/> </tuple>
</field>

<field name="addObjects">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/full/ComponentImplementationID"/> <sig name="bb/full/ComponentImplementation"/> </type>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
</field>

<field name="deleteObjects">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/full/ComponentImplementationID"/> </type>
</field>

<field name="replaceObjects">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/full/ComponentImplementationID"/> <sig name="bb/full/ComponentImplementation"/> </type>
</field>

<field name="objects_e">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ComponentImplementationID"/> <sig name="bb/full/ComponentImplementation"/> </type>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
</field>

<field name="objects">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/full/ComponentImplementation"/> <sig name="bb/base/Stratum"/> </type>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[1]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[2]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[3]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/full/ComponentImplementation[0]"/> <atom name="bb/base/Stratum[4]"/> </tuple>
</field>

<field name="oldObjects_e">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ComponentImplementationID"/> <sig name="bb/full/ComponentImplementation"/> </type>
</field>

<field name="originalOldObjects_e">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ComponentImplementationID"/> <sig name="bb/full/ComponentImplementation"/> </type>
</field>

<field name="deletedObjects_e">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ComponentImplementationID"/> </type>
</field>

<field name="replacedObjects_e">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ComponentImplementationID"/> <sig name="bb/full/ComponentImplementation"/> </type>
</field>

<field name="originalObjects_e">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ComponentImplementationID"/> <sig name="bb/full/ComponentImplementation"/> </type>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[0]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[1]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[2]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[3]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
    <tuple> <atom name="bb/full/ComponentImplementation/Deltas[1]"/> <atom name="bb/base/Stratum[4]"/> <atom name="bb/full/ComponentImplementationID[0]"/> <atom name="bb/full/ComponentImplementation[0]"/> </tuple>
</field>

<field name="originalDeletedObjects_e">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ComponentImplementationID"/> </type>
</field>

<field name="originalReplacedObjects_e">
    <type> <sig name="bb/full/ComponentImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/ComponentImplementationID"/> <sig name="bb/full/ComponentImplementation"/> </type>
</field>

<sig name="bb/full/PrimitiveTypeImplementation/Deltas">
</sig>

<field name="newObjects">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="addedObjects">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="replacedObjects">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="newIDs">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> </type>
</field>

<field name="addObjects">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="deleteObjects">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> </type>
</field>

<field name="replaceObjects">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="objects_e">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="objects">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/full/PrimitiveTypeImplementation"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="oldObjects_e">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="originalOldObjects_e">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="deletedObjects_e">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> </type>
</field>

<field name="replacedObjects_e">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="originalObjects_e">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<field name="originalDeletedObjects_e">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> </type>
</field>

<field name="originalReplacedObjects_e">
    <type> <sig name="bb/full/PrimitiveTypeImplementation/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/PrimitiveTypeImplementationID"/> <sig name="bb/full/PrimitiveTypeImplementation"/> </type>
</field>

<sig name="bb/full/Links/Deltas">
  <atom name="bb/full/Links/Deltas[0]"/>
  <atom name="bb/full/Links/Deltas[1]"/>
</sig>

<field name="newObjects">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="addedObjects">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="replacedObjects">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="newIDs">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/full/LinkID"/> </type>
</field>

<field name="addObjects">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/full/LinkID"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="deleteObjects">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/full/LinkID"/> </type>
</field>

<field name="replaceObjects">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/full/LinkID"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="objects_e">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/LinkID"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="objects">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/full/Link"/> <sig name="bb/base/Stratum"/> </type>
</field>

<field name="oldObjects_e">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/LinkID"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="originalOldObjects_e">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/LinkID"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="deletedObjects_e">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/LinkID"/> </type>
</field>

<field name="replacedObjects_e">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/LinkID"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="originalObjects_e">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/LinkID"/> <sig name="bb/full/Link"/> </type>
</field>

<field name="originalDeletedObjects_e">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/LinkID"/> </type>
</field>

<field name="originalReplacedObjects_e">
    <type> <sig name="bb/full/Links/Deltas"/> <sig name="bb/base/Stratum"/> <sig name="bb/full/LinkID"/> <sig name="bb/full/Link"/> </type>
</field>

<sig name="Int">
  <atom name="-8"/>
  <atom name="-7"/>
  <atom name="-6"/>
  <atom name="-5"/>
  <atom name="-4"/>
  <atom name="-3"/>
  <atom name="-2"/>
  <atom name="-1"/>
  <atom name="0"/>
  <atom name="1"/>
  <atom name="2"/>
  <atom name="3"/>
  <atom name="4"/>
  <atom name="5"/>
  <atom name="6"/>
  <atom name="7"/>
</sig>

<sig name="seq/Int" extends="Int">
  <atom name="0"/>
  <atom name="1"/>
  <atom name="2"/>
</sig>

<set name="$conflictAndResolution_s1" type="bb/base/Stratum">
  <atom name="bb/base/Stratum[4]"/>
</set>

<set name="$conflictAndResolution_s2" type="bb/base/Stratum">
  <atom name="bb/base/Stratum[3]"/>
</set>

<set name="$conflictAndResolution_s3" type="bb/base/Stratum">
  <atom name="bb/base/Stratum[2]"/>
</set>

<set name="$conflictAndResolution_s4" type="bb/base/Stratum">
  <atom name="bb/base/Stratum[1]"/>
</set>

<set name="$conflictAndResolution_s5" type="bb/base/Stratum">
  <atom name="bb/base/Stratum[0]"/>
</set>

</instance>

<source filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/unittests_conflict.als" content="module unittests_redefinition&#x000a;&#x000a;open bb&#x000a;&#x000a;run conflict for 3 but exactly 4 Stratum, 5 Element, exactly 4 Component, exactly 1 Interface, 4 bb/full/Ports/Deltas -- , exactly 1 Index&#x000a;// generates a conflict that isn&apos;t resolved: replaced parts will be the same.  runs in about 200 secs&#x000a;pred conflict()&#x000a;{&#x000a;&#x0009;no parent&#x000a;&#x0009;no links&#x000a;&#x0009;Model::errorsAllowedInTopOnly[]&#x0009;&#x000a;&#x0009;no isTop.True.ownedElements&#x000a;&#x0009;some isInvalid_e&#x000a;&#x0009;one c : Component | no c.isComposite&#x000a;}&#x000a;&#x000a;&#x000a;&#x000a;run conflictAndResolution for 3 but&#x000a;&#x0009;exactly 5 Stratum,&#x000a;&#x0009;exactly 6 Element,&#x000a;&#x0009;exactly 5 Component,&#x000a;&#x0009;exactly 1 Interface,&#x000a;&#x0009;exactly 5 bb/full/Ports/Deltas,&#x000a;&#x0009;exactly 4 bb/full/Parts/Deltas,&#x000a;&#x0009;exactly 4 bb/full/Connectors/Deltas,&#x000a;&#x0009;exactly 0 bb/full/Operations/Deltas,&#x000a;&#x0009;exactly 4 Part,&#x000a;&#x0009;5 LinkEnd&#x000a;// generates a conflict and resolves it: replaced parts will be the same.  runs in about 332 seconds &#x000a;pred conflictAndResolution&#x000a;{&#x000a;&#x0009;no parent&#x000a;&#x0009;no links&#x000a;&#x0009;some isInvalid_e&#x000a;&#x0009;some disj s1, s2, s3, s4, s5: Stratum&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;s1.dependsOn = s2&#x000a;&#x0009;&#x0009;s2.dependsOn = s3 + s4&#x000a;&#x0009;&#x0009;s3.dependsOn = s5&#x000a;&#x0009;&#x0009;s4.dependsOn = s5&#x000a;&#x0009;&#x0009;no s2.ownedElements&#x000a;&#x0009;&#x0009;Model::errorsOnlyAllowedIn[s2]&#x000a;&#x0009;}&#x000a;}&#x000a;"/>

<source filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/bb.als" content="module bb&#x000a;&#x000a;-- opening the two structure modules here is not strictly necessary, but it simplifies the naming&#x000a;open base_structure as base&#x000a;open bb_structure as full&#x000a;&#x000a;open bb_well_formed&#x000a;open bb_port_inference&#x000a;open base_facts&#x000a;&#x000a;&#x000a;--------------------------------------------------------------------&#x000a;-- handle any extra rules for interfaces&#x000a;--------------------------------------------------------------------&#x000a;&#x000a;fact InterfaceFacts&#x000a;{&#x000a;&#x0009;all i: Interface |&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;owner = i.home&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- we only need to form a definition for stratum that can see us&#x000a;&#x0009;&#x0009;all s: Stratum |&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;invalid = s in i.isInvalid_e,&#x000a;&#x0009;&#x0009;&#x0009;visible = owner in s.transitivePlusMe&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- if we can see this interface, test to see if it is valid in this stratum&#x000a;&#x0009;&#x0009;&#x0009;not visible =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;invalidateUnseenInterface[s, i]&#x000a;&#x0009;&#x0009;&#x0009;else&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- ensure that the subtypes are set up correctly&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- this is a subtype of an interface if we can reach it transitively and&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- our set of operations are a super-set of the super type&apos;s&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- of operationID -&gt; Operation.  i.e. if you replace an operationID you are breaking subtype&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- so the operationID is the name, and the Operation is the full spec which is assumed to have&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- changed in a replacement...&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- NOTE: the super types are direct -- to follow use closure&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;--       also note that we only need/want supertypes for non-primes&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;no i.replaces =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;i.superTypes.s =&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;{ super: i.resembles |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;super.myOperations.objects_e[s] in&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;i.myOperations.objects_e[s] }&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;else&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;no i.superTypes.s&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- merge any parts and apply changes&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;let topmost = getTopmost[s, i] &amp; Interface&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;i.myOperations::mergeAndApplyChangesForResemblance[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, i, i.resembles_e.s.myOperations]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;i.myOperations::mergeAndApplyChangesForElementReplacement[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, i, topmost, topmost.myOperations]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;i.myIImplementation::mergeAndApplyChangesForResemblance[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, i, i.resembles_e.s.myIImplementation]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;i.myIImplementation::mergeAndApplyChangesForElementReplacement[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, i, topmost, topmost.myIImplementation]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- the interface must be valid in the place it was defined&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;(s = owner or s not in Model.errorsAllowed) =&gt; !invalid&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;s = owner =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;i.myOperations.deltasIsWellFormed[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;i.myIImplementation.deltasIsWellFormed[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- a component is valid if it is well formed...&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;!invalid &lt;=&gt; interfaceIsWellFormed[s, i]&#x000a;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;&#x000a;--------------------------------------------------------------------&#x000a;-- handle any extra rules for primitive types&#x000a;--------------------------------------------------------------------&#x000a;&#x000a;fact PrimitiveTypeFacts&#x000a;{&#x000a;&#x0009;all t: PrimitiveType |&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;owner = t.home&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- we only need to form a definition for stratum that can see us&#x000a;&#x0009;&#x0009;all s: Stratum |&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;invalid = s in t.isInvalid_e,&#x000a;&#x0009;&#x0009;&#x0009;visible = owner in s.transitivePlusMe&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- if we can see this interface, test to see if it is valid in this stratum&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;not visible =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;invalidateUnseenPrimitiveType[s, t]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;else&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;-- merge any parts and apply changes&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;let topmost = getTopmost[s, t] &amp; PrimitiveType&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;t.myTImplementation::mergeAndApplyChangesForResemblance[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, t, t.resembles_e.s.myTImplementation]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;t.myTImplementation::mergeAndApplyChangesForElementReplacement[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, t, topmost, topmost.myTImplementation]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;-- the primitive type must be valid in the place it was defined&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;(s = owner or s not in Model.errorsAllowed) =&gt; !invalid&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s = owner =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;t.myTImplementation.deltasIsWellFormed[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;-- a component is valid if it is well formed...&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;!invalid &lt;=&gt; primitiveTypeIsWellFormed[s, t]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;--------------------------------------------------------------------&#x000a;-- handle any extra rules for components&#x000a;--------------------------------------------------------------------&#x000a;&#x000a;fact ComponentFacts&#x000a;{&#x000a;&#x0009;-- no part or port can refer explicitly to a replaced component or interface&#x000a;&#x0009;no partType.replaces&#x000a;&#x0009;no (setProvided + setRequired).replaces&#x000a;&#x000a;&#x0009;all c: Component |&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;owner = c.home,&#x000a;&#x0009;&#x0009;-- strata that the component can see&#x000a;&#x0009;&#x0009;iCanSeePlusMe = owner.canSeePlusMe,&#x000a;&#x0009;&#x0009;types = c.myParts.newObjects.partType,&#x000a;&#x0009;&#x0009;attrTypes = c.myAttributes.newObjects.attributeType,&#x000a;&#x0009;&#x0009;interfaces = c.myPorts.addedObjects.(setRequired + setProvided)&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- resemblance has no redundancy&#x000a;&#x0009;&#x0009;c.resembles = c.resembles - c.resembles.^resembles&#x000a;&#x000a;&#x0009;&#x0009;-- attribute types, part types and port interfaces must be visible&#x000a;&#x0009;&#x0009;types.home in iCanSeePlusMe&#x000a;&#x0009;&#x0009;interfaces.home in iCanSeePlusMe&#x000a;&#x0009;&#x0009;attrTypes.home in iCanSeePlusMe&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;-- ensure that the port remaps are correctly formed for the stratum they are owned by&#x000a;&#x0009;&#x0009;let delta = c.myParts |&#x000a;&#x0009;&#x0009;all p: delta.newObjects | -- parts of the delta&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;partID = delta.replaceObjects.p,&#x000a;&#x0009;&#x0009;&#x0009;oldPart = delta.oldObjects_e[owner][partID],&#x000a;&#x0009;&#x0009;&#x0009;remap = p.portRemap,&#x000a;&#x0009;&#x0009;&#x0009;newPortIDs = dom[remap],&#x000a;&#x0009;&#x0009;&#x0009;oldPortIDs = ran[remap]&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- we can only alias ports that we actually have&#x000a;&#x0009;&#x0009;&#x0009;newPortIDs in dom[p.partType.myPorts.objects_e[owner]]&#x000a;&#x0009;&#x0009;&#x0009;-- we can only use port ids of the component we are replacing&#x000a;&#x0009;&#x0009;&#x0009;oldPortIDs in dom[oldPart.partType.myPorts.objects_e[owner]]&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;-- each port we remap should have a different id, or there&apos;s no point&#x000a;&#x0009;&#x0009;&#x0009;-- this is not strictly needed, but ensures nice witnesses&#x000a;&#x0009;&#x0009;&#x0009;bijection[remap, newPortIDs, oldPortIDs]&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;-- can&apos;t map a port id onto the same id&#x000a;&#x0009;&#x0009;&#x0009;no remap &amp; iden&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;-- we only need to form a definition for stratum that can see us&#x000a;&#x0009;&#x0009;all s: Stratum |&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;invalid = s in c.isInvalid_e,&#x000a;&#x0009;&#x0009;&#x0009;visible = owner in s.transitivePlusMe&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- if we can see this component, test to see if it is valid in this stratum&#x000a;&#x0009;&#x0009;&#x0009;not visible =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;invalidateUnseenComponent[s, c]&#x000a;&#x0009;&#x0009;&#x0009;else&#x000a;&#x0009;&#x0009;&#x0009;let topmost = getTopmost[s, c] &amp; Component&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- this is a composite in this stratum if it has parts&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;s in c.isComposite &lt;=&gt; some c.parts.s&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- merge any parts and apply changes&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myParts::mergeAndApplyChangesForResemblance[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, c.resembles_e.s.myParts]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myParts::mergeAndApplyChangesForElementReplacement[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, topmost, topmost.myParts]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- merge any ports and apply changes&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myPorts::mergeAndApplyChangesForResemblance[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, c.resembles_e.s.myPorts]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myPorts::mergeAndApplyChangesForElementReplacement[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, topmost, topmost.myPorts]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- merge any connectors and apply changes&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myConnectors::mergeAndApplyChangesForResemblance[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, c.resembles_e.s.myConnectors]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myConnectors::mergeAndApplyChangesForElementReplacement[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, topmost, topmost.myConnectors]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- merge any attributes and apply changes&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myAttributes::mergeAndApplyChangesForResemblance[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, c.resembles_e.s.myAttributes]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myAttributes::mergeAndApplyChangesForElementReplacement[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, topmost, topmost.myAttributes]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- merge any implementations and apply changes&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myCImplementation::mergeAndApplyChangesForResemblance[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, c.resembles_e.s.myCImplementation]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myCImplementation::mergeAndApplyChangesForElementReplacement[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, topmost, topmost.myCImplementation]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- merge any implementations and apply changes&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myLinks::mergeAndApplyChangesForResemblance[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, c.resembles_e.s.myLinks]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;c.myLinks::mergeAndApplyChangesForElementReplacement[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s, c, topmost, topmost.myLinks]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- if we are &quot;home&quot;, all the deltas must be well formed...&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- this is not necessarily the case if we are not home&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;s = owner =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;c.myParts.deltasIsWellFormed[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;c.myPorts.deltasIsWellFormed[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;c.myConnectors.deltasIsWellFormed[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;c.myAttributes.deltasIsWellFormed[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;c.myCImplementation.deltasIsWellFormed[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;c.myLinks.deltasIsWellFormed[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;setupParts[s, c]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;setupConnectors[s, c]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;s in c.isComposite =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;setupCompositeLinks[s, c]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;else&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;setupLeafLinks[s, c]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- the component must be valid in the place it was defined&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;(s = owner or s not in Model.errorsAllowed) =&gt; !invalid&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- a component is invalid iff it is not well formed&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;invalid &lt;=&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;(!componentIsWellFormed[s, c] or !linksAreWellFormed[s, c])&#x000a;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;pred setupParts(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;-- reference the parts we are linked to and link to the outside if true&#x000a;&#x0009;let allParts = c.parts.s&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;no (Part - allParts).linkedToParts.c.s&#x000a;&#x0009;&#x0009;all pPart: allParts |&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;pPart.linkedToParts.c.s =&#x000a;&#x0009;&#x0009;&#x0009;{ p: allParts - pPart |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;some end: c.connectors.s.ends |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;end.cpart.c.s = pPart and end.otherEnd.cpart.c.s = p }&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;-- reference if we are linked to the outside of the component&#x000a;&#x0009;&#x0009;&#x0009;s -&gt; c in pPart.linkedToOutside &lt;=&gt;&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;some end: c.connectors.s.ends |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;end.cpart.c.s = pPart and end.otherEnd in ComponentConnectorEnd&#x000a;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;&#x000a;&#x0009;-- form the full port map for this stratum, taking remap into account&#x000a;&#x0009;all p: c.myParts.newObjects |&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;-- turn the remap from id -&gt; id to id -&gt; port&#x000a;&#x0009;&#x0009;idToPort = p.partType.myPorts.objects_e[s],&#x000a;&#x0009;&#x0009;newPorts = idToPort[PortID],&#x000a;&#x0009;&#x0009;remap =&#x000a;&#x0009;&#x0009;&#x0009;{ newPort: newPorts, oldID: PortID |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;idToPort.newPort -&gt; oldID in p.portRemap }&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- remove the existing ID of the port before adding the new one&#x000a;&#x0009;&#x0009;~(p.portMap[s]) =&#x000a;&#x0009;&#x0009;&#x0009;~(p.partType.myPorts.objects_e[s]) ++ remap&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;&#x000a;-- if the connector is not visibile to a component in a stratum, it should be zeroed out to&#x000a;-- make it easier to interpret the results and and zeroOutUnseenElement[s, e] cut back on the state space for performance reasons&#x000a;fact ZeroOutUnseenConnectorsFact&#x000a;{&#x000a;&#x0009;all conn: Connector, c: Component, s: Stratum |&#x000a;&#x0009;conn not in c.connectors.s =&gt;&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;all end: conn.ends&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;no end.port.c.s&#x000a;&#x0009;&#x0009;&#x0009;no end.cpart.c.s&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;-- if the part is not visible to a component in a stratum, it should also be zeroed out&#x000a;-- for understandability and performance reasons&#x000a;fact ZeroOutUnseenPartsFact&#x000a;{&#x000a;&#x0009;all p: Part, c: Component, s: Stratum |&#x000a;&#x0009;p not in c.parts.s =&gt;&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;no p.linkedToParts.c.s&#x000a;&#x0009;&#x0009;s-&gt; c not in p.linkedToOutside&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;-- if the part is not visible to a component in a stratum, it should also be zeroed out&#x000a;-- for understandability and performance reasons&#x000a;-- NOTE: if you move the valid setting up into the main body, it gets slow&#x000a;pred invalidateUnseenComponent(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;s not in c.isInvalid_e -- it isn&apos;t invalid here&#x000a;&#x0009;no c.parts.s&#x000a;&#x0009;no c.iDParts.s&#x000a;&#x0009;no c.ports.s&#x000a;&#x0009;no c.connectors.s&#x000a;&#x0009;no c.attributes.s&#x000a;&#x0009;no c.cimplementation.s&#x000a;&#x0009;no c.inferredLinks.s&#x000a;&#x0009;no c.links.s&#x000a;&#x0009;s not in c.isComposite&#x000a;&#x0009;c.myParts::nothing[s]&#x000a;&#x0009;c.myAttributes::nothing[s]&#x000a;&#x0009;c.myPorts::nothing[s]&#x000a;&#x0009;c.myConnectors::nothing[s]&#x000a;&#x0009;c.myCImplementation::nothing[s]&#x000a;&#x0009;c.myLinks::nothing[s]&#x000a;}&#x000a;&#x000a;pred invalidateUnseenInterface(s: Stratum, i: Interface)&#x000a;{&#x000a;&#x0009;s not in i.isInvalid_e -- it isn&apos;t invalid here&#x000a;&#x0009;no i.operations.s&#x000a;&#x0009;no i.iimplementation.s&#x000a;&#x0009;i.myOperations::nothing[s]&#x000a;&#x0009;i.myIImplementation::nothing[s]&#x000a;&#x0009;no i.superTypes.s&#x000a;}&#x000a;&#x000a;pred invalidateUnseenPrimitiveType(s: Stratum, t: PrimitiveType)&#x000a;{&#x000a;&#x0009;s not in t.isInvalid_e -- it isn&apos;t invalid here&#x000a;&#x0009;no t.timplementation.s&#x000a;&#x0009;t.myTImplementation::nothing[s]&#x000a;}&#x000a;&#x000a;pred invalidateUnseenPorts()&#x000a;{&#x000a;&#x0009;all s: Stratum, c: Component&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;all p: Port |&#x000a;&#x0009;&#x0009;&#x0009;p not in c.ports.s =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;no p.(provided + required).c.s&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;-- some predicates to help with structuring a model&#x000a;pred Model::providesIsOptional()&#x000a;{&#x000a;&#x0009;Model.providesIsOptional = True&#x000a;}&#x000a;&#x000a;pred Model::providesIsNotOptional()&#x000a;{&#x000a;&#x0009;Model.providesIsOptional = False&#x000a;}&#x000a;&#x000a;pred Model::noErrorsAllowed()&#x000a;{&#x000a;&#x0009;no this.errorsAllowed&#x000a;}&#x000a;&#x000a;pred Model::errorsAllowedInTopOnly()&#x000a;{&#x000a;&#x0009;this.errorsAllowed = isTop.True&#x000a;}&#x000a;&#x000a;pred Model::topDefinesNothing()&#x000a;{&#x000a;&#x0009;no isTop.True.ownedElements&#x000a;}&#x000a;&#x000a;pred Model::definesNothing(s: Stratum)&#x000a;{&#x000a;&#x0009;no s.ownedElements&#x000a;}&#x000a;&#x000a;pred Model::errorsOnlyAllowedInTopAndOthers(others: set Stratum)&#x000a;{&#x000a;&#x0009;this.errorsAllowed = others + isTop.True&#x000a;}&#x000a;&#x000a;pred Model::errorsOnlyAllowedIn(others: set Stratum)&#x000a;{&#x000a;&#x0009;this.errorsAllowed = others&#x000a;}&#x000a;&#x000a;pred Model::forceErrors(errorStrata: set Stratum)&#x000a;{&#x000a;&#x0009;all e: errorStrata |&#x000a;&#x0009;&#x0009;some isInvalid_e.e&#x000a;}&#x000a;"/>

<source filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/base_structure.als" content="module base_structure&#x000a;&#x000a;open util/boolean as boolean&#x000a;open util/relation as relation&#x000a;&#x000a;&#x000a;one sig Model&#x000a;{&#x000a;&#x0009;-- normally this should be set to none&#x000a;&#x0009;errorsAllowed: set Stratum,&#x000a;&#x0009;providesIsOptional: Bool&#x000a;}&#x000a;&#x000a;////open stratum&#x000a;sig Stratum&#x000a;{&#x000a;&#x0009;parent: lone Stratum,&#x000a;&#x0009;&#x000a;&#x0009;-- external strata that this depends directly on&#x000a;&#x0009;dependsOn: set Stratum,&#x000a;&#x0009;-- any child packages that are explicitly depended on&#x000a;&#x0009;dependsOnNested: set Stratum,&#x000a;&#x0009;-- nested stratum are any with this as the direct parent&#x000a;&#x0009;nestedStrata: set Stratum,&#x000a;&#x0009;&#x000a;&#x0009;-- does this export stratum it depends on?&#x000a;&#x0009;isRelaxed: Bool,&#x000a;&#x0009;ownedElements: set Element,&#x000a;&#x000a;////comment stratum     -- derived state&#x000a;&#x0009;-- derived state -- export strata includes this and canSee&#x000a;&#x0009;exportsStrata: set Stratum,&#x000a;&#x0009;canSee: set Stratum,&#x000a;&#x000a;&#x0009;-- simple is all that we directly depend on&#x000a;&#x0009;-- taking away what any children depend on&#x000a;&#x0009;simpleDependsOn: set Stratum,&#x000a;&#x000a;&#x0009;-- a single top exists which binds directly&#x000a;&#x0009;-- any independent stratum&#x000a;&#x0009;isTop: Bool,&#x000a;&#x0009;-- this is every stratum that can be seen from here down&#x000a;&#x0009;transitive: set Stratum,&#x000a;&#x0009;-- elements that replace others&#x000a;&#x0009;replacing: set Element,&#x000a;////pause stratum&#x000a;&#x0009;canSeePlusMe: set Stratum,&#x000a;&#x0009;transitivePlusMe: set Stratum,&#x000a;&#x000a;&#x0009;-- components that are new definitions&#x000a;&#x0009;defining: set Element&#x000a;////unpause stratum&#x000a;}&#x000a;////close stratum&#x000a;{&#x000a;&#x0009;defining = ownedElements - replacing&#x000a;&#x0009;canSeePlusMe = canSee + this&#x000a;&#x0009;transitivePlusMe = transitive + this&#x000a;&#x0009;nestedStrata = {n: Stratum | n.@parent = this}&#x000a;}&#x000a;&#x000a;---------------------------------------------------&#x000a;-- handle the basics of resemblance and replacement&#x000a;---------------------------------------------------&#x000a;&#x000a;////open element&#x000a;abstract sig Element&#x000a;{&#x000a;&#x0009;home: Stratum,&#x000a;&#x0009;replaces: lone Element,&#x000a;&#x0009;resembles: set Element,&#x000a;&#x000a;////comment element -- derived state&#x000a;&#x0009;-- for a given stratum, a component resembles other components in a given stratum view&#x000a;&#x0009;resembles_e: Element -&gt; Stratum,&#x000a;&#x0009;-- does this act as a non-primed for a particular stratum&#x000a;&#x0009;actsAs_e: Element -&gt; Stratum,&#x000a;&#x0009;-- is this element valid for a given stratum?&#x000a;&#x0009;isInvalid_e: set Stratum&#x000a;}&#x000a;////close element&#x000a;{&#x000a;&#x0009;-- owned by a single stratum&#x000a;&#x0009;home = ownedElements.this&#x000a;}&#x000a;"/>

<source filename="/tmp/alloy4tmp19-andrew/models/util/boolean.als" content="module util/boolean&#x000a;&#x000a;/*&#x000a; * Creates a Bool type with two singleton subtypes: True&#x000a; * and False. Provides common boolean operations.&#x000a; *&#x000a; * author: Greg Dennis&#x000a; */&#x000a;&#x000a;abstract sig Bool {}&#x000a;one sig True, False extends Bool {}&#x000a;&#x000a;pred isTrue[b: Bool] { b in True }&#x000a;&#x000a;pred isFalse[b: Bool] { b in False }&#x000a;&#x000a;fun Not[b: Bool] : Bool {&#x000a;  Bool - b&#x000a;}&#x000a;&#x000a;fun And[b1, b2: Bool] : Bool {&#x000a;  subset_[b1 + b2, True]&#x000a;}&#x000a;&#x000a;fun Or[b1, b2: Bool] : Bool {&#x000a;  subset_[True, b1 + b2]&#x000a;}&#x000a;&#x000a;fun Xor[b1, b2: Bool] : Bool {&#x000a;  subset_[Bool, b1 + b2]&#x000a;}&#x000a;&#x000a;fun Nand[b1, b2: Bool] : Bool {&#x000a;  subset_[False, b1 + b2]&#x000a;}&#x000a;&#x000a;fun Nor[b1, b2: Bool] : Bool {&#x000a;  subset_[b1 + b2, False]&#x000a;}&#x000a;&#x000a;fun subset_[s1, s2: set Bool] : Bool {&#x000a;  (s1 in s2) =&gt; True else False&#x000a;}&#x000a;"/>

<source filename="/tmp/alloy4tmp19-andrew/models/util/relation.als" content="module util/relation&#x000a;&#x000a;/*&#x000a; * Utilities for some common operations and constraints&#x000a; * on binary relations. The keyword &apos;univ&apos; represents the&#x000a; * top-level type, which all other types implicitly extend.&#x000a; * Therefore, all the functions and predicates in this model&#x000a; * may be applied to binary relations of any type.&#x000a; *&#x000a; * author: Greg Dennis&#x000a; */&#x000a;&#x000a;// returns the domain of a binary relation&#x000a;fun dom [r: univ-&gt;univ] : set univ { r.univ }&#x000a;&#x000a;// returns the range of a binary relation&#x000a;fun ran [r: univ-&gt;univ] : set univ { univ.r }&#x000a;&#x000a;// r is total over the domain s&#x000a;pred total [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | some x.r&#x000a;}&#x000a;&#x000a;// r is a partial function over the domain s&#x000a;pred functional [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | lone x.r&#x000a;}&#x000a;&#x000a;// r is a total function over the domain s&#x000a;pred function [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | one x.r&#x000a;}&#x000a;&#x000a;// r is surjective over the codomain s&#x000a;pred surjective [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | some r.x&#x000a;}&#x000a;&#x000a;// r is injective&#x000a;pred injective [r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | lone r.x&#x000a;}&#x000a;&#x000a;// r is bijective over the codomain s&#x000a;pred bijective[r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | one r.x&#x000a;}&#x000a;&#x000a;// r is a bijection over the domain d and the codomain c&#x000a;pred bijection[r: univ-&gt;univ, d, c: set univ] {&#x000a;  function[r, d] &amp;&amp; bijective[r, c]&#x000a;}&#x000a;&#x000a;// r is reflexive over the set s&#x000a;pred reflexive [r: univ -&gt; univ, s: set univ] {s&lt;:iden in r}&#x000a;&#x000a;// r is irreflexive&#x000a;pred irreflexive [r: univ -&gt; univ] {no iden &amp; r}&#x000a;&#x000a;// r is symmetric&#x000a;pred symmetric [r: univ -&gt; univ] {~r in r}&#x000a;&#x000a;// r is anti-symmetric&#x000a;pred antisymmetric [r: univ -&gt; univ] {~r &amp; r in iden}&#x000a;&#x000a;// r is transitive&#x000a;pred transitive [r: univ -&gt; univ] {r.r in r}&#x000a;&#x000a;// r is acyclic over the set s&#x000a;pred acyclic[r: univ-&gt;univ, s: set univ] {&#x000a;  all x: s | x !in x.^r&#x000a;}&#x000a;&#x000a;// r is complete over the set s&#x000a;pred complete[r: univ-&gt;univ, s: univ] {&#x000a;  all x,y:s | (x!=y =&gt; x-&gt;y in (r + ~r))&#x000a;}&#x000a;&#x000a;// r is a preorder (or a quasi-order) over the set s&#x000a;pred preorder [r: univ -&gt; univ, s: set univ] {&#x000a;  reflexive[r, s]&#x000a;  transitive[r]&#x000a;}&#x000a;&#x000a;// r is an equivalence relation over the set s&#x000a;pred equivalence [r: univ-&gt;univ, s: set univ] {&#x000a;  preorder[r, s]&#x000a;  symmetric[r]&#x000a;}&#x000a;&#x000a;// r is a partial order over the set s&#x000a;pred partialOrder [r: univ -&gt; univ, s: set univ] {&#x000a;  preorder[r, s]&#x000a;  antisymmetric[r]&#x000a;}&#x000a;&#x000a;// r is a total order over the set s&#x000a;pred totalOrder [r: univ -&gt; univ, s: set univ] {&#x000a;  partialOrder[r, s]&#x000a;  complete[r, s]&#x000a;}&#x000a;"/>

<source filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/bb_structure.als" content="module bb_structure&#x000a;&#x000a;open base_deltas[PartID, Part] as Parts&#x000a;open base_deltas[PortID, Port] as Ports&#x000a;open base_deltas[ConnectorID, Connector] as Connectors&#x000a;open base_deltas[AttributeID, Attribute] as Attributes&#x000a;open base_deltas[OperationID, Operation] as Operations&#x000a;open base_deltas[InterfaceImplementationID, InterfaceImplementation] as InterfaceImplementation&#x000a;open base_deltas[ComponentImplementationID, ComponentImplementation] as ComponentImplementation&#x000a;open base_deltas[PrimitiveTypeImplementationID, PrimitiveTypeImplementation] as PrimitiveTypeImplementation&#x000a;open base_deltas[LinkID, Link] as Links&#x000a;&#x000a;////open component&#x000a;sig Component extends Element&#x000a;{&#x000a;&#x0009;myParts: lone Parts/Deltas,&#x000a;&#x0009;myPorts: lone Ports/Deltas,&#x000a;&#x0009;myConnectors: lone Connectors/Deltas,&#x000a;&#x0009;myAttributes: lone Attributes/Deltas,&#x000a;&#x0009;myCImplementation: lone ComponentImplementation/Deltas,&#x000a;&#x0009;myLinks: lone Links/Deltas,&#x000a;&#x0009;&#x000a;////comment component -- derived, perspective state&#x000a;&#x0009;-- the final result, after taking replacement + resemblance into account&#x000a;&#x0009;iDParts: PartID -&gt; Part -&gt; Stratum,&#x000a;&#x0009;-- composite or leaf?&#x000a;&#x0009;isComposite: set Stratum,&#x000a;&#x0009;parts: Part -&gt; Stratum,&#x000a;&#x0009;ports: Port -&gt; Stratum,&#x000a;&#x0009;connectors: Connector -&gt; Stratum,&#x000a;&#x0009;attributes: Attribute -&gt; Stratum,&#x000a;&#x0009;cimplementation: ComponentImplementation -&gt; Stratum,&#x000a;&#x0009;links: Link -&gt; Stratum,&#x000a;&#x0009;&#x000a;////close component&#x000a;&#x0009;-- the internal links, used for port type inferencing&#x000a;&#x0009;inferredLinks: Port -&gt; Port -&gt; Stratum&#x000a;}&#x000a;{&#x000a;&#x0009;-- for components&#x000a;&#x0009;replaces + resembles in Component&#x000a;&#x0009;-- propagate up the objects from the delta into the sig, to make it more convenient&#x000a;&#x0009;parts = myParts.objects&#x000a;&#x0009;ports = myPorts.objects&#x000a;&#x0009;connectors = myConnectors.objects&#x000a;&#x0009;attributes = myAttributes.objects&#x000a;&#x0009;cimplementation = myCImplementation.objects&#x000a;&#x0009;links = myLinks.objects&#x000a;&#x000a;&#x0009;-- form idParts&#x000a;&#x0009;iDParts = {n: PartID, p: Part, s: Stratum | s -&gt; n -&gt; p in myParts.objects_e}&#x000a;}&#x000a;&#x000a;-- ensure each delta is composed by only one component&#x000a;fact&#x000a;{&#x000a;&#x0009;all p: Parts/Deltas | one myParts.p&#x000a;&#x0009;all p: Ports/Deltas | one myPorts.p&#x000a;&#x0009;all c: Connectors/Deltas | one myConnectors.c&#x000a;&#x0009;all a: Attributes/Deltas | one myAttributes.a&#x000a;&#x0009;all i: ComponentImplementation/Deltas | one myCImplementation.i&#x000a;&#x0009;all l: Links/Deltas | one myLinks.l&#x000a;}&#x000a;&#x000a;sig PrimitiveType extends Element&#x000a;{&#x000a;&#x0009;myTImplementation: lone PrimitiveTypeImplementation/Deltas,&#x000a;&#x0009;-- the expanded elements&#x000a;&#x0009;timplementation: PrimitiveTypeImplementation -&gt; Stratum&#x000a;}&#x000a;{&#x000a;&#x0009;replaces + resembles in PrimitiveType&#x000a;&#x0009;-- propagate up the objects from the delta into the sig, to make it more convenient&#x000a;&#x0009;timplementation = myTImplementation.objects&#x000a;}&#x000a;-- ensure each delta is composed by only one primitive type&#x000a;fact&#x000a;{&#x000a;&#x0009;all t: PrimitiveTypeImplementation/Deltas | one myTImplementation.t&#x000a;}&#x000a;&#x000a;////open interface&#x000a;sig Interface extends Element&#x000a;{&#x000a;&#x0009;-- the deltas&#x000a;&#x0009;myOperations: lone Operations/Deltas,&#x000a;&#x0009;myIImplementation: lone InterfaceImplementation/Deltas,&#x000a;////comment interface -- derived, perspective state&#x000a;&#x0009;-- the expanded elements&#x000a;&#x0009;operations: Operation -&gt; Stratum,&#x0009;&#x000a;&#x0009;iimplementation: InterfaceImplementation -&gt; Stratum,&#x0009;&#x000a;&#x0009;superTypes: Interface -&gt; Stratum&#x000a;}&#x000a;////close interface&#x000a;{&#x000a;&#x0009;-- for interfaces&#x000a;&#x0009;replaces + resembles in Interface&#x000a;&#x0009;-- propagate up the objects from the delta into the sig, to make it more convenient&#x000a;&#x0009;operations = myOperations.objects&#x0009;&#x000a;&#x0009;iimplementation = myIImplementation.objects&#x000a;}&#x000a;-- ensure each delta is composed by only one interface&#x000a;fact&#x000a;{&#x000a;&#x0009;all p: Operations/Deltas | one myOperations.p&#x000a;&#x0009;all i: InterfaceImplementation/Deltas | one myIImplementation.i&#x000a;}&#x000a;&#x000a;&#x000a;-- each artifact must have a id, so it can be replaced or deleted&#x000a;sig PartID, PortID, ConnectorID, AttributeID, OperationID, InterfaceImplementationID, ComponentImplementationID, PrimitiveTypeImplementationID, LinkID {}&#x000a;&#x000a;sig Part&#x000a;{&#x000a;&#x0009;partType: Component,&#x000a;&#x0009;-- remap a port from this part onto the port of a part that we are replacing&#x000a;&#x0009;-- (new port -&gt; old, replaced port)&#x000a;&#x0009;portRemap: PortID lone -&gt; lone PortID,&#x000a;&#x0009;portMap: Stratum -&gt; PortID lone -&gt; lone Port,&#x000a;&#x000a;&#x0009;-- the values of the attributes are set in the part   (child id -&gt; parent id)&#x000a;&#x0009;-- although they don&apos;t have to be set if we want to take the default&#x000a;&#x0009;attributeValues: AttributeID -&gt; lone AttributeValue,&#x000a;&#x0009;-- do we alias a parent attribute?&#x000a;&#x0009;attributeAliases: AttributeID -&gt; lone AttributeID,&#x000a;&#x0009;-- or do we simply copy a parent attribute, but retain our own state?&#x000a;&#x0009;attributeCopyValues: AttributeID -&gt; lone AttributeID,&#x000a;&#x000a;&#x0009;-- derived state -- the parts that the connectors link to&#x000a;&#x0009;linkedToParts: Part -&gt; Stratum -&gt; Component,&#x000a;&#x0009;-- derived state -- any componts that the connectors link to&#x000a;&#x0009;linkedToOutside: Stratum -&gt; Component&#x000a;}&#x000a;&#x000a;abstract sig Index {}&#x000a;one sig Zero, One, Two, Three extends Index {}&#x000a;&#x000a;pred isContiguousFromZero(indices: set Index)&#x000a;{&#x000a;&#x0009;indices = indices.*(Three-&gt;Two + Two-&gt;One + One-&gt;Zero)&#x000a;}&#x000a;&#x000a;sig Port&#x000a;{&#x000a;&#x0009;-- set values are what the user has explicitly set&#x000a;&#x0009;setProvided, setRequired: set Interface,&#x000a;&#x0009;-- provided and required are inferred&#x000a;&#x0009;provided, required: Interface -&gt; Stratum -&gt; Component,&#x000a;&#x0009;mandatory, optional: set Index&#x000a;}&#x000a;{&#x000a;&#x0009;-- mandatory indices start at 0, optional start from mandatory end, no overlap&#x000a;&#x0009;-- all contiguous and must have some indices&#x000a;&#x0009;isContiguousFromZero[mandatory] and&#x000a;&#x0009;&#x0009;isContiguousFromZero[mandatory + optional]&#x000a;&#x0009;no mandatory &amp; optional&#x0009;&#x0009;&#x0009;-- no overlap&#x000a;&#x0009;some mandatory + optional&#x0009;&#x0009;-- but must have some indices&#x000a;}&#x000a;&#x000a;sig Connector&#x000a;{&#x000a;    -- require 2 ends&#x000a;    ends: set ConnectorEnd&#x000a;}&#x000a;{&#x000a;&#x0009;-- ensure 2 connector ends using a trick felix taught me&#x000a;&#x0009;some disj end1, end2: ConnectorEnd | ends = end1 + end2&#x000a;    all end: ends |&#x000a;        end.otherEnd = ends - end&#x000a;}&#x000a;&#x000a;abstract sig ConnectorEnd&#x000a;{&#x000a;    portID: PortID,&#x000a;    port: Port -&gt; Stratum -&gt; Component,&#x000a;    index: Index,&#x000a;    otherEnd: ConnectorEnd&#x000a;}&#x000a;{&#x000a;    -- an end is owned by one connector&#x000a;    one ends.this&#x000a;}&#x000a;&#x000a;sig ComponentConnectorEnd extends ConnectorEnd&#x000a;{&#x000a;}&#x000a;&#x000a;sig PartConnectorEnd extends ConnectorEnd&#x000a;{&#x000a;    partID: PartID,&#x000a;    cpart: Part -&gt; Stratum -&gt; Component&#x000a;}&#x000a;&#x000a;&#x000a;sig Attribute&#x000a;{&#x000a;&#x0009;attributeType: PrimitiveType,&#x000a;&#x0009;defaultValue: lone AttributeValue&#x000a;}&#x000a;{&#x000a;&#x0009;some defaultValue =&gt;&#x000a;&#x0009;&#x0009;defaultValue.valueType = attributeType&#x000a;}&#x000a;&#x000a;sig AttributeValue&#x000a;{&#x000a;&#x0009;valueType: PrimitiveType&#x000a;}&#x000a;&#x000a;sig Operation&#x000a;{&#x000a;&#x0009;-- this identifies the impelementation id and signature&#x000a;}&#x000a;&#x000a;sig InterfaceImplementation&#x000a;{&#x000a;&#x0009;-- this identifies the interface implementation clas or no s.dependsOns...&#x000a;}&#x000a;&#x000a;sig ComponentImplementation&#x000a;{&#x000a;&#x0009;-- this identifies the component implementation class...&#x000a;}&#x000a;&#x000a;sig PrimitiveTypeImplementation&#x000a;{&#x000a;    -- this indentified the implementation of a primitive type&#x000a;}&#x000a;&#x000a;-- links are used for port inference&#x000a;-- a bit like a connector, but multiplicity and optionality don&apos;t count&#x000a;sig Link&#x000a;{&#x000a;&#x0009;linkEnds: PortID -&gt; PortID&#x000a;}&#x000a;{&#x000a;&#x0009;lone linkEnds&#x000a;}&#x000a;&#x000a;abstract sig LinkEnd&#x000a;{&#x000a;&#x0009;linkPortID: PortID,&#x000a;&#x0009;linkError: Stratum -&gt; Component&#x000a;&#x0009;-- the internal interfaces are the interfaces presented inside the component content area&#x000a;&#x0009;--   for a port, it is the interfaces seen internally (opposite)&#x000a;&#x0009;--   for a port instance, it is the interfaces seen externally (same)&#x000a;}&#x000a;&#x000a;sig ComponentLinkEnd extends LinkEnd&#x000a;{&#x000a;}&#x000a;&#x000a;sig PartLinkEnd extends LinkEnd&#x000a;{&#x000a;&#x0009;linkPartID: PartID&#x000a;}&#x000a;&#x000a;-- translate from port id to component link end -- guaranteed to be 1 per id&#x000a;fun getComponentLinkEnd(id: PortID): one ComponentLinkEnd&#x000a;{&#x000a;&#x0009;{ end: ComponentLinkEnd | end.linkPortID = id }&#x000a;}&#x000a;&#x000a;-- translate from a port/part to a part link end -- guaranteed to be 1 per pair&#x000a;fun getPartLinkEnd(portID: PortID, partID: PartID): PartLinkEnd&#x000a;{&#x000a;&#x0009;{ end: PartLinkEnd | end.linkPortID = portID and end.linkPartID = partID }&#x000a;}&#x000a;&#x000a;fun ComponentLinkEnd::getPort(s: Stratum, c: Component): one Port&#x000a;{&#x000a;&#x0009;c.myPorts.objects_e[s][this.linkPortID]&#x000a;}&#x000a;&#x000a;fun PartLinkEnd::getPortInstance(s: Stratum, c: Component): Port -&gt; Part&#x000a;{&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;cpart = c.myParts.objects_e[s][this.linkPartID],&#x000a;&#x0009;&#x0009;cport = cpart.partType.myPorts.objects_e[s][this.linkPortID] |&#x000a;&#x0009;cport -&gt; cpart&#x000a;}&#x000a;&#x000a;-- get the port of a component connector&#x000a;fun ComponentConnectorEnd::getPort(s: Stratum, c: Component): lone Port&#x000a;{&#x000a;    c.myPorts.objects_e[s][this.portID]&#x000a;}&#x000a;&#x000a;-- should return only 1 Port, unless the component is invalid. NOTE: the component owns the part&#x000a;fun PartConnectorEnd::getPortInstance(s: Stratum, c: Component): Port -&gt; Part&#x000a;{&#x000a;    let&#x000a;        ppart = c.myParts.objects_e[s][this.partID],&#x000a;        port = ppart.portMap[s][this.portID] |&#x000a;    port -&gt; ppart&#x000a;}&#x000a;&#x000a;fun PartLinkEnd::getPortInstanceRequired(s: Stratum, c: Component): set Interface&#x000a;{&#x000a;&#x0009;let portPart = this.getPortInstance[s, c],&#x000a;&#x0009;&#x0009;pport = dom[portPart],&#x000a;&#x0009;&#x0009;ppartType = ran[portPart].partType&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;pport.required.ppartType.s&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;fun PartLinkEnd::getPortInstanceProvided(s: Stratum, c: Component): set Interface&#x000a;{&#x000a;&#x0009;let portPart = this.getPortInstance[s, c],&#x000a;&#x0009;&#x0009;pport = dom[portPart],&#x000a;&#x0009;&#x0009;ppartType = ran[portPart].partType&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;pport.provided.ppartType.s&#x000a;&#x0009;}&#x000a;}&#x000a;"/>

<source filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/base_deltas.als" content="module base_deltas[ID, Object]&#x000a;&#x000a;open base_structure&#x000a;&#x000a;////open deltas&#x000a;sig Deltas&#x000a;{&#x000a;&#x0009;-- newObjects is any objects added or replaced.  these fields allow new object creation to be controlled&#x000a;&#x0009;newObjects:      &#x0009;&#x0009;&#x0009;set Object,&#x000a;&#x0009;addedObjects:    &#x0009;&#x0009;&#x0009;set newObjects,&#x000a;&#x0009;replacedObjects: &#x0009;&#x0009;&#x0009;set Object,&#x000a;&#x0009;&#x000a;&#x0009;-- newIDs are any new IDs added&#x000a;&#x0009;newIDs:        &#x0009;&#x0009;&#x0009;&#x0009;set ID,&#x000a;&#x0009;-- the deltas that are to be applied.  these 3 fields are the input to the merge&#x000a;////comment deltas -- the adds, deletes and replaces &#x000a;&#x0009;addObjects:     &#x0009;&#x0009;&#x0009;newIDs one -&gt; one addedObjects,&#x000a;&#x0009;deleteObjects:  &#x0009;&#x0009;&#x0009;set ID,&#x000a;&#x0009;replaceObjects: &#x0009;&#x0009;&#x0009;ID one -&gt; lone replacedObjects,&#x000a;&#x000a;////comment deltas -- the expanded constituents, for each stratum perspective&#x000a;&#x0009;objects_e: Stratum -&gt; ID -&gt; Object,&#x000a;////pause deltas&#x000a;&#x0009;-- the expanded objects for this stratum.  these 2 fields are the output of the merge!&#x000a;&#x0009;objects:      &#x0009;&#x0009;&#x0009;&#x0009;Object -&gt; Stratum,&#x000a;&#x0009;-- old objects is what was what was there before any replacing was done&#x000a;&#x0009;oldObjects_e:&#x0009;&#x0009;&#x0009;&#x0009;Stratum -&gt; ID -&gt; Object,&#x000a;&#x0009;originalOldObjects_e:&#x0009;&#x0009;Stratum -&gt; ID -&gt; Object,&#x000a;&#x000a;&#x0009;-- working variables to track the expansion of objects, and allow it to happen cumulatively&#x000a;&#x0009;-- note: we need to keep track of what has been deleted and replaced to handle the cumulative effects&#x000a;&#x0009;-- e.g. delete in one stream, not in the other.&#x000a;&#x0009;-- NOTE: original is taking only resemblance_e into account, non-original is the full definition&#x000a;&#x0009;--       taking element replacement into account also&#x000a;&#x0009;deletedObjects_e:          &#x0009;Stratum -&gt; ID,&#x000a;&#x0009;replacedObjects_e:         &#x0009;Stratum -&gt; ID -&gt; Object,&#x0009;&#x000a;&#x0009;originalObjects_e:         &#x0009;Stratum -&gt; ID -&gt; Object,&#x000a;&#x0009;originalDeletedObjects_e:  &#x0009;Stratum -&gt; ID,&#x000a;&#x0009;originalReplacedObjects_e: &#x0009;Stratum -&gt; ID -&gt; Object&#x0009;&#x000a;////unpause deltas&#x000a;}&#x000a;{&#x000a;&#x0009;-- cannot delete and replace&#x000a;&#x0009;no dom[replaceObjects] &amp; deleteObjects&#x000a;&#x0009;replacedObjects = newObjects - addedObjects&#x000a;}&#x000a;////close deltas&#x000a;&#x000a;-- indicate that any new part/ID can only be introduced by one component&#x000a;fact Owned&#x000a;{&#x000a;&#x0009;all o: Object |&#x000a;&#x0009;&#x0009;one newObjects.o&#x000a;&#x0009;&#x000a;&#x0009;-- do we also test for IDs?&#x000a;&#x0009;all n: ID |&#x000a;&#x0009;&#x0009;one newIDs.n&#x000a;}&#x000a;&#x000a;&#x000a;pred Deltas::oneObjectPerID(s: Stratum)&#x000a;{&#x000a;&#x0009;let objects = this.objects_e[s] |&#x000a;&#x0009;&#x0009;function[objects, dom[objects]]&#x000a;}&#x000a;&#x000a;pred Deltas::nothing(s: Stratum)&#x000a;{&#x000a;&#x0009;no this.objects.s&#x000a;&#x0009;no this.objects_e[s]&#x000a;&#x0009;no this.oldObjects_e[s]&#x000a;&#x0009;no this.deletedObjects_e[s]&#x000a;&#x0009;no this.replacedObjects_e[s]&#x000a;&#x0009;no this.originalObjects_e[s]&#x000a;&#x0009;no this.originalDeletedObjects_e[s]&#x000a;&#x0009;no this.originalReplacedObjects_e[s]&#x000a;}&#x000a;&#x000a;-- ensure that deletes and replaces makes sense from the perspective of the original stratum&#x000a;pred Deltas::deltasIsWellFormed(owner: Stratum)&#x000a;{&#x000a;&#x0009;-- no overlap between deleted and replaced IDs&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;deleteIDs = this.deleteObjects,&#x000a;&#x0009;&#x0009;replaceIDs = dom[this.replaceObjects]&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- no overlap between deleted and replaced&#x000a;&#x0009;&#x0009;no deleteIDs &amp; replaceIDs&#x000a;&#x0009;&#x0009;-- anything we delete or replace must be there already&#x000a;&#x0009;&#x0009;deleteIDs + replaceIDs in dom[this.originalOldObjects_e[owner]]&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;-- ensures that this delta removes everything&#x000a;pred Deltas::cleanSlate(owner: Stratum)&#x000a;{&#x000a;&#x0009;this.deleteObjects = dom[this.oldObjects_e[owner]]&#x000a;}&#x000a;&#x000a;-- ensures that we only have adds, no deletes or replaces&#x000a;pred Deltas::onlyAdds(owner: Stratum)&#x000a;{&#x000a;&#x0009;no this.deleteObjects&#x000a;&#x0009;no this.replaceObjects&#x000a;}&#x000a;&#x000a;&#x000a;-- the predicate to merge any underlying resembled entities and apply current changes&#x000a;-- this is driven off the newly computed resemblance graph for each component in each stratum&#x000a;pred Deltas::mergeAndApplyChangesForResemblance(&#x000a;&#x0009;s: Stratum,&#x000a;&#x0009;c: Element,&#x000a;&#x0009;-- who should I resemble, taking element replacement into account&#x000a;&#x0009;iResembleDeltas_e: set Deltas)&#x000a;{&#x000a;&#x0009;-- handle add, delete etc as if we are only taking resemblance into account&#x000a;&#x0009;-- nothing will ever resemble itself&#x000a;&#x0009;this.originalOldObjects_e[s] =&#x000a;&#x0009;&#x0009;(iResembleDeltas_e.originalObjects_e[s]&#x000a;&#x0009;&#x0009;&#x0009;- iResembleDeltas_e.originalDeletedObjects_e[s]-&gt;Object)&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;++ iResembleDeltas_e.originalReplacedObjects_e[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;this.originalDeletedObjects_e[s] =&#x000a;&#x0009;&#x0009;iResembleDeltas_e.originalDeletedObjects_e[s]&#x000a;&#x0009;&#x0009;&#x0009;- dom[iResembleDeltas_e.originalReplacedObjects_e[s]] + this.deleteObjects&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;this.originalReplacedObjects_e[s] =&#x000a;&#x0009;&#x0009;(iResembleDeltas_e.originalReplacedObjects_e[s] - this.deleteObjects-&gt;Object)&#x000a;&#x0009;&#x0009;&#x0009;++ this.replaceObjects&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;this.originalObjects_e[s] = &#x000a;&#x0009;&#x0009;(((iResembleDeltas_e.originalObjects_e[s] - this.originalDeletedObjects_e[s]-&gt;Object)&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;++ this.originalReplacedObjects_e[s]) + this.addObjects)&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;++ this.replaceObjects&#x0009;&#x000a;}&#x000a;&#x000a;pred Deltas::mergeAndApplyChangesForElementReplacement(&#x000a;&#x0009;s: Stratum,&#x000a;&#x0009;c: Element,&#x000a;&#x0009;topmost: set Element,&#x000a;&#x0009;-- who should I resemble, taking element replacement into account&#x000a;&#x0009;iResembleDeltas_e: set Deltas)&#x000a;{&#x000a;&#x0009;-- expand out into a easier form for expressing well-formedness rule, where IDs don&apos;t count&#x000a;&#x0009;this.objects = {p: Object, s: Stratum |&#x000a;&#x0009;&#x0009;some n: ID | s-&gt;n-&gt;p in this.objects_e}&#x000a;&#x000a;&#x0009;-- handle add, delete etc as if we are only taking resemblance into account&#x000a;&#x0009;topmost = c =&gt;&#x000a;&#x0009;&#x0009;this.oldObjects_e[s] = iResembleDeltas_e.originalOldObjects_e[s]&#x000a;&#x0009;else&#x000a;&#x0009;&#x0009;this.oldObjects_e[s] =&#x000a;&#x0009;&#x0009;&#x0009;(iResembleDeltas_e.originalObjects_e[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;- iResembleDeltas_e.originalDeletedObjects_e[s]-&gt;Object)&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;++ iResembleDeltas_e.originalReplacedObjects_e[s]&#x000a;&#x000a;&#x0009;this.deletedObjects_e[s] =&#x000a;&#x0009;&#x0009;iResembleDeltas_e.originalDeletedObjects_e[s]&#x000a;&#x0009;&#x0009;&#x0009;- dom[iResembleDeltas_e.originalReplacedObjects_e[s]]&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;this.replacedObjects_e[s] = iResembleDeltas_e.originalReplacedObjects_e[s]&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;this.objects_e[s] = &#x000a;&#x0009;&#x0009;(iResembleDeltas_e.originalObjects_e[s] - this.deletedObjects_e[s]-&gt;Object)&#x000a;&#x0009;&#x0009;&#x0009;++ this.replacedObjects_e[s]&#x000a;}&#x000a;"/>

<source filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/bb_well_formed.als" content="module bb_well_formed&#x000a;&#x000a;open bb_structure&#x000a;&#x000a;&#x000a;-- check that the interface is well formed&#x000a;pred interfaceIsWellFormed(s: Stratum, i: Interface)&#x000a;{&#x000a;&#x0009;-- should have only 1 operation definition per id&#x000a;&#x0009;i.myOperations.oneObjectPerID[s]&#x000a;&#x0009;-- we should only have one implementation, so if we resemble something&#x000a;&#x0009;-- we must replace the implementation&#x000a;&#x0009;one i.iimplementation.s&#x000a;}&#x000a;&#x000a;-- check that the primitive type is well formed&#x000a;pred primitiveTypeIsWellFormed(s: Stratum, t: PrimitiveType)&#x000a;{&#x000a;&#x0009;one t.timplementation.s&#x000a;}&#x000a;&#x000a;-- check that the component is well formed&#x000a;pred componentIsWellFormed(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;-- the original (either the thing being replaced or the original)&#x000a;&#x0009;-- is not in the composition hierarchy taking resemblance into account&#x000a;&#x0009;-- NOTE: if c cannot be composed if it is a replacement&#x000a;&#x0009;-- NOTE: a further constraint is that we cannot be composed of the thing we&#x000a;&#x0009;--       are replacing&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;resembling = resembles_e.s, partTypes = parts.s.partType,&#x000a;&#x0009;&#x0009;original = no c.replaces =&gt; c else c.replaces&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;original not in c.*(resembling + partTypes).partTypes&#x000a;&#x0009;}&#x000a;&#x0009;-- ***RULE W6: a component must have some ports&#x000a;&#x0009;some c.ports.s&#x000a;&#x0009;&#x000a;&#x0009;-- to be well formed, we must have one element per ID&#x000a;&#x0009;c.myPorts.oneObjectPerID[s]&#x000a;&#x0009;c.myAttributes.oneObjectPerID[s]&#x000a;&#x0009;&#x000a;&#x0009;// if this is composite, ensure the ports, parts and connectors are well formed&#x000a;&#x0009;s in c.isComposite =&gt;&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- note: we will always have parts because that is what defines a composite&#x000a;&#x0009;&#x0009;-- no implementation allowed: must be deleted or not there to begin with to be a well formed composite&#x000a;&#x0009;&#x0009;no c.cimplementation.s&#x000a;&#x0009;&#x0009;-- no links allowed&#x000a;&#x0009;&#x0009;no c.links.s&#x000a;&#x0009;&#x000a;&#x0009;&#x0009;-- to be well formed, we must have one element per ID&#x000a;&#x0009;&#x0009;c.myParts.oneObjectPerID[s]&#x000a;&#x0009;&#x0009;c.myConnectors.oneObjectPerID[s]&#x000a;&#x000a;&#x0009;&#x0009;-- internals must be well formed&#x000a;&#x0009;&#x0009;partsAreWellFormed[s, c]&#x000a;&#x0009;&#x0009;connectorsAreWellFormed[s, c]&#x000a;&#x0009;&#x0009;portAndPortInstancesAreConnected[s, c]&#x000a;&#x0009;}&#x000a;&#x0009;else&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- won&apos;t have parts, as this is the definition of a leaf&#x000a;&#x0009;&#x0009;-- can have a maximum of one implementation, either inherited or added, or replaced&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;one c.cimplementation.s&#x000a;&#x0009;&#x0009;-- a leaf cannot have connectors&#x000a;&#x0009;&#x0009;no c.connectors.s&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;-- to be well formed, we must have one element per ID&#x000a;&#x0009;&#x0009;c.myCImplementation.oneObjectPerID[s]&#x000a;&#x0009;&#x0009;c.myLinks.oneObjectPerID[s]&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;-- to be well formed, links must have no duplication and must refer to real ports in the stratum&#x000a;&#x0009;&#x0009;-- note that links are allowed to loop back, as connectors can loop back through parts...&#x000a;&#x0009;&#x0009;let l = c.links.s.linkEnds&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;no ~l &amp; l&#x000a;&#x0009;&#x0009;&#x0009;dom[l] + ran[l] in dom[c.myPorts.objects_e[s]]&#x000a;&#x0009;&#x0009;}&#x0009;&#x0009;&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;pred portAndPortInstancesAreConnected(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;all port: c.ports.s |&#x000a;&#x0009;&#x0009;portIsConnected[s, c, port]&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;all cpart: c.parts.s |&#x000a;&#x0009;&#x0009;all port: cpart.partType.ports.s |&#x000a;&#x0009;&#x0009;&#x0009;portInstanceIsConnected[s, c, port, cpart]&#x000a;}&#x000a;&#x000a;&#x000a;pred partsAreWellFormed(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;all pPart: c.parts.s&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- ***RULE C8: it must be possible to reach this part from a series of connections from the owning component&#x000a;&#x0009;&#x0009;-- otherwise, this part will be completely internally connected -- an island&#x000a;&#x0009;&#x0009;s -&gt; c in pPart.*(linkedToParts.c.s).linkedToOutside&#x000a;&#x0009;&#x0009;-- check the attributes&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;valueIDs = dom[pPart.attributeValues],&#x000a;&#x0009;&#x0009;&#x0009;aliasIDs = dom[pPart.attributeAliases],&#x000a;&#x0009;&#x0009;&#x0009;copyIDs = dom[pPart.attributeCopyValues],&#x000a;&#x0009;&#x0009;&#x0009;parentAttrs = c.myAttributes.objects_e[s],&#x000a;&#x0009;&#x0009;&#x0009;partAttrs = pPart.partType.myAttributes.objects_e[s],&#x000a;&#x0009;&#x0009;&#x0009;partAttrIDs = dom[partAttrs]&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- should have no overlap between the different types of possibilities&#x000a;&#x0009;&#x0009;&#x0009;disj[valueIDs, aliasIDs, copyIDs]&#x000a;&#x0009;&#x0009;&#x0009;-- all the IDs must exist in the list of attributes&#x000a;&#x0009;&#x0009;&#x0009;(valueIDs + aliasIDs + copyIDs) in partAttrIDs&#x000a;&#x000a;&#x0009;&#x0009;&#x0009;-- any new values must have the correct type&#x000a;&#x0009;&#x0009;&#x0009;all ID: valueIDs |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;pPart.attributeValues[ID].valueType = partAttrs[ID].attributeType&#x000a;&#x000a;&#x0009;&#x0009;&#x0009;-- any aliased or copied attributes must exist and have the correct type&#x000a;&#x0009;&#x0009;&#x0009;all ID: aliasIDs |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;partAttrs[ID].attributeType =&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;parentAttrs[pPart.attributeAliases[ID]].attributeType&#x000a;&#x0009;&#x0009;&#x0009;all ID: copyIDs |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;partAttrs[ID].attributeType =&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;parentAttrs[pPart.attributeCopyValues[ID]].attributeType&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;-- anything left over must have a default value or else the parts attribute is unspecified&#x000a;&#x0009;&#x0009;&#x0009;all ID: partAttrIDs - (valueIDs + aliasIDs + copyIDs) |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;one partAttrs[ID].defaultValue&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x0009;&#x000a;} &#x000a;&#x000a;&#x000a;pred setupConnectors(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;all end: c.connectors.s.ends |&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- if just one end of the connector goes to the component, it must be mandatory&#x000a;&#x0009;&#x0009;-- if the part end is mandatory&#x000a;&#x0009;&#x0009;end in ComponentConnectorEnd =&gt;&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;end.port.c.s = (end &amp; ComponentConnectorEnd)::getPort[s, c]&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;else&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- this is a part connector end, make sure we connect to a single port instance&#x000a;&#x0009;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;portAndPart = (end &amp; PartConnectorEnd)::getPortInstance[s, c],&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;resolvedPort = dom[portAndPart]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;end.port.c.s = resolvedPort&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;end.cpart.c.s = ran[portAndPart]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;pred connectorsAreWellFormed(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;all end: c.connectors.s.ends |&#x000a;&#x0009;let other = end.otherEnd, aport = end.port.c.s, otherPort = other.port.c.s |&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;end.index in end.port.c.s.(mandatory + optional)&#x000a;&#x0009;&#x0009;one end.port.c.s&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;-- if just one end of the connector goes to the component, it must be mandatory&#x000a;&#x0009;&#x0009;-- if the part end is mandatory&#x000a;&#x0009;&#x0009;end in ComponentConnectorEnd =&gt;&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- note: other end must be a part connector end, as no component to component connectors are allowed&#x000a;&#x0009;&#x0009;&#x0009;-- if the outside is optional, the inside cannot be mandatory...&#x000a;&#x0009;&#x0009;&#x0009;end.index in aport.optional =&gt; other.index in otherPort.optional&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;else&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;one end.cpart.c.s&#x000a;&#x0009;&#x0009;&#x0009;end.index in aport.optional &lt;=&gt; other.index in otherPort.optional&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;&#x000a;&#x000a;----------- support predicates&#x000a;&#x000a;pred portIsConnected(s: Stratum, c: Component, o: Port)&#x000a;{&#x000a;&#x0009;-- ports on the component must always be connected internally&#x000a;&#x0009;all idx: o.mandatory + o.optional |&#x000a;&#x0009;one end: c.connectors.s.ends &amp; ComponentConnectorEnd |&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;end.port.c.s = o&#x000a;&#x0009;&#x0009;idx = end.index&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;pred portInstanceIsConnected(s: Stratum, c: Component, o: Port, p: Part)&#x000a;{&#x000a;&#x0009;-- don&apos;t need to check any provided interfaces unless these are not optional&#x000a;//&#x0009;(some o.required.c.s or isFalse[Model::providesIsOptional]) =&gt;&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- match up any mandatory required interfaces on the port with a single connector&#x000a;&#x0009;&#x0009;all idx: o.mandatory |&#x000a;&#x0009;&#x0009;&#x0009;one end: c.connectors.s.ends &amp; PartConnectorEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;end.port.c.s = o and end.cpart.c.s = p and idx = end.index&#x000a;&#x0009;&#x0009;all idx: o.optional |&#x000a;&#x0009;&#x0009;&#x0009;lone end: c.connectors.s.ends &amp; PartConnectorEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;end.port.c.s = o and end.cpart.c.s = p and idx = end.index&#x000a;&#x0009;}&#x000a;}&#x000a;"/>

<source filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/bb_port_inference.als" content="module bb_port_inference&#x000a;&#x000a;open bb_structure&#x000a;open bb_inference_help&#x000a;&#x000a;pred setupLeafLinks(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;-- make sure we have enough link ends&#x000a;&#x0009;ensureLinkEndsExist[s, c]&#x000a;&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;idToPorts = c.myPorts.objects_e[s],&#x000a;&#x0009;&#x0009;inferred =&#x000a;&#x0009;&#x0009;&#x0009;{ p1, p2: ran[idToPorts] |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;idToPorts.p1 -&gt; idToPorts.p2 in c.links.s.linkEnds }&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- copy over the links&#x000a;&#x0009;&#x0009;c.inferredLinks.s = inferred&#x000a;&#x000a;&#x0009;&#x0009;-- copy over the sets&#x000a;&#x0009;&#x0009;all cport: c.ports.s |&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;end = getComponentLinkEnd[idToPorts.cport],&#x000a;&#x0009;&#x0009;&#x0009;errors =&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;some other: c.ports.s |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;cport -&gt; other in c.inferredLinks.s and&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;(cport.required.c.s != other.provided.c.s or&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009; cport.provided.c.s != other.required.c.s)&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- propagate the set value into the inferred value&#x000a;&#x0009;&#x0009;&#x0009;cport.required.c.s = cport.setRequired&#x000a;&#x0009;&#x0009;&#x0009;cport.provided.c.s = cport.setProvided&#x000a;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;-- we have no errors if all linked match up exactly&#x000a;&#x0009;&#x0009;&#x0009;s -&gt; c in end.linkError &lt;=&gt; errors&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;pred setupCompositeLinks(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;ensureLinkEndsExist[s, c]&#x000a;&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;allPorts = c.ports.s,&#x000a;&#x0009;&#x0009;allParts = c.parts.s,&#x000a;&#x0009;&#x0009;idToPorts = c.myPorts.objects_e[s],&#x000a;&#x0009;&#x0009;idToParts = c.myParts.objects_e[s],&#x000a;&#x0009;&#x0009;-- flatten everything into a LinkEnd-&gt;LinkEnd structure so we can&#x000a;&#x0009;&#x0009;-- use transitive closure to navigate&#x000a;&#x0009;&#x0009;portToPort =   makePortToPort[s, c],&#x000a;&#x0009;&#x0009;partInternal = makePartInternal[s, c],&#x000a;&#x0009;&#x0009;partToPart =   makePartToPart[s, c],&#x000a;&#x0009;&#x0009;portToPart =   makePortToPart[s, c],&#x000a;&#x0009;&#x0009;partToPort =   ~portToPart,&#x000a;&#x0009;&#x0009;-- we connect by going from a port to a port,&#x000a;&#x0009;&#x0009;-- or from a port to part to possibly the other side of the part&#x000a;&#x0009;&#x0009;-- and then onto another part etc, until we get to a final part,&#x000a;&#x0009;&#x0009;-- or to a final port&#x000a;&#x0009;&#x0009;fromPortToPart = portToPart.*(partInternal.partToPart),&#x000a;&#x0009;&#x0009;fromPartToPort = ~fromPortToPart,&#x000a;&#x0009;&#x0009;fromPartToPart = partToPart.*(partInternal.partToPart),&#x000a;&#x0009;&#x0009;-- harsh allows us to bounce around looking for any possibly connected other elements.&#x000a;&#x0009;&#x0009;-- used to disallow inferredLinks via tainting&#x000a;&#x0009;&#x0009;harshFromPortToAny =&#x000a;&#x0009;&#x0009;&#x0009;portToPart.*(portToPart + partToPort + portToPort + partInternal + partToPart),&#x000a;&#x0009;&#x0009;fromPortToPort = portToPort + fromPortToPart.partInternal.partToPort&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- set up the inferred links, propagating the constraints to the next level&#x000a;&#x0009;&#x0009;propagateInferredCompositeLinks[&#x000a;&#x0009;&#x0009;&#x0009;s, c, harshFromPortToAny, fromPortToPort,&#x000a;&#x0009;&#x0009;&#x0009;partInternal, portToPort]&#x000a;&#x000a;&#x0009;&#x0009;-- get the provided and required interfaces of ports&#x000a;&#x0009;&#x0009;all cport: allPorts |&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;end = getComponentLinkEnd[idToPorts.cport],&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;infReq = cport.required.c.s,&#x000a;&#x0009;&#x0009;&#x0009;reqEnds = end.fromPortToPart,&#x000a;&#x0009;&#x0009;&#x0009;requiresFromEnds =&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{ r: Interface  |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;some ce: reqEnds |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;r in ce.getPortInstanceRequired[s, c] },&#x000a;&#x0009;&#x0009;matchingRequires = extractLowestCommonSubtypes[s, requiresFromEnds],&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;infProv = cport.provided.c.s,&#x000a;&#x0009;&#x0009;&#x0009;provEnds = end.fromPortToPort - end +&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{ e: PartLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;e in end.fromPortToPart and no e.partInternal&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;},&#x000a;&#x0009;&#x0009;&#x0009;providesFromEnds =&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{ p: Interface |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;(some e: provEnds &amp; ComponentLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;p in e.getPort[s, c].required.c.s)&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;or&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;(some e: provEnds &amp; PartLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;p in e.getPortInstanceProvided[s, c])&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;},&#x000a;&#x0009;&#x0009;matchingProvides = extractHighestCommonSupertypes[s, providesFromEnds]&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;infReq = matchingRequires&#x000a;&#x0009;&#x0009;&#x0009;infProv = matchingProvides&#x000a;&#x000a;&#x0009;&#x0009;&#x0009;s -&gt; c not in end.linkError &lt;=&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;(oneToOneProvidedMappingExists[s, c, infProv, reqEnds] and&#x000a;&#x0009;&#x0009;&#x0009;&#x0009; oneToOneRequiredMappingExists[s, c, infReq, reqEnds])&#x000a;&#x0009;&#x0009;}&#x000a;&#x000a;&#x0009;&#x0009;-- enforce the constraints for each port instance&#x000a;&#x0009;&#x0009;all cpart: allParts,&#x000a;&#x0009;&#x0009;&#x0009;cport: cpart.partType.ports.s |&#x000a;&#x0009;&#x0009;let end = getPartLinkEnd[cpart.portMap[s].cport, idToParts.cpart]&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;infReq = end.getPortInstanceRequired[s, c],&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;infProv = end.getPortInstanceProvided[s, c],&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;terminalEnds = end.fromPartToPort +&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;{ e: PartLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;e in end.fromPartToPart and no e.partInternal&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;},&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;provFromTerminalEnds =&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;{ p: Interface |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;(some e: terminalEnds &amp; ComponentLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;p in e.getPort[s, c].provided.c.s)&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;or&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;(some e: terminalEnds &amp; PartLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;p in e.getPortInstanceRequired[s, c])&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;},&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;allEnds = end.fromPartToPort +&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;{ e: PartLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;e in end.fromPartToPart&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;},&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;matchingTerminalProvides =&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;extractLowestCommonSubtypes[s, provFromTerminalEnds]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;s -&gt; c not in end.linkError &lt;=&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;no end.partInternal =&gt;&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;providesEnough[s, infProv, matchingTerminalProvides]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;oneToOneRequiredMappingExists[s, c, infProv, allEnds]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;oneToOneProvidedMappingExists[s, c, infReq, allEnds]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;pred linksAreWellFormed(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;allPorts = c.ports.s,&#x000a;&#x0009;&#x0009;allParts = c.parts.s,&#x000a;&#x0009;&#x0009;idToParts = c.myParts.objects_e[s],&#x000a;&#x0009;&#x0009;portToPort =   makePortToPort[s, c]&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- enforce that no ports connect directly to each other&#x000a;&#x0009;&#x0009;-- as this can lead to indeterministic interface assigment&#x000a;&#x0009;&#x0009;s in c.isComposite =&gt;&#x000a;&#x0009;&#x0009;&#x0009;no portToPort&#x000a;&#x000a;&#x0009;&#x0009;-- enforce the constraints for each port&#x000a;&#x0009;&#x0009;all cport: allPorts |&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;infProv = cport.provided.c.s,&#x000a;&#x0009;&#x0009;&#x0009;infReq = cport.required.c.s,&#x000a;&#x0009;&#x0009;&#x0009;idToPorts = c.myPorts.objects_e[s],&#x000a;&#x0009;&#x0009;&#x0009;end = getComponentLinkEnd[idToPorts.cport],&#x000a;&#x0009;&#x0009;&#x0009;amHome = c.home = s,&#x000a;&#x0009;&#x0009;&#x0009;setInterfaces = cport.(setProvided + setRequired)&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- check any set values only if we are &quot;home&quot;&#x000a;&#x0009;&#x0009;&#x0009;(amHome and some setInterfaces) =&gt;&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;infProv = cport.setProvided&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;infReq = cport.setRequired&#x000a;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;-- must have some interfaces&#x000a;&#x0009;&#x0009;&#x0009;some infProv + infReq&#x000a;&#x0009;&#x0009;&#x0009;s -&gt; c not in end.linkError&#x000a;&#x0009;&#x0009;}&#x000a;&#x000a;&#x0009;&#x0009;-- enforce the constraints for each port instance&#x000a;&#x0009;&#x0009;all cpart: allParts,&#x000a;&#x0009;&#x0009;&#x0009;cport: cpart.partType.ports.s |&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;end = getPartLinkEnd[cpart.portMap[s].cport, idToParts.cpart],&#x000a;&#x0009;&#x0009;&#x0009;infReq = end.getPortInstanceRequired[s, c],&#x000a;&#x0009;&#x0009;&#x0009;infProv = end.getPortInstanceProvided[s, c]&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- must have some interfaces&#x000a;&#x0009;&#x0009;&#x0009;some infProv + infReq&#x000a;&#x0009;&#x0009;&#x0009;s -&gt; c not in end.linkError&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;&#x000a;-- set up the inferred links for this component for a leaf, just use the links&#x000a;-- for a composite, trace through from port to port, but only infer a link if there&#x000a;-- is no terminal part involve anywhere&#x000a;pred propagateInferredCompositeLinks(&#x000a;&#x0009;s: Stratum,&#x000a;&#x0009;c: Component,&#x0009;&#x000a;&#x0009;harshFromPortToAny:  ComponentLinkEnd -&gt; LinkEnd,&#x000a;&#x0009;fromPortToPort:      ComponentLinkEnd -&gt; ComponentLinkEnd,&#x000a;&#x0009;partInternal:        PartLinkEnd -&gt; PartLinkEnd,&#x000a;&#x0009;portToPort:          ComponentLinkEnd -&gt; ComponentLinkEnd)&#x000a;{&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;idToPorts = c.myPorts.objects_e[s],&#x000a;&#x0009;&#x0009;terminateInternallyIDs =&#x000a;&#x0009;&#x0009;{ id: dom[idToPorts] &amp; PortID |&#x000a;&#x0009;&#x0009;&#x0009;some end: PartLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;let instance = end.getPortInstance[s, c],&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;cport = dom[instance],&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;cpart = ran[instance]&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;getComponentLinkEnd[id] in harshFromPortToAny.end&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;no end.partInternal&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- only provided terminals break linking&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;some cport.provided.(cpart.partType).s&#x000a;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- find all port-&gt;port combinations that go through a leaf part and link up&#x000a;&#x0009;&#x0009;-- but which don&apos;t have a termination on a provided port instance interface&#x000a;&#x0009;&#x0009;let inferred =&#x000a;&#x0009;&#x0009;{ p1, p2: Port |&#x000a;&#x0009;&#x0009;&#x0009;some end: dom[fromPortToPort] | let other = end.fromPortToPort&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- no connector loopbacks on port instances&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;disj[end, other]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;p1 = idToPorts[end.linkPortID]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;p2 = idToPorts[other.linkPortID]&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- if we can reach a port which links internally,&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- do not create an alias&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;no (end + other).*portToPort.linkPortID &amp; terminateInternallyIDs&#x000a;&#x0009;&#x0009;&#x0009;}&#x000a;&#x0009;&#x0009;} |&#x000a;&#x0009;&#x0009;c.inferredLinks.s = inferred&#x000a;&#x0009;}&#x000a;}&#x000a;"/>

<source filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/bb_inference_help.als" content="module bb_inference_help&#x000a;&#x000a;open bb_structure&#x000a;&#x000a;&#x000a;pred providesEnough(s: Stratum, provided: set Interface, required: set Interface)&#x000a;{&#x000a;&#x0009;all prov: provided |&#x000a;&#x0009;&#x0009;one req: required |&#x000a;&#x0009;&#x0009;&#x0009;req in prov.*(superTypes.s)&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;-- ensure that it works the other way around&#x000a;&#x0009;all req: required |&#x000a;&#x0009;&#x0009;one prov: provided |&#x000a;&#x0009;&#x0009;&#x0009;req in prov.*(superTypes.s)&#x000a;}&#x000a;&#x000a;pred oneToOneProvidedMappingExists[s: Stratum, c: Component, provided: set Interface, ends: LinkEnd]&#x000a;{&#x000a;&#x0009;all end: ends &amp; ComponentLinkEnd |&#x000a;&#x0009;&#x0009;oneToOneMappingExists[s, provided, end.getPort[s, c].required.c.s]&#x000a;&#x000a;&#x0009;all end: ends &amp; PartLinkEnd |&#x000a;&#x0009;&#x0009;oneToOneMappingExists[s, provided, end.getPortInstanceProvided[s, c]]&#x000a;}&#x000a;&#x000a;pred oneToOneRequiredMappingExists[s: Stratum, c: Component, required: set Interface, ends: LinkEnd]&#x000a;{&#x000a;&#x0009;all end: ends &amp; ComponentLinkEnd |&#x000a;&#x0009;&#x0009;oneToOneMappingExists[s, required, end.getPort[s, c].provided.c.s]&#x000a;&#x000a;&#x0009;all end: ends &amp; PartLinkEnd |&#x000a;&#x0009;&#x0009;oneToOneMappingExists[s, required, end.getPortInstanceRequired[s, c]]&#x000a;}&#x000a;&#x000a;pred oneToOneMappingExists[s: Stratum, a: set Interface, b: set Interface]&#x000a;{&#x000a;&#x0009;all aa: a |&#x000a;&#x0009;&#x0009;one bb: b |&#x000a;&#x0009;&#x0009;&#x0009;bb in expand[s, aa]&#x000a;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;-- ensure that it works the other way around&#x000a;&#x0009;all bb: b |&#x000a;&#x0009;&#x0009;one aa: a |&#x000a;&#x0009;&#x0009;&#x0009;bb in expand[s, aa]&#x000a;}&#x000a;&#x000a;fun extractHighestCommonSupertypes(s: Stratum, require: Interface): set Interface&#x000a;{&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;-- map is an interface in require (i) with all matching interfaces in require (e)&#x000a;&#x0009;&#x0009;map =&#x000a;&#x0009;&#x0009;{ i: require, e: require |&#x000a;&#x0009;&#x0009;&#x0009;some expand[s, i] &amp; expand[s, e] },&#x000a;&#x0009;&#x0009;highestCommonSupertypes =&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;super: Interface |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;some i: require |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;super = highestCommonSupertype[s, map[i]]&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;highestCommonSupertypes&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;fun highestCommonSupertype(s: Stratum, required: set Interface): lone Interface&#x000a;{&#x000a;&#x0009;{ i: Interface |&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;required in *(superTypes.s).i&#x000a;&#x0009;&#x0009;&#x0009;no sub: superTypes.s.i |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;required in *(superTypes.s).sub&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;fun extractLowestCommonSubtypes(s: Stratum, require: Interface): set Interface&#x000a;{&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;-- map is an interface in require (i) with all matching interfaces in require (e)&#x000a;&#x0009;&#x0009;map =&#x000a;&#x0009;&#x0009;{ i: require, e: require |&#x000a;&#x0009;&#x0009;&#x0009;some expand[s, i] &amp; expand[s, e] },&#x000a;&#x0009;&#x0009;lowestCommonSubtypes =&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;sub: Interface |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;some i: require |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;sub = lowestCommonSubtype[s, map[i]]&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;lowestCommonSubtypes&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;fun lowestCommonSubtype(s: Stratum, required: set Interface): lone Interface&#x000a;{&#x000a;&#x0009;{ i: Interface |&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;required in i.*(superTypes.s)&#x000a;&#x0009;&#x0009;&#x0009;no super: i.superTypes.s |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;required in super.*(superTypes.s)&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;fun expand(s: Stratum, i: Interface): set Interface&#x000a;{&#x000a;&#x0009;-- expand forms the full expanded supertype and subtype hierarchy&#x000a;&#x0009;i.*(superTypes.s) +  ^(superTypes.s).i&#x000a;}&#x000a;&#x000a;&#x000a;-- a generator axiom to ensure that we have a unique link end per port, or port instance&#x000a;pred ensureLinkEndsExist(s: Stratum, c: Component)&#x000a;{&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;idToPorts = c.myPorts.objects_e[s],&#x000a;&#x0009;&#x0009;idToParts = c.myParts.objects_e[s]&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- set up the linkends&#x000a;&#x0009;&#x0009;-- ensure all ports have a link end&#x000a;&#x0009;&#x0009;all portID: dom[idToPorts] |&#x000a;&#x0009;&#x0009;&#x0009;one l: ComponentLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;l.linkPortID = portID&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;-- ensure all part/ports have a link end&#x000a;&#x0009;&#x0009;all ppart: c.parts.s |&#x000a;&#x0009;&#x0009;&#x0009;let partID = idToParts.ppart | &#x000a;&#x0009;&#x0009;&#x0009;&#x0009;all portID: ppart.portMap[s].Port |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;one l: PartLinkEnd |&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;l.linkPortID = portID and l.linkPartID = partID&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;fun makePortToPort(s: Stratum, c: Component): ComponentLinkEnd -&gt; ComponentLinkEnd&#x000a;{&#x000a;&#x0009;-- only links can go from port to port, connectors can&apos;t&#x000a;&#x0009;s not in c.isComposite =&gt;&#x000a;&#x0009;{ p1, p2: ComponentLinkEnd |&#x000a;&#x0009;    let actualLinks = c.links.s.linkEnds |&#x000a;&#x0009;&#x0009;some end: dom[actualLinks], other: actualLinks[end]&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- these are disjoint because of a clause in bb_well_formed.als&#x000a;&#x0009;&#x0009;&#x0009;end = p1.linkPortID&#x000a;&#x0009;&#x0009;&#x0009;other = p2.linkPortID&#x000a;&#x0009;&#x0009;}&#x0009;&#x000a;&#x0009;}&#x000a;&#x0009;else&#x000a;&#x0009;&#x0009;none -&gt; none&#x0009;&#x000a;}&#x000a;&#x000a;fun makePartInternal(s: Stratum, c: Component): PartLinkEnd -&gt; PartLinkEnd&#x000a;{&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;idToParts = c.myParts.objects_e[s] |&#x000a;&#x0009;{ p1, p2: PartLinkEnd |&#x000a;&#x0009;&#x0009;some partID: dom[idToParts] |&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;realPart = idToParts[partID],&#x000a;&#x0009;&#x0009;&#x0009;realType = realPart.partType,&#x000a;&#x0009;&#x0009;&#x0009;inferredOneWay = realType.inferredLinks.s,&#x000a;&#x0009;&#x0009;&#x0009;inferred = inferredOneWay + ~inferredOneWay,&#x000a;&#x0009;&#x0009;&#x0009;idToPorts = realPart.portMap[s],&#x000a;&#x0009;&#x0009;&#x0009;realPort = idToPorts[p1.linkPortID]&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;disj[p1, p2]&#x000a;&#x0009;&#x0009;&#x0009;p1.linkPartID = partID&#x000a;&#x0009;&#x0009;&#x0009;p2.linkPartID = partID&#x000a;&#x0009;&#x0009;&#x0009;realPort in dom[inferred]&#x000a;&#x0009;&#x0009;&#x0009;idToPorts[p2.linkPortID] = inferred[realPort]&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;fun makePartToPart(s: Stratum, c: Component): PartLinkEnd -&gt; PartLinkEnd&#x000a;{&#x000a;&#x0009;{ p1, p2: PartLinkEnd |&#x000a;&#x0009;&#x0009;some end: c.connectors.s.ends | let other = end.otherEnd&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;disj[end, other]&#x000a;&#x0009;&#x0009;&#x0009;end.portID = p1.linkPortID&#x000a;&#x0009;&#x0009;&#x0009;end.partID = p1.linkPartID&#x000a;&#x0009;&#x0009;&#x0009;other.portID = p2.linkPortID&#x000a;&#x0009;&#x0009;&#x0009;other.partID = p2.linkPartID&#x000a;&#x0009;&#x0009;}&#x0009;&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;&#x000a;fun makePortToPart(s: Stratum, c: Component): ComponentLinkEnd -&gt; PartLinkEnd&#x000a;{&#x000a;&#x0009;{ p1: ComponentLinkEnd, p2: PartLinkEnd |&#x000a;&#x0009;&#x0009;some end: c.connectors.s.ends | let other = end.otherEnd&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;end in ComponentConnectorEnd&#x000a;&#x0009;&#x0009;&#x0009;end.portID = p1.linkPortID&#x000a;&#x0009;&#x0009;&#x0009;other.portID = p2.linkPortID&#x000a;&#x0009;&#x0009;&#x0009;other.partID = p2.linkPartID&#x000a;&#x0009;&#x0009;}&#x0009;&#x000a;&#x0009;}&#x000a;}&#x000a;"/>

<source filename="/home/andrew/work/workspace/Academic Work/phd-thesis/backbone-alloy/base_facts.als" content="module facts&#x000a;&#x000a;open base_structure&#x000a;&#x000a;&#x000a;fact StratumFacts&#x000a;{&#x000a;&#x0009;one isTop.True&#x000a;&#x0009;all s: Stratum |&#x000a;&#x0009;-- a stratum depends on any external it explicitly declares, plus any nested strata&#x000a;////open cansee&#x000a;&#x0009;let fullDependsOn = dependsOn + nestedStrata + ^parent.dependsOn {&#x000a;////pause cansee&#x000a;&#x0009;&#x0009;-- dependsOn cannot be nested packages&#x000a;&#x0009;&#x0009;all d : s.dependsOn | s not in d.*parent&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;-- dependsOnNested must be nested packages.  these can be deeply nested also.&#x000a;&#x0009;&#x0009;all n : s.dependsOnNested | s in n.^parent&#x000a;&#x0009;&#x000a;&#x0009;&#x0009;-- for relaxed, export what it depends on and their exports&#x000a;&#x0009;&#x0009;-- for strict and relaxed, export any direct nested dependencies&#x000a;////open exports&#x000a;&#x0009;&#x0009;isTrue[s.isRelaxed] =&gt;&#x000a;&#x0009;&#x0009;&#x0009;s.exportsStrata = s + s.(dependsOn + dependsOnNested).exportsStrata&#x000a;&#x0009;&#x0009;else&#x000a;&#x0009;&#x0009;&#x0009;s.exportsStrata = s + s.dependsOnNested.exportsStrata&#x000a;////close exports&#x000a;&#x000a;&#x0009;&#x0009;-- used for partial ordering&#x000a;&#x0009;&#x0009;-- contains nothing the children already depend on&#x000a;////open simple-depends&#x000a;&#x0009;&#x0009;s.simpleDependsOn = s.fullDependsOn - s.fullDependsOn.transitive&#x000a;&#x000a;&#x0009;&#x0009;-- no cycles&#x000a;////comment simple-depends -- no cycles allowed&#x000a;&#x0009;&#x0009;s not in s.transitive&#x000a;////close simple-depends&#x000a;&#x000a;&#x0009;&#x0009;-- can only see what others export&#x000a;&#x0009;&#x0009;-- NOTE: if a nested stratum only exports a public package, then this is &#x000a;&#x0009;&#x0009;--       all that the parent can see&#x000a;////unpause cansee&#x000a;&#x0009;&#x0009;s.canSee = s.fullDependsOn.exportsStrata&#x000a;&#x0009;&#x000a;&#x0009;&#x0009;-- the strata we can see using the dependency graph&#x000a;&#x0009;&#x0009;s.transitive = s.^fullDependsOn&#x000a;////close cansee&#x000a;&#x000a;&#x0009;&#x0009;-- a stratum is called top if no stratum depends on it&#x000a;&#x0009;&#x0009;isTrue[s.isTop] &lt;=&gt; no simpleDependsOn.s&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;-- have max of one replacement of an element per stratum&#x000a;&#x0009;&#x0009;all e: Element |&#x000a;&#x0009;&#x0009;&#x0009;lone s.ownedElements &amp; replaces.e&#x000a;&#x0009;&#x0009;-- ties up replacing and replaces&#x000a;&#x0009;&#x0009;s.replacing = s.ownedElements &amp; dom[replaces]&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;&#x000a;////open mutually-independent&#x000a;pred independent[a, b: Stratum] {&#x000a;&#x0009;a not in b + b.transitive and b not in a + a.transitive&#x000a;}&#x000a;pred independentOnCommonBase[a, b: Stratum] {&#x000a;&#x0009;independent[a, b] and some a.transitive &amp; b.transitive&#x000a;}&#x000a;////close mutually-independent&#x000a;&#x000a;fun stratumPerspective[stratum: Stratum]: set Stratum&#x000a;{&#x000a;  stratum.*dependsOn&#x000a;}&#x000a;&#x000a;---------------------------------------------------&#x000a;-- handle the basics of resemblance and replacement&#x000a;---------------------------------------------------&#x000a;&#x000a;fact ElementFacts&#x000a;{&#x000a;&#x0009;-- nothing can resemble a replacement -- check to see that the things we resemble don&apos;t replace also&#x000a;&#x0009;no resembles.replaces&#x000a;&#x0009;&#x000a;&#x0009;all&#x000a;&#x0009;&#x0009;e: Element |&#x000a;&#x0009;let&#x000a;&#x0009;&#x0009;owner = e.home,&#x000a;&#x0009;&#x0009;-- strata that can see the component&#x000a;&#x0009;&#x0009;resemblingOwningStratum = e.resembles.home,&#x000a;&#x0009;&#x0009;replacingOwningStratum = e.replaces.home&#x000a;&#x0009;{&#x000a;&#x0009;&#x0009;-- no circularities in resemblance or replacement, and must be visible&#x000a;&#x0009;&#x0009;e not in (e.^resembles + e.replaces)&#x000a;&#x0009;&#x0009;resemblingOwningStratum in owner.canSeePlusMe&#x000a;&#x0009;&#x0009;replacingOwningStratum in owner.canSee&#x000a;&#x0009;&#x0009;&#x000a;&#x0009;&#x0009;-- tie up the owning stratum and the elements owned by that stratum&#x000a;&#x0009;&#x0009;e.home = ownedElements.e&#x000a;&#x000a;&#x0009;&#x0009;-- we only need to form a definition for stratum that can see us&#x000a;&#x0009;&#x0009;all s: Stratum |&#x000a;&#x0009;&#x0009;let&#x000a;&#x0009;&#x0009;&#x0009;-- who should I resemble&#x000a;&#x0009;&#x0009;&#x0009;-- (taking replacement into account)&#x000a;&#x0009;&#x0009;&#x0009;iResemble = e.resembles_e.s,&#x000a;&#x0009;&#x0009;&#x0009;-- if we resemble what we are replacing,&#x000a;&#x0009;&#x0009;&#x0009;-- look for the original under here&#x000a;&#x0009;&#x0009;&#x0009;topmostOfReplaced = getTopmost[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;owner.simpleDependsOn,&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;e.replaces &amp; e.resembles],&#x000a;&#x0009;&#x0009;&#x0009;-- look for any other resembled components&#x000a;&#x0009;&#x0009;&#x0009;-- from here down&#x000a;&#x0009;&#x0009;&#x0009;topmostOfResemblances = getTopmost[&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;s,&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;e.resembles - e.replaces]&#x000a;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;-- ***RULE W4: the type of the part must not be in a cyclic relationship with itself through containment&#x000a;&#x0009;&#x0009;&#x0009;-- it also cannot be cyclical with respect to resemblance&#x000a;&#x0009;&#x0009;&#x0009;e not in e.^(resembles_e.s)&#x000a;&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;owner not in s.transitivePlusMe =&gt;&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;no iResemble&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;no e.actsAs_e.s&#x000a;&#x0009;&#x0009;&#x0009;}&#x0009;&#x000a;&#x0009;&#x0009;&#x0009;else&#x000a;&#x0009;&#x0009;&#x0009;{&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- rewrite the resemblance graph to handle replacement&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;iResemble = topmostOfReplaced + topmostOfResemblances&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;-- who do we act as in this stratum?&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;e.actsAs_e.s =&#x000a;&#x0009;&#x0009;&#x0009;&#x0009;&#x0009;{ real: Element | no real.replaces and e in getTopmost[s, real] }&#x000a;&#x0009;&#x0009;&#x0009;}&#x0009;&#x000a;&#x0009;&#x0009;}&#x000a;&#x0009;}&#x000a;}&#x000a;&#x000a;fun getTopmost(s: set Stratum, e: Element): set Element&#x000a;{&#x000a;&#x0009;let replaced = replaces.e &amp; s.transitivePlusMe.replacing,&#x000a;&#x0009;&#x0009;topmostReplaced = replaced - replaced.resembles_e.s&#x000a;&#x0009;&#x0009;&#x0009;{ some topmostReplaced =&gt; topmostReplaced else e }&#x000a;}&#x000a;"/>

</alloy>
