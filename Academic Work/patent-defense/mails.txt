This document is subject to ATTORNEY CLIENT PRIVILEGE. PRIVILEGED AND CONFIDENTIAL.

Mail trail from initial contact from patent author to a week or so later.  Professor Jeff Magee and Professors Jeff Kramer from Imperial were my PhD supervisors.
They are the head of computer science and dean of engineering at Imperial.
Assoc. Professor Fernando Barros is from a university in Portugal, and is the patent author.
------------------------------------------------------------------------------------------------

Fernando Barros to me, 1 Jul 2010
	
Dear Authors,

In your paper "Using Resemblance to Support Component Reuse and Evolution",
the concept of "Resemblance" is very similar to "Structural Inheritance" developed in:

F.J. Barros. “Dynamic Structure Discrete Event System Specification: Structural Inheritance in the Delta Environment.” Proceedings of the Sixth Annual Conference on AI, Simulation and Planning in High Autonomy Systems, (La Jolla, EUA, 23-27 Março), 141-147, 1996.

F.J. Barros. System and Method for Programming using Independent and Reusable Software Units. No. US 6,851,104 B1, 2005. (Filed August 2000).

I would be pleased if you could provide, in future publications, a reference to "Structural Inheritance".

Sincerely,
Fernando Barros
------------------------------------

Andrew McVeigh to Jeff, Jeff, 1 Jul 2010
	
hiya,

how should i deal with the mail below?  i've never heard of the paper below, and cannot find it on the acm portal or anywhere else.

should i request a copy from fernando and check for similarities?  note also the patent.

cheers,
andrew
------------------------------------
	
Andrew McVeigh to Jeff, Jeff, 1 Jul 2010
	
by the way, the patent describes a way of assembling hierarchical systems in smalltalk.  it's code based, but has picture displays also.

it describes a code-base mechanism like resemblence called "structural inheritance" which allows the parent structure to be inherited and modified in the subclass.  doesn't describe any form of replacement, and hence doesn't have to deal with conflict.  uses variable names rather than uuids.  doesn't handle anything other than replacement/adding/deleting connectors, which it calls connectons.

i'm wondering if this guy would try to sue me when i start selling my case tool?  i'm guessing i need to speak to a lawyer?
------------------------------------

Jeffrey Kramer to me, Jeff, 1 Jul 2010
	
I would guess that there is no harm in asking for copies.
Better to be informed and be able to be clear about the differences.
jeff
------------------------------------
	
Andrew McVeigh to Jeffrey, Jeff, 1 Jul 2010
	
i don't mind about the paper, and i'm happy to be informed.  i'm more concerned that the guy has a patent on some type of hierarchical software construction.

on the face of it, it seems a bit similar to my stuff (without replacement) and i'm concerned he'll try to claim the software i'm about to sell is based on his invention.
------------------------------------

Jeffrey Kramer to me, Jeff, 1 Jul 2010
	
Don't worry - those are all concepts in the public domain.
Amazed he was able to get a patent!
Don't worry - he is just being pushy - very push!
jeff
------------------------------------

Magee, Jeff N to me, 1 Jul 2010
	
Hi Andrew,

I cannot find the paper either, you might as well ask him for a copy of the paper - without making a committment. I suspect that its no more related than simply inheritance. Once we read the paper we can see.

Best Regards

Jeff

PS Structural Inheritance is used all over the place.
------------------------------------

Andrew McVeigh to Jeff, 1 Jul 2010
	
i've managed to dig out the patent, it contains a description of the full mechanism, presumably from the paper.

i'm inclined not to communicate with this guy until i get advice.

the basic idea is a form of hierarchical structure, where you can inherit a superclasses structure and change it via adding/deleting/replacing connectors.
------------------------------------

Andrew McVeigh to Jeff, Jeff, 1 Jul 2010
	
i've reread the patent a few times, and essentially he has patented the primitives you established back in the late 80's, early 90's for reconfiguring architecture.  it's terrifying that someone could do that.

from your paper on dynamic reconfiguration: http://eprints.imperial.ac.uk/bitstream/10044/1/449/1/The%20Evolving%20Philosophers%20Problem.pdf

    Previous work [14], [19] has identified a set of management primitives for both specifying and modifying the structure of systems. In abstract form these are:
    create N:T [at L]
      Create node N of type T, optionally specify at physical location L.
      The name N must be unique within the system.  (For simplicity, T is omitted in later examples wherethe type is obvious.)
    remove N
      Remove node N
    link N1 to N2
      Create a connection from node N1 to node N2.
      (For simplicity, we omit the detail of multiple connectionsbetween nodes since this does not alter the algorithms presented in the following.)
    unlink N1 from N2
      Remove a connection between node N1 and node N2.


In the patent, nodes are called connectons, but apart from that the terminology is almost identical.

    The following methods were defined in the DEMOS System to change the connecton structure during the execution of a program:

        * addConnecton: aConnecton name: aName, adds a new connecton aConnecton, with an identifier aName;
        * link: aName gate: aGate to: bName gate: bGate filter: dFilter filter: rFilter, links aConnecton named aName gate aGate to gate bGate of connecton bName, establishing direct filter dFilter and reverse filter rFilter;
        * link: aName gate: aGate to: bName gate: bGate, links aConnecton named aName gate aGate to gate bGate of connecton bName, direct and reverse filters are assumed to be the identity function;
        * removeConnecton: aName, removes the connecton named aName and all its channels;
        * replaceConnecton: aName with: bConnecton name: bName, replaces a connecton named aName with connecton a named bName;
        * unLink: aName gate: aGate from: bName gates bGate, unlinks aConnecton named aName gate aGate from gate bGate of connecton bName;
        * unLink: aName gate: aGate, deletes all the links starting at aGate of connecton named aName. 


it's like he's read your work and copied your terms.  however, your work isn't mentioned in prior art at all.  i know it's just a US patent, but it's still horrible that people can do things like this.  and he wants me to cite his work?!

Andrew
------------------------------------

Andrew McVeigh to Fernando, 1 Jul 2010
	
Hello Professor Barros,

On 1 July 2010 12:07, Fernando Barros <barros@dei.uc.pt> wrote:

    Dear Authors,

    In your paper "Using Resemblance to Support Component Reuse and Evolution",
    the concept of "Resemblance" is very similar to "Structural Inheritance" developed in:

    F.J. Barros. “Dynamic Structure Discrete Event System Specification: Structural Inheritance in the Delta Environment.” Proceedings of the Sixth Annual Conference on AI, Simulation and Planning in High Autonomy Systems, (La Jolla, EUA, 23-27 Março), 141-147, 1996.


I'm sorry i didn't include a reference.  I wasn't aware of the paper.  Do you have a pdf copy you could send me, I can't find it online.

 

    F.J. Barros. System and Method for Programming using Independent and Reusable Software Units. No. US 6,851,104 B1, 2005. (Filed August 2000).

    I would be pleased if you could provide, in future publications, a reference to "Structural Inheritance".


Certainly, I'd be happy to.

Just a bit of background though about my use of inheritance/resemblance --  I didn't invent the concept of using inheritance structurally in this way.  Instead it comes directly from an older commercial system and toolset called Objectime ROOM, which was developed by Bran Selic and later bought by Rational/IBM.  It later became Rational Realtime, perhaps you've used it or heard of it?  Anyway, ROOM allows a subclass to inherit and add / delete / replace inherited structure: what you call "connectons" are known as properties.  What you call bindings are also called bindings in ROOM.

http://www.amazon.com/Real-Time-Object-Oriented-Modeling-Bran-Selic/dp/0471599174/ref=sr_1_1?ie=UTF8&s=books&qid=1277997635&sr=8-1

I've attached 4 (badly scanned, sorry) pages from the above book from 1994 which describes this exact technique, with exactly the same name.  You will find page 3 interesting -- it shows the reuse of the structure of a superclass in 2 separate ways.  ROOM and Objectime have been selling tools to support this since '91.  They also produced a number of academic papers on the subject in the early 90's.  Sadly, Rational Realtime is no longer sold, although luckily I managed to salvage an entire set of manuals describing the operation of the toolset.

(As an aside, my innovation is not actually in using inheritance in this way -- as mentioned above, I've simply copied the ROOM concepts.  The unusual part is instead in the "replacement" construct which allows existing components to be altered in-situ.  My paper is not well named in this respect)

If it is ok with you, i will reference your work on structural inheritance in the same section where I discuss the ROOM structural inheritance concepts.

Cheers,
Andrew
p.s. By the way, this identical technique has been fully incorporated by IBM and others into the UML2.x modelling language under the name "redefinition".  i.e. you can redefine (add/delete/replace) connectors, parts etc in a subclass.  They use this to refine transitions in structural state machines amongst other things.  See page 561 of the following: http://www.amazon.com/Unified-Modeling-Language-Reference-Manual/dp/032171895X/ref=sr_1_1?ie=UTF8&s=books&qid=1277998801&sr=1-1


 

    Sincerely,
    Fernando Barros


4 attachments — Download all attachments   View all images  
room1.jpeg	room1.jpeg
264K   View   Download  
room2.jpeg	room2.jpeg
313K   View   Download  
room3.jpeg	room3.jpeg
203K   View   Download  
room4.jpeg	room4.jpeg
322K   View   Download  
------------------------------------

Andrew McVeigh to Jeff, Jeff, 1 July 2010
	
hope i'm doing the right thing...  i hope he understands the the exact mechanism his patent describes is already described in Bran Selic's literature (with nice pictures) from the early 1990s.  it's not mentioned in the prior art section of the patent, and it could almost certainly be invalidated on that basis.

the same concept is more or less in UML2.  the cleverness is instead in the use of replacement in conjunction with this technique -- it leads to more modelling power, but also to the potential for conflicts and conflict resolution.
------------------------------------

Jeffrey Kramer to me, Jeff, 1 Jul 2010
	
Absolutely - I really don't think you have any worries wrt his work.
Take care
jeff
------------------------------------

Andrew McVeigh to Jeffrey, Jeff, 1 July 2010
	
i'm getting really close to something that could be released in a month or so.  i'm now improving the graphics -- JeffK you once remarked that I'd never updated the looks of the diagrams and it got me to thinking.  what do you think of the new visuals?

cheers,
Andrew
2 attachments — Download all attachments   View all images  
packages.jpg	packages.jpg
100K   View   Download  
components.jpg	components.jpg
103K   View   Download  
------------------------------------

Jeffrey Kramer to me, Jeff, 1 Jul 2010
	
Initial impression is very good.
We'll let you know if we have any detailed remarks.
well done
jeff
------------------------------------

Fernando Barros to me, 1 Jul 2010
	
Dear Dr. Andrew McVeigh,

Thank you for your note and references.
Please find enclosed the requested paper.

Best Regards,
Fernando Barros
------------------------------------

Andrew McVeigh to Jeff, Jeff, 1 July 2010
	
show details 1 Jul
	
hmm, not sure what to make of it.  perhaps he's just looking for a citation?
------------------------------------

Magee, Jeff N to me, Jeff, 1 July 2010
	
I don't think it will hurt to cite him with respect to the removal of classes.

It does seem to confuse classes and instances of classes. Is a model an instance?

Jeff
------------------------------------

Andrew McVeigh to Jeff, Jeff, 1 Jul 2010
	
yes, an instance is a "model of a class".  bizarrely, in the patent description, the name he uses instead is "connecton"!
------------------------------------

Andrew McVeigh to Jeff, Jeff, 6 Jul 2010
	
actually, i've been rereading the patent a few times and the patent
claims.  it doesn't wire up instances of classes per se, each instance
in a component is actually a single method.  yikes.

i'm waiting on a meeting with a lawyer now to establish a defensive
strategy.  apparently these patents can be very difficult to get
around, even if the patent has claimed someone elses invention from
long ago.  terrible stuff, how broken is that system.  you can ask for
a reexamination based on prior art, but patents being revoked or
narrowed in scope are rare.

the real concern is that claims 1 and 2 in the patent basically lay
claim to any form of component development.  i.e. it may cover darwin,
as I read it.  i'll meet with the lawyer sometime next week and keep
you updated.  if the patent applies to my stuff, i intend to apply to
get it reexamined based on darwin, your work on dynamic structures and
bran selic's objectime work.

andrew
------------------------------------

Jeffrey Kramer to me, Jeff, 7 Jul 2010
	
Thanks for the update.
I must admit that I still find it hard to believe that it would impact on your work, but no harm in getting advice.

Jonathan Page at Imperial Innovations could probably provide some advice regarding patents. Perhaps we should try and all meet with him when jeff M is around too. Perhaps after the summer?

jeff
------------------------------------

Andrew McVeigh to Jeffrey, Jeff, 7 Jul 2010
	

On 7 July 2010 15:41, Jeffrey Kramer <j.kramer@imperial.ac.uk> wrote:

    Thanks for the update.
    I must admit that I still find it hard to believe that it would impact on your work, but no harm in getting advice.


I agree, it's hard to believe that people can effectively lay claim to things that have been around for ages.
 

    Jonathan Page at Imperial Innovations could probably provide some advice regarding patents. Perhaps we should try and all meet with him when jeff M is around too. Perhaps after the summer?


i've been given an introduction to one of the top patent lawyers (http://www.fr.com/garland-t-stephens/) in the US from one of my friends that makes a similar tool to mine (structure101 from headway).  i'll have a chat to him and let you know how i'll take it further.  i basically want a simple (and cost effective;-) strategy for dealing with the dreaded "cease and desist" letter if it comes.

just reading up on software patents and the defensive strategies used has been quite interesting.  the words they use in the patents do not retain their common english meanings...

cheers,
andrew
