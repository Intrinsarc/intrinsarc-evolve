%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 123 229 472 562
%%Creator: FreeHEP Graphics2D Driver
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, 2 April 2012 22:51:52 o'clock BST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
348 332 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
348.000 0.00000 l
348.000 332.000 l
0.00000 332.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] concat
0 0 372 356 rc
q
q
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
-1.00000 -1.00000 374.000 358.000 rc
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
0.00000 0.00000 100000 100000 rc
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
-2.00000 -2.00000 376.000 360.000 rc
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
1.00000 1.00000 1.00000 RG
newpath
160.000 283.000 m
160.000 302.000 l
160.000 303.657 161.343 305.000 163.000 305.000  c
195.062 305.000 l
196.719 305.000 198.062 303.657 198.062 302.000  c
198.062 283.000 l
198.062 281.343 196.719 280.000 195.062 280.000  c
163.000 280.000 l
161.343 280.000 160.000 281.343 160.000 283.000  c
h
f
0 J
2 j
.611765 .564706 .564706 RG
newpath
160.000 283.000 m
160.000 302.000 l
160.000 303.657 161.343 305.000 163.000 305.000  c
195.062 305.000 l
196.719 305.000 198.062 303.657 198.062 302.000  c
198.062 283.000 l
198.062 281.343 196.719 280.000 195.062 280.000  c
163.000 280.000 l
161.343 280.000 160.000 281.343 160.000 283.000  c
h
S
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [160.0 280.0 160.0 305.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8784314 0.8117647 0.8117647]
         /C1 [1.0 1.0 1.0]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
163.000 286.000 m
163.000 301.500 l
163.000 303.157 164.343 304.500 166.000 304.500  c
194.562 304.500 l
196.219 304.500 197.562 303.157 197.562 301.500  c
197.562 286.000 l
197.562 284.343 196.219 283.000 194.562 283.000  c
166.000 283.000 l
164.343 283.000 163.000 284.343 163.000 286.000  c
h
f
1.00000 1.00000 1.00000 RG
newpath
160.000 298.000 m
160.000 352.000 l
160.000 353.657 161.343 355.000 163.000 355.000  c
244.000 355.000 l
245.657 355.000 247.000 353.657 247.000 352.000  c
247.000 298.000 l
247.000 296.343 245.657 295.000 244.000 295.000  c
163.000 295.000 l
161.343 295.000 160.000 296.343 160.000 298.000  c
h
f
.611765 .564706 .564706 RG
newpath
160.000 298.000 m
160.000 352.000 l
160.000 353.657 161.343 355.000 163.000 355.000  c
244.000 355.000 l
245.657 355.000 247.000 353.657 247.000 352.000  c
247.000 298.000 l
247.000 296.343 245.657 295.000 244.000 295.000  c
163.000 295.000 l
161.343 295.000 160.000 296.343 160.000 298.000  c
h
S
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [160.0 295.0 160.0 355.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8784314 0.8117647 0.8117647]
         /C1 [1.0 1.0 1.0]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
163.000 301.000 m
163.000 351.500 l
163.000 353.157 164.343 354.500 166.000 354.500  c
243.500 354.500 l
245.157 354.500 246.500 353.157 246.500 351.500  c
246.500 301.000 l
246.500 299.343 245.157 298.000 243.500 298.000  c
166.000 298.000 l
164.343 298.000 163.000 299.343 163.000 301.000  c
h
f
[ 1.00000 0.00000 0.00000 1.00000 189.500 323.117 ] concat
[ 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 ] concat
0.00000 0.00000 0.00000 RG
newpath
1.76562 12.0645 m
.781250 12.0645 l
.781250 3.47070 l
1.84375 3.47070 l
1.84375 6.53320 l
2.29167 5.98112 2.85938 5.70508 3.54688 5.70508  c
3.93229 5.70508 4.29427 5.78060 4.63281 5.93164  c
4.97135 6.08268 5.25260 6.29883 5.47656 6.58008  c
5.70052 6.86133 5.87500 7.19987 6.00000 7.59570  c
6.12500 7.99154 6.18750 8.41341 6.18750 8.86133  c
6.18750 9.92383 5.92188 10.7467 5.39062 11.3301  c
4.85938 11.9134 4.22917 12.2051 3.50000 12.2051  c
2.76042 12.2051 2.18229 11.8978 1.76562 11.2832  c
1.76562 12.0645 l
h
1.75000 8.90820 m
1.75000 9.64779 1.85417 10.1842 2.06250 10.5176  c
2.39583 11.0592 2.84375 11.3301 3.40625 11.3301  c
3.86458 11.3301 4.26302 11.1322 4.60156 10.7363  c
4.94010 10.3405 5.10938 9.74154 5.10938 8.93945  c
5.10938 8.12695 4.94792 7.52799 4.62500 7.14258  c
4.30208 6.75716 3.91146 6.56445 3.45312 6.56445  c
2.99479 6.56445 2.59635 6.76497 2.25781 7.16602  c
1.91927 7.56706 1.75000 8.14779 1.75000 8.90820  c
h
11.5332 11.2988 m
11.1374 11.6322 10.7598 11.8665 10.4004 12.0020  c
10.0410 12.1374 9.65299 12.2051 9.23633 12.2051  c
8.54883 12.2051 8.02279 12.0384 7.65820 11.7051  c
7.29362 11.3717 7.11133 10.9447 7.11133 10.4238  c
7.11133 10.1217 7.17904 9.84310 7.31445 9.58789  c
7.44987 9.33268 7.63216 9.12956 7.86133 8.97852  c
8.09049 8.82747 8.34570 8.71549 8.62695 8.64258  c
8.82487 8.58008 9.13737 8.52279 9.56445 8.47070  c
10.4082 8.37695 11.0332 8.25716 11.4395 8.11133  c
11.4395 7.96549 11.4395 7.87695 11.4395 7.84570  c
11.4395 7.40820 11.3405 7.10091 11.1426 6.92383  c
10.8717 6.69466 10.4707 6.58008 9.93945 6.58008  c
9.44987 6.58008 9.08529 6.66602 8.84570 6.83789  c
8.60612 7.00977 8.42904 7.31445 8.31445 7.75195  c
7.28320 7.61133 l
7.37695 7.17383 7.53320 6.81966 7.75195 6.54883  c
7.97070 6.27799 8.28320 6.06966 8.68945 5.92383  c
9.09570 5.77799 9.56445 5.70508 10.0957 5.70508  c
10.6270 5.70508 11.0592 5.76758 11.3926 5.89258  c
11.7259 6.01758 11.9707 6.17383 12.1270 6.36133  c
12.2832 6.54883 12.3926 6.78841 12.4551 7.08008  c
12.4863 7.25716 12.5020 7.58008 12.5020 8.04883  c
12.5020 9.45508 l
12.5020 10.4342 12.5254 11.0540 12.5723 11.3145  c
12.6191 11.5749 12.7103 11.8249 12.8457 12.0645  c
11.7363 12.0645 l
11.6322 11.8457 11.5645 11.5905 11.5332 11.2988  c
h
11.4395 8.93945 m
11.0540 9.09570 10.4811 9.23112 9.72070 9.34570  c
9.28320 9.40820 8.97591 9.47852 8.79883 9.55664  c
8.62174 9.63477 8.48372 9.74674 8.38477 9.89258  c
8.28581 10.0384 8.23633 10.2051 8.23633 10.3926  c
8.23633 10.6738 8.34310 10.9082 8.55664 11.0957  c
8.77018 11.2832 9.08008 11.3770 9.48633 11.3770  c
9.89258 11.3770 10.2546 11.2884 10.5723 11.1113  c
10.8900 10.9342 11.1217 10.6895 11.2676 10.3770  c
11.3822 10.1374 11.4395 9.78841 11.4395 9.33008  c
11.4395 8.93945 l
h
13.7227 10.2051 m
14.7539 10.0488 l
14.8164 10.4655 14.9805 10.7832 15.2461 11.0020  c
15.5117 11.2207 15.8893 11.3301 16.3789 11.3301  c
16.8581 11.3301 17.2148 11.2337 17.4492 11.0410  c
17.6836 10.8483 17.8008 10.6165 17.8008 10.3457  c
17.8008 10.1061 17.6966 9.91862 17.4883 9.78320  c
17.3424 9.68945 16.9831 9.56966 16.4102 9.42383  c
15.6393 9.22591 15.1055 9.05664 14.8086 8.91602  c
14.5117 8.77539 14.2852 8.58008 14.1289 8.33008  c
13.9727 8.08008 13.8945 7.79883 13.8945 7.48633  c
13.8945 7.21549 13.9570 6.96029 14.0820 6.72070  c
14.2070 6.48112 14.3789 6.28320 14.5977 6.12695  c
14.7643 6.01237 14.9883 5.91341 15.2695 5.83008  c
15.5508 5.74674 15.8581 5.70508 16.1914 5.70508  c
16.6706 5.70508 17.0951 5.77539 17.4648 5.91602  c
17.8346 6.05664 18.1081 6.24674 18.2852 6.48633  c
18.4622 6.72591 18.5820 7.04362 18.6445 7.43945  c
17.6133 7.58008 l
17.5716 7.26758 17.4388 7.02018 17.2148 6.83789  c
16.9909 6.65560 16.6706 6.56445 16.2539 6.56445  c
15.7747 6.56445 15.4310 6.64518 15.2227 6.80664  c
15.0143 6.96810 14.9102 7.15820 14.9102 7.37695  c
14.9102 7.51237 14.9518 7.63216 15.0352 7.73633  c
15.1289 7.85091 15.2643 7.94466 15.4414 8.01758  c
15.5456 8.05924 15.8581 8.14779 16.3789 8.28320  c
17.1289 8.49154 17.6497 8.65820 17.9414 8.78320  c
18.2331 8.90820 18.4622 9.09049 18.6289 9.33008  c
18.7956 9.56966 18.8789 9.87174 18.8789 10.2363  c
18.8789 10.5905 18.7773 10.9212 18.5742 11.2285  c
18.3711 11.5358 18.0768 11.7754 17.6914 11.9473  c
17.3060 12.1191 16.8685 12.2051 16.3789 12.2051  c
15.5664 12.2051 14.9492 12.0358 14.5273 11.6973  c
14.1055 11.3587 13.8372 10.8613 13.7227 10.2051  c
h
24.3945 10.0645 m
25.4883 10.1895 l
25.3216 10.8249 25.0039 11.3197 24.5352 11.6738  c
24.0664 12.0280 23.4727 12.2051 22.7539 12.2051  c
21.8477 12.2051 21.1263 11.9238 20.5898 11.3613  c
20.0534 10.7988 19.7852 10.0124 19.7852 9.00195  c
19.7852 7.96029 20.0560 7.15039 20.5977 6.57227  c
21.1393 5.99414 21.8372 5.70508 22.6914 5.70508  c
23.5247 5.70508 24.2044 5.98633 24.7305 6.54883  c
25.2565 7.11133 25.5195 7.90820 25.5195 8.93945  c
25.5195 9.00195 25.5195 9.09570 25.5195 9.22070  c
20.8789 9.22070 l
20.9206 9.90820 21.1133 10.4316 21.4570 10.7910  c
21.8008 11.1504 22.2331 11.3301 22.7539 11.3301  c
23.1393 11.3301 23.4701 11.2285 23.7461 11.0254  c
24.0221 10.8223 24.2383 10.5020 24.3945 10.0645  c
h
20.9414 8.36133 m
24.4102 8.36133 l
24.3685 7.83008 24.2383 7.43424 24.0195 7.17383  c
23.6758 6.76758 23.2383 6.56445 22.7070 6.56445  c
22.2174 6.56445 21.8086 6.72591 21.4805 7.04883  c
21.1523 7.37174 20.9727 7.80924 20.9414 8.36133  c
h
f
[ 1.00000 0.00000 0.00000 1.00000 161.500 295.117 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
.752941 .752941 .752941 RG
newpath
226.299 299.000 m
241.000 299.000 l
241.000 313.701 l
226.299 313.701 l
226.299 299.000 l
h
f
0 j
0.00000 0.00000 0.00000 RG
newpath
226.299 299.000 m
241.000 299.000 l
241.000 313.701 l
226.299 313.701 l
226.299 299.000 l
h
S
1.00000 1.00000 1.00000 RG
newpath
226.299 299.000 m
241.000 299.000 l
241.000 303.900 l
233.649 303.900 l
233.649 308.801 l
226.299 308.801 l
h
f*
2 j
0.00000 0.00000 0.00000 RG
newpath
226.299 299.000 m
241.000 299.000 l
241.000 303.900 l
233.649 303.900 l
233.649 308.801 l
226.299 308.801 l
h
S
0.00000 0.00000 0.00000 RG
0 j
1.00000 1.00000 1.00000 RG
newpath
32.0000 163.000 m
32.0000 182.000 l
32.0000 183.657 33.3431 185.000 35.0000 185.000  c
67.0625 185.000 l
68.7194 185.000 70.0625 183.657 70.0625 182.000  c
70.0625 163.000 l
70.0625 161.343 68.7194 160.000 67.0625 160.000  c
35.0000 160.000 l
33.3431 160.000 32.0000 161.343 32.0000 163.000  c
h
f
2 j
.611765 .564706 .564706 RG
newpath
32.0000 163.000 m
32.0000 182.000 l
32.0000 183.657 33.3431 185.000 35.0000 185.000  c
67.0625 185.000 l
68.7194 185.000 70.0625 183.657 70.0625 182.000  c
70.0625 163.000 l
70.0625 161.343 68.7194 160.000 67.0625 160.000  c
35.0000 160.000 l
33.3431 160.000 32.0000 161.343 32.0000 163.000  c
h
S
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [32.0 160.0 32.0 185.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8784314 0.8117647 0.8117647]
         /C1 [1.0 1.0 1.0]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
35.0000 166.000 m
35.0000 181.500 l
35.0000 183.157 36.3431 184.500 38.0000 184.500  c
66.5625 184.500 l
68.2194 184.500 69.5625 183.157 69.5625 181.500  c
69.5625 166.000 l
69.5625 164.343 68.2194 163.000 66.5625 163.000  c
38.0000 163.000 l
36.3431 163.000 35.0000 164.343 35.0000 166.000  c
h
f
1.00000 1.00000 1.00000 RG
newpath
32.0000 178.000 m
32.0000 232.000 l
32.0000 233.657 33.3431 235.000 35.0000 235.000  c
116.000 235.000 l
117.657 235.000 119.000 233.657 119.000 232.000  c
119.000 178.000 l
119.000 176.343 117.657 175.000 116.000 175.000  c
35.0000 175.000 l
33.3431 175.000 32.0000 176.343 32.0000 178.000  c
h
f
.611765 .564706 .564706 RG
newpath
32.0000 178.000 m
32.0000 232.000 l
32.0000 233.657 33.3431 235.000 35.0000 235.000  c
116.000 235.000 l
117.657 235.000 119.000 233.657 119.000 232.000  c
119.000 178.000 l
119.000 176.343 117.657 175.000 116.000 175.000  c
35.0000 175.000 l
33.3431 175.000 32.0000 176.343 32.0000 178.000  c
h
S
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [32.0 175.0 32.0 235.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8784314 0.8117647 0.8117647]
         /C1 [1.0 1.0 1.0]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
35.0000 181.000 m
35.0000 231.500 l
35.0000 233.157 36.3431 234.500 38.0000 234.500  c
115.500 234.500 l
117.157 234.500 118.500 233.157 118.500 231.500  c
118.500 181.000 l
118.500 179.343 117.157 178.000 115.500 178.000  c
38.0000 178.000 l
36.3431 178.000 35.0000 179.343 35.0000 181.000  c
h
f
[ 1.00000 0.00000 0.00000 1.00000 53.0000 203.117 ] concat
[ 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 ] concat
0.00000 0.00000 0.00000 RG
newpath
1.76562 12.0645 m
.781250 12.0645 l
.781250 3.47070 l
1.84375 3.47070 l
1.84375 6.53320 l
2.29167 5.98112 2.85938 5.70508 3.54688 5.70508  c
3.93229 5.70508 4.29427 5.78060 4.63281 5.93164  c
4.97135 6.08268 5.25260 6.29883 5.47656 6.58008  c
5.70052 6.86133 5.87500 7.19987 6.00000 7.59570  c
6.12500 7.99154 6.18750 8.41341 6.18750 8.86133  c
6.18750 9.92383 5.92188 10.7467 5.39062 11.3301  c
4.85938 11.9134 4.22917 12.2051 3.50000 12.2051  c
2.76042 12.2051 2.18229 11.8978 1.76562 11.2832  c
1.76562 12.0645 l
h
1.75000 8.90820 m
1.75000 9.64779 1.85417 10.1842 2.06250 10.5176  c
2.39583 11.0592 2.84375 11.3301 3.40625 11.3301  c
3.86458 11.3301 4.26302 11.1322 4.60156 10.7363  c
4.94010 10.3405 5.10938 9.74154 5.10938 8.93945  c
5.10938 8.12695 4.94792 7.52799 4.62500 7.14258  c
4.30208 6.75716 3.91146 6.56445 3.45312 6.56445  c
2.99479 6.56445 2.59635 6.76497 2.25781 7.16602  c
1.91927 7.56706 1.75000 8.14779 1.75000 8.90820  c
h
7.45508 12.0645 m
7.45508 5.84570 l
8.40820 5.84570 l
8.40820 6.78320 l
8.64779 6.34570 8.86914 6.05664 9.07227 5.91602  c
9.27539 5.77539 9.50195 5.70508 9.75195 5.70508  c
10.1061 5.70508 10.4655 5.81445 10.8301 6.03320  c
10.4707 7.01758 l
10.2103 6.86133 9.95508 6.78320 9.70508 6.78320  c
9.46549 6.78320 9.25456 6.85352 9.07227 6.99414  c
8.88997 7.13477 8.76237 7.33008 8.68945 7.58008  c
8.56445 7.95508 8.50195 8.36133 8.50195 8.79883  c
8.50195 12.0645 l
7.45508 12.0645 l
h
15.5293 11.2988 m
15.1335 11.6322 14.7559 11.8665 14.3965 12.0020  c
14.0371 12.1374 13.6491 12.2051 13.2324 12.2051  c
12.5449 12.2051 12.0189 12.0384 11.6543 11.7051  c
11.2897 11.3717 11.1074 10.9447 11.1074 10.4238  c
11.1074 10.1217 11.1751 9.84310 11.3105 9.58789  c
11.4460 9.33268 11.6283 9.12956 11.8574 8.97852  c
12.0866 8.82747 12.3418 8.71549 12.6230 8.64258  c
12.8210 8.58008 13.1335 8.52279 13.5605 8.47070  c
14.4043 8.37695 15.0293 8.25716 15.4355 8.11133  c
15.4355 7.96549 15.4355 7.87695 15.4355 7.84570  c
15.4355 7.40820 15.3366 7.10091 15.1387 6.92383  c
14.8678 6.69466 14.4668 6.58008 13.9355 6.58008  c
13.4460 6.58008 13.0814 6.66602 12.8418 6.83789  c
12.6022 7.00977 12.4251 7.31445 12.3105 7.75195  c
11.2793 7.61133 l
11.3730 7.17383 11.5293 6.81966 11.7480 6.54883  c
11.9668 6.27799 12.2793 6.06966 12.6855 5.92383  c
13.0918 5.77799 13.5605 5.70508 14.0918 5.70508  c
14.6230 5.70508 15.0553 5.76758 15.3887 5.89258  c
15.7220 6.01758 15.9668 6.17383 16.1230 6.36133  c
16.2793 6.54883 16.3887 6.78841 16.4512 7.08008  c
16.4824 7.25716 16.4980 7.58008 16.4980 8.04883  c
16.4980 9.45508 l
16.4980 10.4342 16.5215 11.0540 16.5684 11.3145  c
16.6152 11.5749 16.7064 11.8249 16.8418 12.0645  c
15.7324 12.0645 l
15.6283 11.8457 15.5605 11.5905 15.5293 11.2988  c
h
15.4355 8.93945 m
15.0501 9.09570 14.4772 9.23112 13.7168 9.34570  c
13.2793 9.40820 12.9720 9.47852 12.7949 9.55664  c
12.6178 9.63477 12.4798 9.74674 12.3809 9.89258  c
12.2819 10.0384 12.2324 10.2051 12.2324 10.3926  c
12.2324 10.6738 12.3392 10.9082 12.5527 11.0957  c
12.7663 11.2832 13.0762 11.3770 13.4824 11.3770  c
13.8887 11.3770 14.2507 11.2884 14.5684 11.1113  c
14.8861 10.9342 15.1178 10.6895 15.2637 10.3770  c
15.3783 10.1374 15.4355 9.78841 15.4355 9.33008  c
15.4355 8.93945 l
h
18.1406 12.0645 m
18.1406 5.84570 l
19.0781 5.84570 l
19.0781 6.72070 l
19.5365 6.04362 20.1979 5.70508 21.0625 5.70508  c
21.4375 5.70508 21.7839 5.77279 22.1016 5.90820  c
22.4193 6.04362 22.6562 6.22070 22.8125 6.43945  c
22.9688 6.65820 23.0781 6.91341 23.1406 7.20508  c
23.1719 7.40299 23.1875 7.74674 23.1875 8.23633  c
23.1875 12.0645 l
22.1406 12.0645 l
22.1406 8.28320 l
22.1406 7.84570 22.0990 7.52279 22.0156 7.31445  c
21.9323 7.10612 21.7865 6.93685 21.5781 6.80664  c
21.3698 6.67643 21.1250 6.61133 20.8438 6.61133  c
20.3958 6.61133 20.0078 6.75456 19.6797 7.04102  c
19.3516 7.32747 19.1875 7.86654 19.1875 8.65820  c
19.1875 12.0645 l
18.1406 12.0645 l
h
28.8770 9.78320 m
29.9082 9.92383 l
29.7936 10.6322 29.5020 11.1895 29.0332 11.5957  c
28.5645 12.0020 27.9915 12.2051 27.3145 12.2051  c
26.4603 12.2051 25.7754 11.9264 25.2598 11.3691  c
24.7441 10.8118 24.4863 10.0124 24.4863 8.97070  c
24.4863 8.30404 24.5983 7.71810 24.8223 7.21289  c
25.0462 6.70768 25.3848 6.33008 25.8379 6.08008  c
26.2910 5.83008 26.7884 5.70508 27.3301 5.70508  c
27.9967 5.70508 28.5462 5.87435 28.9785 6.21289  c
29.4108 6.55143 29.6895 7.03841 29.8145 7.67383  c
28.7832 7.83008 l
28.6895 7.41341 28.5176 7.09831 28.2676 6.88477  c
28.0176 6.67122 27.7155 6.56445 27.3613 6.56445  c
26.8301 6.56445 26.3978 6.75456 26.0645 7.13477  c
25.7311 7.51497 25.5645 8.11654 25.5645 8.93945  c
25.5645 9.78320 25.7259 10.3926 26.0488 10.7676  c
26.3717 11.1426 26.7884 11.3301 27.2988 11.3301  c
27.7155 11.3301 28.0618 11.2051 28.3379 10.9551  c
28.6139 10.7051 28.7936 10.3145 28.8770 9.78320  c
h
30.8145 12.0645 m
30.8145 3.47070 l
31.8613 3.47070 l
31.8613 6.54883 l
32.3509 5.98633 32.9707 5.70508 33.7207 5.70508  c
34.1895 5.70508 34.5931 5.79622 34.9316 5.97852  c
35.2702 6.16081 35.5124 6.41081 35.6582 6.72852  c
35.8040 7.04622 35.8770 7.51237 35.8770 8.12695  c
35.8770 12.0645 l
34.8301 12.0645 l
34.8301 8.12695 l
34.8301 7.59570 34.7155 7.21029 34.4863 6.97070  c
34.2572 6.73112 33.9342 6.61133 33.5176 6.61133  c
33.2051 6.61133 32.9108 6.69206 32.6348 6.85352  c
32.3587 7.01497 32.1608 7.23372 32.0410 7.50977  c
31.9212 7.78581 31.8613 8.16862 31.8613 8.65820  c
31.8613 12.0645 l
30.8145 12.0645 l
h
41.1602 12.0645 m
40.1133 12.0645 l
40.1133 5.34570 l
39.8529 5.58529 39.5169 5.82747 39.1055 6.07227  c
38.6940 6.31706 38.3268 6.49674 38.0039 6.61133  c
38.0039 5.59570 l
38.5872 5.31445 39.1003 4.97852 39.5430 4.58789  c
39.9857 4.19727 40.3008 3.81445 40.4883 3.43945  c
41.1602 3.43945 l
41.1602 12.0645 l
h
f
[ 1.00000 0.00000 0.00000 1.00000 25.0000 175.117 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
.752941 .752941 .752941 RG
newpath
98.2988 179.000 m
113.000 179.000 l
113.000 193.701 l
98.2988 193.701 l
98.2988 179.000 l
h
f
0 j
0.00000 0.00000 0.00000 RG
newpath
98.2988 179.000 m
113.000 179.000 l
113.000 193.701 l
98.2988 193.701 l
98.2988 179.000 l
h
S
1.00000 1.00000 1.00000 RG
newpath
98.2988 179.000 m
113.000 179.000 l
113.000 183.900 l
105.649 183.900 l
105.649 188.801 l
98.2988 188.801 l
h
f*
2 j
0.00000 0.00000 0.00000 RG
newpath
98.2988 179.000 m
113.000 179.000 l
113.000 183.900 l
105.649 183.900 l
105.649 188.801 l
98.2988 188.801 l
h
S
0.00000 0.00000 0.00000 RG
0 j
1.00000 1.00000 1.00000 RG
newpath
284.000 163.000 m
284.000 182.000 l
284.000 183.657 285.343 185.000 287.000 185.000  c
319.062 185.000 l
320.719 185.000 322.062 183.657 322.062 182.000  c
322.062 163.000 l
322.062 161.343 320.719 160.000 319.062 160.000  c
287.000 160.000 l
285.343 160.000 284.000 161.343 284.000 163.000  c
h
f
2 j
.611765 .564706 .564706 RG
newpath
284.000 163.000 m
284.000 182.000 l
284.000 183.657 285.343 185.000 287.000 185.000  c
319.062 185.000 l
320.719 185.000 322.062 183.657 322.062 182.000  c
322.062 163.000 l
322.062 161.343 320.719 160.000 319.062 160.000  c
287.000 160.000 l
285.343 160.000 284.000 161.343 284.000 163.000  c
h
S
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [284.0 160.0 284.0 185.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8784314 0.8117647 0.8117647]
         /C1 [1.0 1.0 1.0]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
287.000 166.000 m
287.000 181.500 l
287.000 183.157 288.343 184.500 290.000 184.500  c
318.562 184.500 l
320.219 184.500 321.562 183.157 321.562 181.500  c
321.562 166.000 l
321.562 164.343 320.219 163.000 318.562 163.000  c
290.000 163.000 l
288.343 163.000 287.000 164.343 287.000 166.000  c
h
f
1.00000 1.00000 1.00000 RG
newpath
284.000 178.000 m
284.000 232.000 l
284.000 233.657 285.343 235.000 287.000 235.000  c
368.000 235.000 l
369.657 235.000 371.000 233.657 371.000 232.000  c
371.000 178.000 l
371.000 176.343 369.657 175.000 368.000 175.000  c
287.000 175.000 l
285.343 175.000 284.000 176.343 284.000 178.000  c
h
f
.611765 .564706 .564706 RG
newpath
284.000 178.000 m
284.000 232.000 l
284.000 233.657 285.343 235.000 287.000 235.000  c
368.000 235.000 l
369.657 235.000 371.000 233.657 371.000 232.000  c
371.000 178.000 l
371.000 176.343 369.657 175.000 368.000 175.000  c
287.000 175.000 l
285.343 175.000 284.000 176.343 284.000 178.000  c
h
S
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [284.0 175.0 284.0 235.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8784314 0.8117647 0.8117647]
         /C1 [1.0 1.0 1.0]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
287.000 181.000 m
287.000 231.500 l
287.000 233.157 288.343 234.500 290.000 234.500  c
367.500 234.500 l
369.157 234.500 370.500 233.157 370.500 231.500  c
370.500 181.000 l
370.500 179.343 369.157 178.000 367.500 178.000  c
290.000 178.000 l
288.343 178.000 287.000 179.343 287.000 181.000  c
h
f
[ 1.00000 0.00000 0.00000 1.00000 305.000 203.117 ] concat
[ 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 ] concat
0.00000 0.00000 0.00000 RG
newpath
1.76562 12.0645 m
.781250 12.0645 l
.781250 3.47070 l
1.84375 3.47070 l
1.84375 6.53320 l
2.29167 5.98112 2.85938 5.70508 3.54688 5.70508  c
3.93229 5.70508 4.29427 5.78060 4.63281 5.93164  c
4.97135 6.08268 5.25260 6.29883 5.47656 6.58008  c
5.70052 6.86133 5.87500 7.19987 6.00000 7.59570  c
6.12500 7.99154 6.18750 8.41341 6.18750 8.86133  c
6.18750 9.92383 5.92188 10.7467 5.39062 11.3301  c
4.85938 11.9134 4.22917 12.2051 3.50000 12.2051  c
2.76042 12.2051 2.18229 11.8978 1.76562 11.2832  c
1.76562 12.0645 l
h
1.75000 8.90820 m
1.75000 9.64779 1.85417 10.1842 2.06250 10.5176  c
2.39583 11.0592 2.84375 11.3301 3.40625 11.3301  c
3.86458 11.3301 4.26302 11.1322 4.60156 10.7363  c
4.94010 10.3405 5.10938 9.74154 5.10938 8.93945  c
5.10938 8.12695 4.94792 7.52799 4.62500 7.14258  c
4.30208 6.75716 3.91146 6.56445 3.45312 6.56445  c
2.99479 6.56445 2.59635 6.76497 2.25781 7.16602  c
1.91927 7.56706 1.75000 8.14779 1.75000 8.90820  c
h
7.45508 12.0645 m
7.45508 5.84570 l
8.40820 5.84570 l
8.40820 6.78320 l
8.64779 6.34570 8.86914 6.05664 9.07227 5.91602  c
9.27539 5.77539 9.50195 5.70508 9.75195 5.70508  c
10.1061 5.70508 10.4655 5.81445 10.8301 6.03320  c
10.4707 7.01758 l
10.2103 6.86133 9.95508 6.78320 9.70508 6.78320  c
9.46549 6.78320 9.25456 6.85352 9.07227 6.99414  c
8.88997 7.13477 8.76237 7.33008 8.68945 7.58008  c
8.56445 7.95508 8.50195 8.36133 8.50195 8.79883  c
8.50195 12.0645 l
7.45508 12.0645 l
h
15.5293 11.2988 m
15.1335 11.6322 14.7559 11.8665 14.3965 12.0020  c
14.0371 12.1374 13.6491 12.2051 13.2324 12.2051  c
12.5449 12.2051 12.0189 12.0384 11.6543 11.7051  c
11.2897 11.3717 11.1074 10.9447 11.1074 10.4238  c
11.1074 10.1217 11.1751 9.84310 11.3105 9.58789  c
11.4460 9.33268 11.6283 9.12956 11.8574 8.97852  c
12.0866 8.82747 12.3418 8.71549 12.6230 8.64258  c
12.8210 8.58008 13.1335 8.52279 13.5605 8.47070  c
14.4043 8.37695 15.0293 8.25716 15.4355 8.11133  c
15.4355 7.96549 15.4355 7.87695 15.4355 7.84570  c
15.4355 7.40820 15.3366 7.10091 15.1387 6.92383  c
14.8678 6.69466 14.4668 6.58008 13.9355 6.58008  c
13.4460 6.58008 13.0814 6.66602 12.8418 6.83789  c
12.6022 7.00977 12.4251 7.31445 12.3105 7.75195  c
11.2793 7.61133 l
11.3730 7.17383 11.5293 6.81966 11.7480 6.54883  c
11.9668 6.27799 12.2793 6.06966 12.6855 5.92383  c
13.0918 5.77799 13.5605 5.70508 14.0918 5.70508  c
14.6230 5.70508 15.0553 5.76758 15.3887 5.89258  c
15.7220 6.01758 15.9668 6.17383 16.1230 6.36133  c
16.2793 6.54883 16.3887 6.78841 16.4512 7.08008  c
16.4824 7.25716 16.4980 7.58008 16.4980 8.04883  c
16.4980 9.45508 l
16.4980 10.4342 16.5215 11.0540 16.5684 11.3145  c
16.6152 11.5749 16.7064 11.8249 16.8418 12.0645  c
15.7324 12.0645 l
15.6283 11.8457 15.5605 11.5905 15.5293 11.2988  c
h
15.4355 8.93945 m
15.0501 9.09570 14.4772 9.23112 13.7168 9.34570  c
13.2793 9.40820 12.9720 9.47852 12.7949 9.55664  c
12.6178 9.63477 12.4798 9.74674 12.3809 9.89258  c
12.2819 10.0384 12.2324 10.2051 12.2324 10.3926  c
12.2324 10.6738 12.3392 10.9082 12.5527 11.0957  c
12.7663 11.2832 13.0762 11.3770 13.4824 11.3770  c
13.8887 11.3770 14.2507 11.2884 14.5684 11.1113  c
14.8861 10.9342 15.1178 10.6895 15.2637 10.3770  c
15.3783 10.1374 15.4355 9.78841 15.4355 9.33008  c
15.4355 8.93945 l
h
18.1406 12.0645 m
18.1406 5.84570 l
19.0781 5.84570 l
19.0781 6.72070 l
19.5365 6.04362 20.1979 5.70508 21.0625 5.70508  c
21.4375 5.70508 21.7839 5.77279 22.1016 5.90820  c
22.4193 6.04362 22.6562 6.22070 22.8125 6.43945  c
22.9688 6.65820 23.0781 6.91341 23.1406 7.20508  c
23.1719 7.40299 23.1875 7.74674 23.1875 8.23633  c
23.1875 12.0645 l
22.1406 12.0645 l
22.1406 8.28320 l
22.1406 7.84570 22.0990 7.52279 22.0156 7.31445  c
21.9323 7.10612 21.7865 6.93685 21.5781 6.80664  c
21.3698 6.67643 21.1250 6.61133 20.8438 6.61133  c
20.3958 6.61133 20.0078 6.75456 19.6797 7.04102  c
19.3516 7.32747 19.1875 7.86654 19.1875 8.65820  c
19.1875 12.0645 l
18.1406 12.0645 l
h
28.8770 9.78320 m
29.9082 9.92383 l
29.7936 10.6322 29.5020 11.1895 29.0332 11.5957  c
28.5645 12.0020 27.9915 12.2051 27.3145 12.2051  c
26.4603 12.2051 25.7754 11.9264 25.2598 11.3691  c
24.7441 10.8118 24.4863 10.0124 24.4863 8.97070  c
24.4863 8.30404 24.5983 7.71810 24.8223 7.21289  c
25.0462 6.70768 25.3848 6.33008 25.8379 6.08008  c
26.2910 5.83008 26.7884 5.70508 27.3301 5.70508  c
27.9967 5.70508 28.5462 5.87435 28.9785 6.21289  c
29.4108 6.55143 29.6895 7.03841 29.8145 7.67383  c
28.7832 7.83008 l
28.6895 7.41341 28.5176 7.09831 28.2676 6.88477  c
28.0176 6.67122 27.7155 6.56445 27.3613 6.56445  c
26.8301 6.56445 26.3978 6.75456 26.0645 7.13477  c
25.7311 7.51497 25.5645 8.11654 25.5645 8.93945  c
25.5645 9.78320 25.7259 10.3926 26.0488 10.7676  c
26.3717 11.1426 26.7884 11.3301 27.2988 11.3301  c
27.7155 11.3301 28.0618 11.2051 28.3379 10.9551  c
28.6139 10.7051 28.7936 10.3145 28.8770 9.78320  c
h
30.8145 12.0645 m
30.8145 3.47070 l
31.8613 3.47070 l
31.8613 6.54883 l
32.3509 5.98633 32.9707 5.70508 33.7207 5.70508  c
34.1895 5.70508 34.5931 5.79622 34.9316 5.97852  c
35.2702 6.16081 35.5124 6.41081 35.6582 6.72852  c
35.8040 7.04622 35.8770 7.51237 35.8770 8.12695  c
35.8770 12.0645 l
34.8301 12.0645 l
34.8301 8.12695 l
34.8301 7.59570 34.7155 7.21029 34.4863 6.97070  c
34.2572 6.73112 33.9342 6.61133 33.5176 6.61133  c
33.2051 6.61133 32.9108 6.69206 32.6348 6.85352  c
32.3587 7.01497 32.1608 7.23372 32.0410 7.50977  c
31.9212 7.78581 31.8613 8.16862 31.8613 8.65820  c
31.8613 12.0645 l
30.8145 12.0645 l
h
42.7383 11.0488 m
42.7383 12.0645 l
37.0508 12.0645 l
37.0508 11.8145 37.0924 11.5697 37.1758 11.3301  c
37.3216 10.9447 37.5534 10.5645 37.8711 10.1895  c
38.1888 9.81445 38.6497 9.38216 39.2539 8.89258  c
40.1914 8.12174 40.8242 7.51237 41.1523 7.06445  c
41.4805 6.61654 41.6445 6.19466 41.6445 5.79883  c
41.6445 5.38216 41.4935 5.03060 41.1914 4.74414  c
40.8893 4.45768 40.4987 4.31445 40.0195 4.31445  c
39.5091 4.31445 39.1029 4.46549 38.8008 4.76758  c
38.4987 5.06966 38.3424 5.49154 38.3320 6.03320  c
37.2539 5.92383 l
37.3268 5.11133 37.6055 4.49414 38.0898 4.07227  c
38.5742 3.65039 39.2279 3.43945 40.0508 3.43945  c
40.8737 3.43945 41.5247 3.66862 42.0039 4.12695  c
42.4831 4.58529 42.7227 5.15299 42.7227 5.83008  c
42.7227 6.17383 42.6523 6.50977 42.5117 6.83789  c
42.3711 7.16602 42.1367 7.51497 41.8086 7.88477  c
41.4805 8.25456 40.9414 8.75716 40.1914 9.39258  c
39.5560 9.92383 39.1471 10.2858 38.9648 10.4785  c
38.7826 10.6712 38.6341 10.8613 38.5195 11.0488  c
42.7383 11.0488 l
h
f
[ 1.00000 0.00000 0.00000 1.00000 277.000 175.117 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
.752941 .752941 .752941 RG
newpath
350.299 179.000 m
365.000 179.000 l
365.000 193.701 l
350.299 193.701 l
350.299 179.000 l
h
f
0 j
0.00000 0.00000 0.00000 RG
newpath
350.299 179.000 m
365.000 179.000 l
365.000 193.701 l
350.299 193.701 l
350.299 179.000 l
h
S
1.00000 1.00000 1.00000 RG
newpath
350.299 179.000 m
365.000 179.000 l
365.000 183.900 l
357.649 183.900 l
357.649 188.801 l
350.299 188.801 l
h
f*
2 j
0.00000 0.00000 0.00000 RG
newpath
350.299 179.000 m
365.000 179.000 l
365.000 183.900 l
357.649 183.900 l
357.649 188.801 l
350.299 188.801 l
h
S
0.00000 0.00000 0.00000 RG
0 j
1.00000 1.00000 1.00000 RG
newpath
160.000 35.0000 m
160.000 54.0000 l
160.000 55.6569 161.343 57.0000 163.000 57.0000  c
195.062 57.0000 l
196.719 57.0000 198.062 55.6569 198.062 54.0000  c
198.062 35.0000 l
198.062 33.3431 196.719 32.0000 195.062 32.0000  c
163.000 32.0000 l
161.343 32.0000 160.000 33.3431 160.000 35.0000  c
h
f
2 j
.611765 .564706 .564706 RG
newpath
160.000 35.0000 m
160.000 54.0000 l
160.000 55.6569 161.343 57.0000 163.000 57.0000  c
195.062 57.0000 l
196.719 57.0000 198.062 55.6569 198.062 54.0000  c
198.062 35.0000 l
198.062 33.3431 196.719 32.0000 195.062 32.0000  c
163.000 32.0000 l
161.343 32.0000 160.000 33.3431 160.000 35.0000  c
h
S
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [160.0 32.0 160.0 57.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8784314 0.8117647 0.8117647]
         /C1 [1.0 1.0 1.0]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
163.000 38.0000 m
163.000 53.5000 l
163.000 55.1569 164.343 56.5000 166.000 56.5000  c
194.562 56.5000 l
196.219 56.5000 197.562 55.1569 197.562 53.5000  c
197.562 38.0000 l
197.562 36.3431 196.219 35.0000 194.562 35.0000  c
166.000 35.0000 l
164.343 35.0000 163.000 36.3431 163.000 38.0000  c
h
f
1.00000 1.00000 1.00000 RG
newpath
160.000 50.0000 m
160.000 104.000 l
160.000 105.657 161.343 107.000 163.000 107.000  c
244.000 107.000 l
245.657 107.000 247.000 105.657 247.000 104.000  c
247.000 50.0000 l
247.000 48.3431 245.657 47.0000 244.000 47.0000  c
163.000 47.0000 l
161.343 47.0000 160.000 48.3431 160.000 50.0000  c
h
f
.611765 .564706 .564706 RG
newpath
160.000 50.0000 m
160.000 104.000 l
160.000 105.657 161.343 107.000 163.000 107.000  c
244.000 107.000 l
245.657 107.000 247.000 105.657 247.000 104.000  c
247.000 50.0000 l
247.000 48.3431 245.657 47.0000 244.000 47.0000  c
163.000 47.0000 l
161.343 47.0000 160.000 48.3431 160.000 50.0000  c
h
S
<< /PatternType 2
   /Shading
   << /ShadingType 2
      /ColorSpace /DeviceRGB
      /Coords [160.0 47.0 160.0 107.0]
      /Function
      << /FunctionType 2
         /Domain [0 1]
         /Range [0 1 0 1 0 1]
         /C0 [0.8784314 0.8117647 0.8117647]
         /C1 [1.0 1.0 1.0]
         /N 1
      >>
      /Extend [true true]
   >>
>>
matrix makepattern setpattern
newpath
163.000 53.0000 m
163.000 103.500 l
163.000 105.157 164.343 106.500 166.000 106.500  c
243.500 106.500 l
245.157 106.500 246.500 105.157 246.500 103.500  c
246.500 53.0000 l
246.500 51.3431 245.157 50.0000 243.500 50.0000  c
166.000 50.0000 l
164.343 50.0000 163.000 51.3431 163.000 53.0000  c
h
f
[ 1.00000 0.00000 0.00000 1.00000 185.500 75.1169 ] concat
[ 1.00000 0.00000 0.00000 1.00000 0.00000 1.00000 ] concat
0.00000 0.00000 0.00000 RG
newpath
.796875 12.0645 m
.796875 5.84570 l
1.73438 5.84570 l
1.73438 6.72070 l
1.93229 6.40820 2.19271 6.16081 2.51562 5.97852  c
2.83854 5.79622 3.20833 5.70508 3.62500 5.70508  c
4.08333 5.70508 4.46094 5.79883 4.75781 5.98633  c
5.05469 6.17383 5.26042 6.43945 5.37500 6.78320  c
5.87500 6.06445 6.51562 5.70508 7.29688 5.70508  c
7.92188 5.70508 8.39844 5.87435 8.72656 6.21289  c
9.05469 6.55143 9.21875 7.08008 9.21875 7.79883  c
9.21875 12.0645 l
8.17188 12.0645 l
8.17188 8.14258 l
8.17188 7.72591 8.13802 7.42383 8.07031 7.23633  c
8.00260 7.04883 7.88021 6.89779 7.70312 6.78320  c
7.52604 6.66862 7.31250 6.61133 7.06250 6.61133  c
6.62500 6.61133 6.26302 6.75716 5.97656 7.04883  c
5.69010 7.34049 5.54688 7.80924 5.54688 8.45508  c
5.54688 12.0645 l
4.48438 12.0645 l
4.48438 8.01758 l
4.48438 7.54883 4.39844 7.19727 4.22656 6.96289  c
4.05469 6.72852 3.77604 6.61133 3.39062 6.61133  c
3.08854 6.61133 2.81250 6.68945 2.56250 6.84570  c
2.31250 7.00195 2.13021 7.23112 2.01562 7.53320  c
1.90104 7.83529 1.84375 8.26758 1.84375 8.83008  c
1.84375 12.0645 l
.796875 12.0645 l
h
15.0430 10.0645 m
16.1367 10.1895 l
15.9701 10.8249 15.6523 11.3197 15.1836 11.6738  c
14.7148 12.0280 14.1211 12.2051 13.4023 12.2051  c
12.4961 12.2051 11.7747 11.9238 11.2383 11.3613  c
10.7018 10.7988 10.4336 10.0124 10.4336 9.00195  c
10.4336 7.96029 10.7044 7.15039 11.2461 6.57227  c
11.7878 5.99414 12.4857 5.70508 13.3398 5.70508  c
14.1732 5.70508 14.8529 5.98633 15.3789 6.54883  c
15.9049 7.11133 16.1680 7.90820 16.1680 8.93945  c
16.1680 9.00195 16.1680 9.09570 16.1680 9.22070  c
11.5273 9.22070 l
11.5690 9.90820 11.7617 10.4316 12.1055 10.7910  c
12.4492 11.1504 12.8815 11.3301 13.4023 11.3301  c
13.7878 11.3301 14.1185 11.2285 14.3945 11.0254  c
14.6706 10.8223 14.8867 10.5020 15.0430 10.0645  c
h
11.5898 8.36133 m
15.0586 8.36133 l
15.0169 7.83008 14.8867 7.43424 14.6680 7.17383  c
14.3242 6.76758 13.8867 6.56445 13.3555 6.56445  c
12.8659 6.56445 12.4570 6.72591 12.1289 7.04883  c
11.8008 7.37174 11.6211 7.80924 11.5898 8.36133  c
h
17.4512 12.0645 m
17.4512 5.84570 l
18.4043 5.84570 l
18.4043 6.78320 l
18.6439 6.34570 18.8652 6.05664 19.0684 5.91602  c
19.2715 5.77539 19.4980 5.70508 19.7480 5.70508  c
20.1022 5.70508 20.4616 5.81445 20.8262 6.03320  c
20.4668 7.01758 l
20.2064 6.86133 19.9512 6.78320 19.7012 6.78320  c
19.4616 6.78320 19.2507 6.85352 19.0684 6.99414  c
18.8861 7.13477 18.7585 7.33008 18.6855 7.58008  c
18.5605 7.95508 18.4980 8.36133 18.4980 8.79883  c
18.4980 12.0645 l
17.4512 12.0645 l
h
21.2598 12.5801 m
22.2910 12.7363 l
22.3327 13.0488 22.4525 13.2780 22.6504 13.4238  c
22.9108 13.6217 23.2650 13.7207 23.7129 13.7207  c
24.2025 13.7207 24.5801 13.6217 24.8457 13.4238  c
25.1113 13.2259 25.2910 12.9551 25.3848 12.6113  c
25.4473 12.3926 25.4733 11.9395 25.4629 11.2520  c
25.0046 11.7936 24.4316 12.0645 23.7441 12.0645  c
22.8900 12.0645 22.2285 11.7546 21.7598 11.1348  c
21.2910 10.5150 21.0566 9.77799 21.0566 8.92383  c
21.0566 8.33008 21.1634 7.78060 21.3770 7.27539  c
21.5905 6.77018 21.9004 6.38216 22.3066 6.11133  c
22.7129 5.84049 23.1921 5.70508 23.7441 5.70508  c
24.4837 5.70508 25.0931 6.00195 25.5723 6.59570  c
25.5723 5.84570 l
26.5410 5.84570 l
26.5410 11.2207 l
26.5410 12.1895 26.4421 12.8770 26.2441 13.2832  c
26.0462 13.6895 25.7337 14.0098 25.3066 14.2441  c
24.8796 14.4785 24.3535 14.5957 23.7285 14.5957  c
22.9889 14.5957 22.3900 14.4290 21.9316 14.0957  c
21.4733 13.7624 21.2493 13.2572 21.2598 12.5801  c
h
22.1348 8.84570 m
22.1348 9.65820 22.2962 10.2520 22.6191 10.6270  c
22.9421 11.0020 23.3483 11.1895 23.8379 11.1895  c
24.3275 11.1895 24.7363 11.0020 25.0645 10.6270  c
25.3926 10.2520 25.5566 9.66862 25.5566 8.87695  c
25.5566 8.11654 25.3874 7.54362 25.0488 7.15820  c
24.7103 6.77279 24.3014 6.58008 23.8223 6.58008  c
23.3535 6.58008 22.9551 6.77018 22.6270 7.15039  c
22.2988 7.53060 22.1348 8.09570 22.1348 8.84570  c
h
32.3867 10.0645 m
33.4805 10.1895 l
33.3138 10.8249 32.9961 11.3197 32.5273 11.6738  c
32.0586 12.0280 31.4648 12.2051 30.7461 12.2051  c
29.8398 12.2051 29.1185 11.9238 28.5820 11.3613  c
28.0456 10.7988 27.7773 10.0124 27.7773 9.00195  c
27.7773 7.96029 28.0482 7.15039 28.5898 6.57227  c
29.1315 5.99414 29.8294 5.70508 30.6836 5.70508  c
31.5169 5.70508 32.1966 5.98633 32.7227 6.54883  c
33.2487 7.11133 33.5117 7.90820 33.5117 8.93945  c
33.5117 9.00195 33.5117 9.09570 33.5117 9.22070  c
28.8711 9.22070 l
28.9128 9.90820 29.1055 10.4316 29.4492 10.7910  c
29.7930 11.1504 30.2253 11.3301 30.7461 11.3301  c
31.1315 11.3301 31.4622 11.2285 31.7383 11.0254  c
32.0143 10.8223 32.2305 10.5020 32.3867 10.0645  c
h
28.9336 8.36133 m
32.4023 8.36133 l
32.3607 7.83008 32.2305 7.43424 32.0117 7.17383  c
31.6680 6.76758 31.2305 6.56445 30.6992 6.56445  c
30.2096 6.56445 29.8008 6.72591 29.4727 7.04883  c
29.1445 7.37174 28.9648 7.80924 28.9336 8.36133  c
h
f
[ 1.00000 0.00000 0.00000 1.00000 157.500 47.1169 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
.752941 .752941 .752941 RG
newpath
226.299 51.0000 m
241.000 51.0000 l
241.000 65.7012 l
226.299 65.7012 l
226.299 51.0000 l
h
f
0 j
0.00000 0.00000 0.00000 RG
newpath
226.299 51.0000 m
241.000 51.0000 l
241.000 65.7012 l
226.299 65.7012 l
226.299 51.0000 l
h
S
1.00000 1.00000 1.00000 RG
newpath
226.299 51.0000 m
241.000 51.0000 l
241.000 55.9004 l
233.649 55.9004 l
233.649 60.8008 l
226.299 60.8008 l
h
f*
2 j
0.00000 0.00000 0.00000 RG
newpath
226.299 51.0000 m
241.000 51.0000 l
241.000 55.9004 l
233.649 55.9004 l
233.649 60.8008 l
226.299 60.8008 l
h
S
0.00000 0.00000 0.00000 RG
0 j
2 J
2 j
[ 3.00000 5.00000 ] 0.00000 d
0.00000 0.00000 0.00000 RG
newpath
240.824 108.028 m
291.205 160.035 l
S
[ .718240 -.695795 .695795 .718240 -29.3014 247.711 ] concat
.700000 w
[ ] 0.00000 d
newpath
291.205 160.035 m
286.205 148.035 l
291.205 160.035 l
296.205 148.035 l
S
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
7.00000 w
0 J
10.0000 M
0.00000 0.00000 0.00000 RG
1.00000 w
2 J
[ 3.00000 5.00000 ] 0.00000 d
0.00000 0.00000 0.00000 RG
newpath
116.613 236.044 m
163.466 279.968 l
S
[ .683941 -.729537 .729537 .683941 -152.582 207.741 ] concat
.700000 w
[ ] 0.00000 d
newpath
163.466 279.968 m
158.466 267.968 l
163.466 279.968 l
168.466 267.968 l
S
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
7.00000 w
0 J
10.0000 M
0.00000 0.00000 0.00000 RG
1.00000 w
2 J
[ 3.00000 5.00000 ] 0.00000 d
0.00000 0.00000 0.00000 RG
newpath
287.712 236.005 m
242.225 280.024 l
S
[ .695421 .718602 -.718602 .695421 275.003 -88.7738 ] concat
.700000 w
[ ] 0.00000 d
newpath
242.225 280.024 m
237.225 268.024 l
242.225 280.024 l
247.225 268.024 l
S
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
7.00000 w
0 J
10.0000 M
0.00000 0.00000 0.00000 RG
1.00000 w
2 J
[ 3.00000 5.00000 ] 0.00000 d
0.00000 0.00000 0.00000 RG
newpath
165.046 107.954 m
113.082 159.918 l
S
[ .707107 .707107 -.707107 .707107 146.200 -33.1223 ] concat
.700000 w
[ ] 0.00000 d
newpath
113.082 159.918 m
108.082 147.918 l
113.082 159.918 l
118.082 147.918 l
S
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
7.00000 w
0 J
10.0000 M
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
newpath
0.00000 0.00000 m
0.00000 356.000 l
372.000 356.000 l
372.000 0.00000 l
h
W
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -28.0000 -28.0000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
newpath
0.00000 0.00000 m
0.00000 356.000 l
372.000 356.000 l
372.000 0.00000 l
h
W
Q
end end restore showpage

%%Trailer
%%EOF
