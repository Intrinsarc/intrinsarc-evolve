#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:A-Formal-Description"

\end_inset

A Formal Description of Backbone
\end_layout

\begin_layout Standard
In this section we formally describe how components defined using resemblance
 and replacement in extension strata can evolve the existing compositional
 structure of an architecture defined in a base stratum.
\end_layout

\begin_layout Standard
In a distributed setting the extension strata may be owned by parties with
 no knowledge of each other, who have each chosen to evolve the architecture
 independently.
 This arrangement leads naturally to the desire to combine and merge these
 branching strata back into a unified architecture.
 We describe the branching and merging rules and show that any structural
 errors can be corrected by adding further component definitions.
\end_layout

\begin_layout Standard
In the following text we collectively refer to components and interfaces
 as elements.
 We use the term constituents to refer to the internals of elements (ports,
 parts, connectors, attributes, operations etc) that can be adjusted using
 deltas.
\end_layout

\begin_layout Subsection
Strata and Strata Dependencies
\end_layout

\begin_layout Standard
Dependencies between strata govern the order of application of deltas applied
 to element definitions, via the interplay between replacement and resemblance.
 Consequently, an understanding of strata rules is vital begin by describing
 the stratum concept.
\end_layout

\begin_layout Standard
A stratum is a hierarchical module that owns and groups element (component
 and interface) definitions.
 A stratum must explicitly its dependency on other strata.
 This controls visibility - an element can only 
\begin_inset Quotes eld
\end_inset

see
\begin_inset Quotes erd
\end_inset

 elements in its owning stratum or stratum which are (possibly transitively)
 depended upon.
\end_layout

\begin_layout Description
Definition (Stratum): A stratum 
\emph on
s
\emph default
 is represented as the structure
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
s=(p,D,E)
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\emph on
p
\emph default
 is a single possible parent stratum giving rise to hierarchical nesting,
 
\emph on
D
\emph default
 represents the relations from 
\emph on
s
\emph default
 to other strata that 
\emph on
s
\emph default
 depends upon, and 
\emph on
E
\emph default
 represents the elements owned by 
\emph on
s
\emph default
.
 We define 
\emph on
transD(s)
\emph default
 to be the transitive closure of the dependencies of 
\emph on
s
\emph default
.
\end_layout

\begin_layout Standard
We outlaw circular dependencies between strata, forcing the structure into
 a graph.
 This allows us to divide strata into those a given stratum depends on,
 those that depend on it, and those it has no visibility of.
\end_layout

\begin_layout Standard
Constraint (Strata non-circularity): Strata dependencies must form a graph
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\forall s\in Strata:\, s\notin transD(s)\bigcup\{s\}
\]

\end_inset


\end_layout

\begin_layout Standard
We now describe the concept of independent strata, where two strata have
 no visibility of each other.
 This allows us
\end_layout

\end_body
\end_document
