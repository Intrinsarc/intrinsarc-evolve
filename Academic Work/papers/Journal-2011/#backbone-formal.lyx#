#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:A-Formal-Description"

\end_inset

A Formal Description of Backbone
\end_layout

\begin_layout Standard
In this section we formally describe how components, defined in an extension
 stratum using a combination of resemblance and replacement, can evolve
 the existing compositional structure of an architecture defined in a base
 stratum.
\end_layout

\begin_layout Standard
The ability to evolve an architecture in a decentralized manner, where strata
 are used to group and organise these component definitions, leads naturally
 to the desire to combine and merge strata that each evolve a common base
 into a unified architecture.
 We describe the merging rules, showing that any structural errors can be
 corrected by adding further component definitions.
\end_layout

\begin_layout Standard
To make the treatment more concrete we present a variant of our bridge system
 (figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:A-variant-of"

\end_inset

) and demonstrate how the formal model applies to this architecture.
 We have (
\family typewriter
MULTISLB
\family default
 resembles 
\family typewriter
SLB
\family default
), (
\family typewriter
SLBa’
\family default
 evolves 
\family typewriter
SLB
\family default
) and (
\family typewriter
SLBb’
\family default
 evolves 
\family typewriter
SLB
\family default
).
 In other words, the three middle strata represent branches of the original
 system.
 The top stratum has visibility of all branches and hence merges these,
 bringing the definitions into one place with potential conflicts.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/formal-merged.eps
	width 100col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:A-variant-of"

\end_inset

A variant of the Bridge system
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The formal model is specified in Alloy [], which is a simple relational
 logic supported by model checking tools.
 The full specification is presented in the appendix at the end of this
 report.
 Dependencies between strata in an extension architecture govern the order
 of application of resemblance and replacement.
 We therefore begin by describing the stratum concept.
\end_layout

\begin_layout Subsection
Structures
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Definition
\emph default
 A 
\emph on
stratum
\emph default
 is a hierarchical module that owns and groups element (component and interface)
 definitions.
\end_layout

\begin_layout Standard
A stratum may depend on a set of other strata and it owns a set of elements.
 An element is an abstraction of a component or interface or other compositional
 artifact.
 We model stratum as below.
\end_layout

\begin_layout LyX-Code

\size small
sig Stratum {
\end_layout

\begin_layout LyX-Code

\size small
  dependson: set Stratum,
\end_layout

\begin_layout LyX-Code

\size small
  elements: set Element,
\end_layout

\begin_layout LyX-Code

\size small
  ...
 }
\end_layout

\begin_layout Standard
Transitive strata dependencies determine which other elements are visible
 to elements in that stratum for use in composition, resemblance and replacement
 relationships.
\end_layout

\begin_layout Standard
We outlaw circular dependencies between strata, forcing the structure into
 a graph.
\end_layout

\begin_layout LyX-Code

\size small
all s: Stratum | s not in s.^dependson
\end_layout

\begin_layout Standard
This allows us to divide strata into those a given stratum depends on (transitiv
ely), those that depend on it, and those it has no visibility of.
\end_layout

\begin_layout Standard
Two strata are termed independent if they have no visibility of each other.
 If independent strata depend on common underlying strata, like 
\family typewriter
EvolvedA
\family default
 and 
\family typewriter
EvolvedB
\family default
 in figure X, we call them branches.
\end_layout

\begin_layout LyX-Code

\size small
pred branch[a, b: Stratum] {
\end_layout

\begin_layout LyX-Code

\size small
  let alla = a.*dependson, allb = b.*dependson |
\end_layout

\begin_layout LyX-Code

\size small
    a not in allb and b not in alla and
\end_layout

\begin_layout LyX-Code

\size small
      some alla & allb
\end_layout

\begin_layout LyX-Code

\size small
}
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Definition
\emph default
 An 
\emph on
element
\emph default
 is a compositional structure, such as a component or interface, that can
 participate in resemblance and replacement relationships.
\end_layout

\begin_layout Standard
It is represented by the following structure.
\end_layout

\begin_layout LyX-Code

\size small
sig Element {
\end_layout

\begin_layout LyX-Code

\size small
  home: Stratum,
\end_layout

\begin_layout LyX-Code

\size small
  resembles: set Element,
\end_layout

\begin_layout LyX-Code

\size small
  replaces: lone Element,
\end_layout

\begin_layout LyX-Code

\size small
  deltas: lone Deltas
\end_layout

\begin_layout LyX-Code

\size small
}
\end_layout

\begin_layout Standard
Each element has a single home stratum, which owns it, in accord with the
 
\family typewriter
Stratum::elements
\family default
 set.
 An element can resemble any number of other elements of the same type that
 are visible to, or in, the home stratum, and optionally replace an element
 from a stratum that the home (transitively) depends upon.
\end_layout

\begin_layout Standard
As seen below, we disallow having both the initial definition of an element
 and its replacement in the same home.
 This is because stratum is a unit of solitary development ownership - if
 the owner (person or group) of a stratum wished to adjust the structure
 of an owned component, they would edit the definition directly rather than
 creating a replacement.
 Element replacement conversely allows developers to make adjustments to
 strata they do not have ownership of.
\end_layout

\begin_layout LyX-Code

\size small
all e: Element |
\end_layout

\begin_layout LyX-Code

\size small
    let res = e.resembles, rep = e.replaces |
\end_layout

\begin_layout LyX-Code

\size small
  res.home in e.home.*dependson
\end_layout

\begin_layout LyX-Code

\size small
    and rep.home in e.home.^dependson
\end_layout

\begin_layout LyX-Code

\size small
    and e not in res 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Definition
\emph default
 A 
\emph on
deltas
\emph default
 structure holds the adds, deletes or replacements to the resembled constituent
 structure of an element
\begin_inset Foot
status open

\begin_layout Plain Layout
There are two types of replacement in Backbone: element replacement where
 one element can be substituted for another, and delta replacement where
 an element definition replaces some of the constituents that have been
 inherited via resemblance.
 Here we are talking about the latter concept.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We model deltas as shown.
 Note that a constituent is a building block of an element.
 In the case of a component, this could be a port, a connector, an attribute
 or a part.
 Other than having an identity, constituent in our specification is just
 a placeholder.
\end_layout

\begin_layout LyX-Code

\size small
sig Deltas {
\end_layout

\begin_layout LyX-Code

\size small
  owner: Element,
\end_layout

\begin_layout LyX-Code

\size small
  add, delete: set Constituent,
\end_layout

\begin_layout LyX-Code

\size small
  replace: Constituent -> Constituent
\end_layout

\begin_layout LyX-Code

\size small
}
\end_layout

\begin_layout Standard
The 
\family typewriter
add
\family default
 and 
\family typewriter
delete
\family default
 fields indicate constituents to add or delete.
 The 
\family typewriter
replace
\family default
 field is a relation fom the constituent being replaced to that replacing
 it.
 A key point is that any replacing constituent assumes the identity of the
 replaced one - this allows connectors and other references to the replaced
 item to stay valid.
\end_layout

\begin_layout Standard
If an element does not resemble another then all the deltas will be adds
 which build up the initial structure.
\end_layout

\begin_layout Subsection
The Expanded Resemblance Graph
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\emph on
Definition
\emph default
 The 
\emph on
expanded resemblance graph
\emph default
 is a resemblance graph for a given element from a given stratum perspective,
 which takes into account any replacements visible from that perspective.
\end_layout

\begin_layout Standard
The expanded resemblance graph is the resemblance graph for an element after
 all the replacements from extension strata have been factored in.
\end_layout

\begin_layout Standard
Consider, for example, that the 
\family typewriter
MULTISLB
\family default
 resemblance graph is (
\family typewriter
MULTISLB
\family default
 resembles 
\family typewriter
SLB
\family default
).
 If we compute the expanded resemblance graph from the perspective of 
\family typewriter
Merged
\family default
, then we need to take into account that two additional replacements (evolutions
) are present.
 From this perspective, the expanded resemblance graph would now look like
 (
\family typewriter
MULTISLB
\family default
 resembles 
\family typewriter
SLBa’
\family default
 + 
\family typewriter
SLBb’
\family default
, 
\family typewriter
SLBa’
\family default
 resembles 
\family typewriter
SLB
\family default
, 
\family typewriter
SLBb’
\family default
 resembles 
\family typewriter
SLB
\family default
).
 This is shown graphically in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-expanded-resemblance"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/formal-expanded.eps
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-expanded-resemblance"

\end_inset

The expanded resemblance graph for 
\family typewriter
MULTISLB
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
From the same perspective, consider that 
\family typewriter
SLB
\family default
 has a two headed expanded resemblance graph, reflecting that 
\family typewriter
SLBa’
\family default
 and 
\family typewriter
SLBb’
\family default
 have no direct visibility of each other.
 If these definitions conflict then any issues could be corrected by a new
 evolution in the 
\family typewriter
Merged
\family default
 stratum which could add, delete or replace constituents to ensure well
 formedness.
 Similarly, it may be the case from the 
\family typewriter
Merged
\family default
 perspective that evolutions to 
\family typewriter
SLB
\family default
 invalidate the 
\family typewriter
MULTISLB
\family default
 definition.
 Again, any issues can be rectified using evolutions in 
\family typewriter
Merged
\family default
.
 For instance, if we have both an evolution of 
\family typewriter
SLB
\family default
 to correct the merged definition, and a further evolution to 
\family typewriter
MULTISLB
\family default
 then the expanded graph for 
\family typewriter
MULTISLB
\family default
 would look as shown in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Correcting-any-compositional"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename images/formal-corrected.eps
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Correcting-any-compositional"

\end_inset

Correcting any compositional conflicts
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The expanded graph is at the heart of our extension approach.
 In a nutshell, replacement in an extension stratum allows us to insert
 elements into an existing resemblance graph without directly editing existing
 definitions.
 We can use replacement to effect changes to compositional structure or
 to correct conflicts caused when we merge branches.
\end_layout

\begin_layout Standard
The expanded graph specification relies on a notion of the topmost definition
 of an element for a given perspective.
 In our original example, from the 
\family typewriter
Single Lane Bridge
\family default
 perspective, the topmost definition of 
\family typewriter
SLB
\family default
 is simply 
\family typewriter
SLB
\family default
.
 However, from the perspective of 
\family typewriter
Merged
\family default
 it is the set (
\family typewriter
SLBa’
\family default
, 
\family typewriter
SLBb’
\family default
).
 To hold the topmost and expanded graph information we add the following
 field to the 
\family typewriter
Stratum
\family default
 structure:
\end_layout

\begin_layout LyX-Code

\size small
sig Stratum {
\end_layout

\begin_layout LyX-Code

\size small
  ...
\end_layout

\begin_layout LyX-Code

\size small
  topmost: Element -> Element,
\end_layout

\begin_layout LyX-Code

\size small
  eresembles: Element -> Element,
\end_layout

\begin_layout LyX-Code

\size small
  ...
\end_layout

\begin_layout LyX-Code

\size small
}
\end_layout

\begin_layout Standard

\family typewriter
Topmost
\family default
 is determined in the following way, where 
\family typewriter
s
\family default
 is the stratum perspective.
\end_layout

\begin_layout LyX-Code

\size small
all s: Stratum, e: Element {
\end_layout

\begin_layout LyX-Code

\size small
  ...
\end_layout

\begin_layout LyX-Code

\size small
  let reps = replaces.e & s.elements |
\end_layout

\begin_layout LyX-Code

\size small
    some reps => s.topmost[e] = reps
\end_layout

\begin_layout LyX-Code

\size small
      else
\end_layout

\begin_layout LyX-Code

\size small
    e.home = s => s.topmost[e] = e
\end_layout

\begin_layout LyX-Code

\size small
      else
\end_layout

\begin_layout LyX-Code

\size small
    s.topmost[e] = s.dependson.topmost[e]
\end_layout

\begin_layout LyX-Code

\size small
  ...
 
\end_layout

\begin_layout LyX-Code

\size small
}
\end_layout

\begin_layout Standard
The first condition determines whether or not there are any replacements
 of element 
\family typewriter
e
\family default
 in 
\family typewriter
s
\family default
.
 If so, this is clearly the topmost definition.
 Otherwise, if the perspective is the same as the element’s home stratum,
 then the topmost is simply the original element.
 Finally, if none of these situations hold then we defer recursively to
 the strata that the perspective depends upon
\begin_inset Foot
status open

\begin_layout Plain Layout
The 
\family typewriter
\size normal
topmost
\family default
\size default
 field and definition are effectively defining a recursive function.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
We can now compute 
\family typewriter
eresembles
\family default
, the expanded graph, using the following logic.
\end_layout

\begin_layout LyX-Code

\size small
let joint = e.resembles & ee.
\end_layout

\begin_layout LyX-Code

\size small
    replaces,rest = e.resembles - joint |
\end_layout

\begin_layout LyX-Code

\size small
  s.eresembles[e] =
\end_layout

\begin_layout LyX-Code

\size small
    e.home.dependson.topmost[joint]
\end_layout

\begin_layout LyX-Code

\size small
    + s.topmost[rest]
\end_layout

\begin_layout Standard
The 
\family typewriter
joint
\family default
 set contains any elements that 
\family typewriter
e
\family default
 is evolving - i.e.
 where replacement and resemblance overlap.
 If we have evolution, we need to look not at the current stratum (where
 
\family typewriter
topmost
\family default
 would erroneously pick up the element 
\family typewriter
e
\family default
 as a replacement), but instead at the next lowest down strata in the dependency
 graph.
 For all other resembled elements we can start at the current stratum.
 It is also worth noting that for any replacement relation, the target is
 the original unevolved element, even if another evolution of the same element
 is visible to us underneath our home strata.
 This way, even if we move the strata dependencies around we will not invalidate
 any evolutions.
\end_layout

\begin_layout Subsection
Applying Deltas
\end_layout

\begin_layout Standard
We are now in a position to apply the deltas by walking up the expanded
 resemblance graph and adding, deleting and replacing constituents.
 To hold the accumulated deltas we add the following fields to the 
\family typewriter
Stratum
\family default
 structure:
\end_layout

\begin_layout LyX-Code

\size small
sig Stratum {
\end_layout

\begin_layout LyX-Code

\size small
  ...
\end_layout

\begin_layout LyX-Code

\size small
  edeltas: Element -> lone Deltas,
\end_layout

\begin_layout LyX-Code

\size small
  full: Element -> Constituent -> Constituent
\end_layout

\begin_layout LyX-Code

\size small
}
\end_layout

\begin_layout Standard
For a given perspective 
\family typewriter
s
\family default
, element 
\family typewriter
e
\family default
, the deltas from the expanded graph are accumulated into the 
\family typewriter
edeltas
\family default
 field as follows:
\end_layout

\begin_layout LyX-Code

\size small
all s: Stratum, e: Element {
\end_layout

\begin_layout LyX-Code

\size small
  let lower = s.eresembles[e],
\end_layout

\begin_layout LyX-Code

\size small
      me = s.edeltas[e]
\end_layout

\begin_layout LyX-Code

\size small
  {
\end_layout

\begin_layout LyX-Code

\size small
    me.add = s.edeltas[lower].add + e.deltas.add
\end_layout

\begin_layout LyX-Code

\size small
    me.delete = s.edeltas[lower].delete + e.deltas.delete
\end_layout

\begin_layout LyX-Code

\size small
    me.replace = s.edeltas[lower].replace
\end_layout

\begin_layout LyX-Code

\size small
      ++ e.deltas.replace
\end_layout

\begin_layout LyX-Code

\size small
   }
\end_layout

\begin_layout LyX-Code

\size small
}
\end_layout

\begin_layout Standard
In the above, we start with the element 
\family typewriter
e
\family default
 from the perspective 
\family typewriter
s
\family default
.
 We get the elements (
\family typewriter
lower
\family default
) that 
\family typewriter
e
\family default
 resembles in the expanded graph.
 Then we form a new 
\family typewriter
Deltas
\family default
 structure (
\family typewriter
edeltas
\family default
) by recursively summing up the deltas of the lower elements and the deltas
 element of 
\family typewriter
e
\family default
 itself - we union adds and deletes and overwrite the lower replaces with
 the element’s replaces.
\end_layout

\begin_layout Standard
Finally, we form the complete structure (
\family typewriter
full
\family default
) by finding all topmost definitions of a given element 
\family typewriter
e
\family default
, and combining the constituents by applying additions, replacements and
 finally deletions.
 This order of application means that if one branch deletes a constituent
 and another replaces it, then the deletion will always win out.
\end_layout

\begin_layout LyX-Code

\size small
all s: Stratum, e: Element {
\end_layout

\begin_layout LyX-Code

\size small
  let tops = s.topmost[e], me = s.edeltas[tops] |
\end_layout

\begin_layout LyX-Code

\size small
    some e.replaces => no s.full[e]
\end_layout

\begin_layout LyX-Code

\size small
      else
\end_layout

\begin_layout LyX-Code

\size small
    s.full[e] =
\end_layout

\begin_layout LyX-Code

\size small
      { a, b: me.add | a = b }
\end_layout

\begin_layout LyX-Code

\size small
      ++ me.replace
\end_layout

\begin_layout LyX-Code

\size small
      - { d: me.delete, allds: Constituent }
\end_layout

\begin_layout LyX-Code

\size small
}
\end_layout

\begin_layout Standard
The field full is actually a relation (
\family typewriter
Constituent - > Constituent
\family default
), reflecting that even if we replace a constituent (right hand side) it
 still retains the identity of the original constituent (left hand side).
 As described, this allows existing connectors to stay valid.
 An addition of constituent 
\family typewriter
X
\family default
 will result in an 
\family typewriter
X -> X
\family default
 entry.
\end_layout

\begin_layout Standard
The ability to express changes as deltas allows a component to completely
 remake its inherited structure using a combination of adds, deletes and
 replaces.
 Combined with the ability to remake an element’s resemblance graph using
 extension strata, an extension can adjust the architecture of a system
 in any way it pleases without destructively editing the original definition.
\end_layout

\begin_layout Subsection
Structural Conflicts
\end_layout

\begin_layout Standard
Structural conflict occurs when two branches make incompatible evolutions
 to the same element, and we then merge them into a common stratum.
 For instance, 
\family typewriter
SLBa’
\family default
 might replace constituent 
\family typewriter
X
\family default
 with 
\family typewriter
Y
\family default
 and 
\family typewriter
SLBb’
\family default
 might replace 
\family typewriter
X
\family default
 with 
\family typewriter
Z
\family default
.
 Upon merge, we retain both replacements, and the full structure contains
 (
\family typewriter
X -> Y
\family default
, and 
\family typewriter
X -> Z
\family default
).
 When the 
\family typewriter
full
\family default
 set of relations is not a partial function, this type of conflict has occured-
 i.e.
 when we have more than one range value for the same domain value in the
 set of relations.
\end_layout

\begin_layout LyX-Code

\size small
pred conflict[perspective: Stratum, e: Element] {
\end_layout

\begin_layout LyX-Code

\size small
  not functional[ perspective.full[e], Element ]
\end_layout

\begin_layout LyX-Code

\size small
}
\end_layout

\begin_layout Standard
This dilemma can be rectified by a subsequent evolution which definitively
 replaces the constituent, say (
\family typewriter
X -> Q
\family default
).
 This will overwrite (
\family typewriter
++
\family default
) all the previous entries that have 
\family typewriter
X
\family default
 as the domain value, as per the delta application rules.
\end_layout

\begin_layout Standard
More subtle conflicts occur when the adjusted structure in a branch is compositi
onally incompatible with assumptions made in another branch.
 For instance, one branch might delete a connector which the other branch
 was relying on to be present.
 An expanded variant of the above formal specification detects this by describin
g the actual component model in terms of parts, ports, connectors and attributes
 rather than generic constituents, and expressing well-formedness rules
 [].
\end_layout

\begin_layout Subsubsection
Implementation of the Specification
\end_layout

\begin_layout Standard
The Java runtime engine implementation of Backbone is based on the expanded
 specification mentioned above, which additionally covers areas such as
 the full component model, port type inference and interface subtype rules.
 Of particular interest is the use of UUIDs to represent element and constituent
 identity.
 Concretely, each constituent is allocated a unique identifier, and when
 a constituent replaces this it assumes the identity of the replaced constituent.
 In the above specification we have relied on direct element identity instead.
\end_layout

\begin_layout Subsubsection
Summary
\end_layout

\begin_layout Standard
The formal specification explains how an extension stratum can affect the
 resemblance graph of an existing element in an architecture.
 It also details the rules via which delta application occurs, leading to
 the full structure from a given stratum perspective.
 These rules allow an extension stratum to control the way in which deltas
 of existing elements are applied, allowing it to make any changes to the
 original architecture required to support the extension.
\end_layout

\end_body
\end_document
